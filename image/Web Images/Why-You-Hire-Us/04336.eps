%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Plus
%%CreationDate: 12/16/2020
%%BoundingBox: 0 0 900 600
%%HiResBoundingBox: 0 0 900 600
%%CropBox: 0 0 900 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-12-16T22:48:22+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-12-16T22:48:22+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-12-16T22:48:22+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CACsAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwDz5Ciu4VjQ&#xA;HviqqYIhU1JpTuP6YqpNH8VFqRQfjiq6O35qDWla1+8DFV31UGvFq/Riq1IOZcBqcPbrirZtqdW/&#xA;Dxp7++KqJFCRWvviq+SMKiMP2hU4qp4qu4N4Yq7g3hirRBHUYqrQwLInIkjehxVs26heRJp7fLFV&#xA;GRQrlQagYqqBEVatirUka8eS4qpYqrWqK0hDCop/EYqo4q7FW8VX8Y/HFVrhR0xVbiqrGistT9OK&#xA;t8E8P86Yq4IlAafrxVYwXhUChrtirjGQvL6aYqsxVUSIutQehp+FcVX/AFVt6MDT+3+mKrUqCVrs&#xA;pqT8sVXRyyUJVahak/SQf4YqqB7gMQEHYUr9PjiqgI5WNVH2q9/DFV3oXFSKGo9x/XFVq28zdF9u&#xA;oxVdLUxxbdtsVWNGVFa18cVXesNtsVcJB4HfFVjGoA3oMVcC46EjFXVenU0xVo1rv1xVe8nIAUxV&#xA;e/wxU79MVUeJ8MVVrTaU122OKqGKoyy/u2+f8MVQyqGcjFXen8BbwOKrvSFTv0FcVaEYKqa9TTFW&#xA;yAgID7+GKrirAgctj/TFVMswYivTbFVpJPXFV9aR+Jbb6BiqniqokpRaAdTX8KYqqC7YEkKN/wCt&#xA;f44qocjv74qrWoqzL4riqJagdT/M1fuXFVicKJxrx+Lr1xVZD6fF6Ehar16/hirc/H0zzr9o0p44&#xA;qhanFVzH4APHck4qsxVVh3B+f68VXbb/AE/wxVwPxnr2xVok1UeI+jFVJjVifHFV8KgtXwxVzvWQ&#xA;E9FOKq31mOvQ0r+vFVhnX1i4XkCKAHFVDFUZZf3bfP8AhiqGQ/vfpxVWp8JHiSfxxVofafw2xVr4&#xA;eKcelf64qslCVO55eGKq3VqeG+KqHBnkYL1qTirawSNxoPtVI+jFW2glAIPRafjiq1oXUEn9k0P0&#xA;4q6Lj6i8vs964qiaW9T9nvTp7YqsYRemaceVPbFVBHZG5LscVXevJVTX7PTFXLNItKHpWn04q4zy&#xA;GtT1p28MVb+sy+I336DFVoikIqF6/wAcVd6UpIFDXoB9FcVb9CXb4evTpiqwhlJB2I6jFXVOKuqf&#xA;HFXVPjirWKqkS1J3I+WKr0gDhjU1BI/piq76steppWlf9lTFWvq6cWPxDjXrTwriqyeMRtxFfme+&#xA;Kq1kfhfFUKpowPhiqr6y8q9qYq0JFq5/m6Yq0HUKo7g1OKucxGp3rirfqr6nLtSmKrrYgzk9iDiq&#xA;svHgvGtOD0r16jFW0FeKnuin7jiqy7p6dR+0wP4YqhMVXtFIqhmFAehxVdboruVYV2NPniqqII/3&#xA;ZI2Kkt18MVaWGMvEKbMtW69aYq3FBGyMSN6kL17Yq0og9EyGP7JodzvirfpwFWVRUqteYPfFW45Y&#xA;xAKkcgp2+VaYq36sdSagUJpTvsBiqxmTkAG2LmtD2NMVU1UzStU0JqcVXLbV4fFTmCenSmKtC3qy&#xA;Dl9sV6dMVcluWjZ6/ZrtTrTFWzbpw5+pt0G3fFXPbhVYhqslOQp44qthnMYIArUjFWxcEHp+P+Vy&#xA;xVwuAAQq0BJJFfEUxVbLIJG5ceJ771xVUtxAVPqUrXapxVQPU4q2n2gPHFVai8vuxVoAV6bUFNsV&#xA;aqARttTwxVRxVcjshqvXFVyzSLxofs1A+nFXfWJefOu9KfRirTSOygMahemKrMVRVz/vPH9H6sVU&#xA;7U0mX3r+rFUU5Ajen7AIH3DFVqOwMSditT92KuTivpgmhJYgeNcVUiKW8o8H/piqypW2FBTkfiOK&#xA;qOKqiw1AJNK9BiqxgQSD2xVUtjSZfp/ViqLYARn/ACFI/DFVqFawgj4uGx+jFXRKeCjsQ3L6cVUG&#xA;qLVfEP8A1xVzvSACvJpN2PXpiqhirsVdiqu8CrAJKmppt88VUcVdQ+GKuocVdviqsUX6qHp8Vev0&#xA;4qvMCFogNuQJbf2GKttHA6yBFo0ffFWjBH6kdB8LAkip8MVaMMY9ao+z9nrttiqjFEZGIBpQVxVZ&#xA;irsVRVyf3EXvT9WKoatOmKu5N4nfriruTeJ26YqvCseJr16e1MVdwYj7XWu3yxVwjYqN9juBiq0r&#xA;RQfHtiq9CXYdguKrWo8tOxIFcVXSoYZBxNTSoOKtGeUhgTs3XFXCaQFTXdRQfLFWvWk5K1d12GKu&#xA;aR2Xiela/TirasXaNG3UGlPY4qrm2jBA8ad/cDFWhDEX40HQHqe9MVUZlVSAopsCd99xiqvKf9EX&#xA;6MVUIt+QxVUOx+ZGKtfZA3/a7e+KrJaCijtv9+Kq6GMWo5gla9B88VVDT1IadKGn3DFVOLrcfT/H&#xA;FVSOhSNz+ypxVbcDjFIf5iP4Yqo2n943+qf4YqoYq7FVeYx+knFqkdq9NsVat0jcsH7dO2Kqgih/&#xA;V3998VUJAnw8dqipGKqkX2AfAnFWzs1O1CcVWlgAhHTFVkp+OnYbYq2hPptQfTiq2P8AvF+Y/Xiq&#xA;tdgtMAOvH+uKqPBqV96Yq4ow+k0xVxRgK+G2KtMpU0PXFW1VjuAcVbMstd2NR/WuKu9WTb4jt0xV&#xA;pnZqcjWnTFVWSRTbIoPxA7j78VUo34tXFVxlrx26Yq0XqtKd64q07cmriqp6q/VxHvyr/HFV5uFr&#xA;ERX4BRvpGKttPCFfgDyfrirSXCLBwNeVCB9OKtT3CPEFFa7VxVThZVYlq0Iptiqniq+OJpCQtNt9&#xA;8VXm2cCpIA+n+mKqTKVYqeoxVf6ElAdqH+lcVbEEhJG22x39q4q2sUvH4aEHwP0YqtkLq+5BNKGm&#xA;+KreRoB2HTFVUW7vRiR8VPxpirQgah+Kg2r9OKuMJU1DBiGAI964qunY/WFJHHpsafwxVvjt9Nfx&#xA;xVbsVFTT4tvvxVwoXZT7HFVJjyYnxOKqztwAoMVWzgUB74qo4q7FVVpuUQjp074qpYqrxXARApFS&#xA;O+Kue4BWgFNqb/diqxFQireNKYqtdeLEDFVWGFXjJ7iv8KYqv+rx1qAabg79w1MVbWCMswKkUpTf&#xA;sa74qpTRqqKVHUA8q/wxVwtnIBqPiFRiq14SgJqDTr+rFVsbOG+A0J2xVUb1+O7VHcYqpEkkk9T1&#xA;xVFrLH6AFRy4n7wKYq71UJO6jfb3+HvirSOgUKSoO5qPmDT6cVUZyDISOJB6cfn3xVSxVXW5KoF4&#xA;1pT8DXFXfWTSnGvicVU2lJ6bfEW+/FWmkZmDMakYqv8AWFa0xVbz+EDwNcVcJPjLU64qsxVfGpZt&#xA;+gxVuZ6mg6DFW4ejD2xVsj9yP8++Krx/eEeAxVTj/u3xVsjmEP34qslNXPttiro/tV60FcVWkkmp&#xA;xVUinaNSAK1NcVbFw3h4/ia4q4XFCSqgFiCdz2xVbJKHA+GhG1fYYq16sm3xHbpirRdj1NcVdGwV&#xA;qnFVWM/bY/Z7VxVTVQUr3rTFVxjUFttgKjFXemvqAdiK4q7jGEqwPWmKuCKyEgfLFWjHV1VduVOu&#xA;Kti3k23G9fwNMVcLdzXcChI+7FWxbOwPFlO9Nj12riq14iiglhvQ0774q5IqipNPDFWnQqfEHFXR&#xA;KGkUHoTviq09TiqpESAaCuKqWKqkB+P6MVVabcfCmKtKf3rfLFWg/KNtqYq1C3wn23xVSO5rirsV&#xA;dxalabeOKqkW4PsQcVX03p41OKuFQOu4Xrirl3G5qa9fliqi/wBtvmcVVZAPq8Zpua1OKqGKqkjD&#xA;gqqdu+Ktw7gj3BxVfJ9hj4imKuqOYFN6dcVW1Aj3FdzirozRB7nFXOaSofCn68VRMjJx2IqCB95B&#xA;xVaGBJoB1YU8cVahIUUagJY0p2+HFVO4BKKQBQAb98VUy/JVQDfFW5jso74qpqxVgR1GKtYquV2X&#xA;piq3FVyNxauKr/WHImnamKtLJRy1OuKtK9FIp1xVyPxBFOuKrMVdiqrzJQk9KUAxVaj8a++KtmWp&#xA;rTtTFXeoAKEdqHFXCQClBsDXFVjGpJ8cVVZCfq8Yp474qpBSegJ+WKr39RgPhO23Q4q5RKu4U0Ps&#xA;cVaZ3pxIpirvUbkG7jbFXCVgKbYq0XYinvXFXMxY1OKrcVdiq7g3Dn+zWn04qtxVUhKhiSaeGKrS&#xA;SXqfHFUROqi4jAAANKj6cVX+khuTUCigGnbFVp9OWJzx4lK0PyxVt0UtCQBQ9dvpxVv01+tdBTjW&#xA;nbrTFUI32jTpU4qtxV2KowRJQEqKEJ+J3xV3pxt0UAnl/wAKQMVU7lFSlABUmnyoMVUS3wgeGKrc&#xA;VbHUYqum/vX+ZxVaqljQYqu9NsVabl9knYdsVVbUj1CD0p+o1xVXJXl7VX7yScVWg8WVyPhCda7d&#xA;PDFVC5p6zU6bfqGKrEXk6r4kDFUa0ixukYXZsVQ9yipMCuwO9MVbIoPv/HFXEgEn/K3+7FVKT7VB&#xA;0XbFVwI+rEd+f8MVUsVXxuFJqK4qtH2h88VR0hh9VOY+Pbj18cVcv+9D/wCqMVUof7mb6f1YqqxD&#xA;lHEfD+hGKrj9r1O3H+3FUFEoNajpiq7gu23Tr92KrXChQR+1viq4XBH7PZR/wJrirf1qjhgtAK7V&#xA;8cVaMvqyRhhsCAffFVZYoqD4QRtv92KqVxGqsir1P+1iq36vJv02/t/pirXoPudqClT88VXCJ46s&#xA;aGnUVxVaZa9sVWE1JPjirWKtqvJqYqv9L3xVox0HXFVoJBqOo6YqiLdWkf1HNQnc4qp3EgkkJHQb&#xA;DFVplY/TirRdj9JrirqM5rTriq795w4fsk1+nFVvpv4dcVd6b+GKu4sKEigxVXmkQzxsDUClT9OK&#xA;rxPGLgmvwkAV98VaZoY4nVW5F6/jirdvNGsIDMARXbFXCZPq1OXxcaU/DFUKrla074q36jVr71/C&#xA;mKrSSQB4Yq1irsVdiq9Q7dDirRLBt+oxVEvcxnp79vY/1xVa08ZBG/xfroP6YqpvID6lP2j+GKtI&#xA;q8SzdBirUiBaEdDiqzFWwSDUYq3zbxxVosT1OKtYqiY2YWzAKe/xbYqhsVVP90f7L+GKqeKqsJG9&#xA;fniq+orTwIxVr9pTT6cVcd12FRQUGKqbE8APHc4qtAJ6Yqu9Nv8AP3xVrg1K/P8ADFWiCDQ4qrQw&#xA;xOoqTzatKdqYqttlVpeLCoIOKq6xJSMlR9klvfbFWliUtF8OxX4ttq0xVpgFiUiMNUHkadMVXKkZ&#xA;VVKChSpb3xVY4CxJSMGq7tTptiqjHWtK0XqfoxVazcmJ8cVRETLHBzABYnvirV2qhlIFCw3GKofF&#xA;VyAseNdj1xVuVqtQdBsMVaVCRUeNMVb9Nvbv+GKuEZPcdK4q4RE9CMVd6ZpUkD2xVfylSIrtxPXx&#xA;3xVYIZCQAu5FR8sVcIpCoIGxqR9GKtcH4hqbNsDiq70JeXHjvStMVd9XmqBx3PTFVroyGjChxVbi&#xA;rsVXxfbHviqqeq/On3YqtqKpQbGopiqm5qxOKqkR4xSMPtbAH54qttzSZTiqLd14SCo+EUH3YqtR&#xA;6NEOXw8dx9GKrWDtEgRgNjyFaYquR/sISOJj3HviqyQO0ScWAAUchX2xVDAkGoxVrFVa2QPKK9Bv&#xA;irUztLISBsNhiqzg3gfuxVtCFb4qimKrT1OKqkPQ+2+Krzs30E4q1tx6bcemKuSnEbftbDFVr/ZG&#xA;1TvvirTH4AOpbcnFUVAKrG3gpH4jFXKKMqdKIfxIxVZwHGFQQwDE1H34q3KxYxONviI/HFVju4nd&#xA;F3LfCPaoxVbcfEwUb+mKE4qp+m1fu/HFWhGx++mKt+m4+Y3xVo8hSp98VaqfHFV/AegX/a5U/DFX&#xA;LGGUH/PrirYiU060P9MVd6Y4k7ildsVUsVVVjUgVrVumKqZ64q1iqosYK1rirfpr49q4q1C6IxLg&#xA;kUptiq6B0UtXuRT8cVVhPFXdqg4qhZDV2PiScVW4q2CR0PXFXcm8fbFWw7DocVVhC5j5c/ipyC+w&#xA;xVR5tSlcVaJJ+jFVeO4VYglDUGv0VrirZuUMpahoV4jFWo50VUBBqlfxxVo3HJFD1LKwNR4DFVpl&#xA;Uz+puFr9OKuQhpGp0avXFVRuoPiQPuxVoU2p/MevyOKrEKhmI6d6/PFWptmA9sVU8VVQT9WI/wAv&#xA;+GKrVlKrSmKtiWnb/OlMVa9SgoBQb/jiqzFV6EKpbv0GKtKjMGI/ZFTiq8W8pNAO1fvxVwglqBTc&#xA;kile4xVayuoBPQ9MVWYqiGgQPIor8IqMVXG3irQE1UgN9OKuFsu3XdiPoFf6YqhjSpp0xVekRZQ1&#xA;erBfvxVd9WahPIVFaDx47Yq39VatK9wPvFcVaU8IWI3YnhX2xVpEUqD864q36a7bdwD92KtFFAHw&#xA;nc9fpxVqRAoqPHbFXQIryqrdDX9WKrD1OKqgjUgHxpirqBQWGxHTFVnNtt+m4xVwdh371xVcC7kg&#xA;ntirbRsTud/lirXpb0r+HjirvTFQCevtiqwihI8MVVLlVWUgCg22GKrUidxVflirfoPSpp9+KttH&#xA;IimpFD+OKrranGTlWnHenXFVd/stTwSn34quXdmP8rf8a4qhrvZ1XwH6ziqhiqNeQ8pVJ+ELtirp&#xA;aKHeooxUr9FMVVGZRyH8o5ffXFUuxVE27UjGwNXA3xVU2pyqKL6lfpOKr1ZeAPcjl9wGKoCppSu3&#xA;WmKqkcgVaHxxV3qLX/ZV+imKuLqabnbt9OKtO4Zae9cVdbmkyn59du2KrD1xVrFXYq2pAYV6Yqv5&#xA;ReGKtBwrVAxVv1d+mKu9XvTw7+GKtGQVBp098VWYqqTsGkJBqNt8VbhnMYIpWuKrvrO1OJ+/+zFW&#xA;pJ+akUoT3riqmrsoIBoGFDiq4XEoNQ29KfdirQmlFfi+1ucVXB+bEyGp8emKu/d+3bFWm4dqdDiq&#xA;niqrFCrrUmm9MVdNEqcaGtRXFXrX/WLf/fzf9O+Ku/6xb/7+b/p3xV3/AFi3/wB/N/074q7/AKxb&#xA;/wC/m/6d8Vd/1i3/AN/N/wBO+Ku/6xb/AO/m/wCnfFXf9Yt/9/N/074q7/rFv/v5v+nfFXf9Yt/9&#xA;/N/074q7/rFv/v5v+nfFXf8AWLf/AH83/Tvirv8ArFv/AL+b/p3xV3/WLf8A383/AE74q7/rFv8A&#xA;7+b/AKd8Vd/1i3/383/Tvirv+sW/+/m/6d8Vd/1i3/383/Tvirv+sW/+/m/6d8Vd/wBYt/8Afzf9&#xA;O+Ku/wCsW/8Av5v+nfFXf9Yt/wDfzf8ATvirv+sW/wDv5v8Ap3xV3/WLf/fzf9O+Ku/6xb/7+b/p&#xA;3xV3/WLf/fzf9O+Ku/6xb/7+b/p3xV3/AFi3/wB/N/074q7/AKxb/wC/m/6d8Vd/1i3/AN/N/wBO&#xA;+Ku/6xb/AO/m/wCnfFXf9Yt/9/N/074q7/rFv/v5v+nfFX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:e11f7d17-3443-084b-8120-bbcd3bc48675</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e11f7d17-3443-084b-8120-bbcd3bc48675</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0dbb9364-434b-b14f-9db0-d1b9a267e6e5</stRef:instanceID>
            <stRef:documentID>xmp.did:0dbb9364-434b-b14f-9db0-d1b9a267e6e5</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4442953b-bb0e-724e-b813-20061d061084</stEvt:instanceID>
                  <stEvt:when>2019-05-04T10:34:39+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0dbb9364-434b-b14f-9db0-d1b9a267e6e5</stEvt:instanceID>
                  <stEvt:when>2019-05-04T10:47:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e11f7d17-3443-084b-8120-bbcd3bc48675</stEvt:instanceID>
                  <stEvt:when>2020-12-16T22:48:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>900.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 300</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>100</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 500</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>33</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 700</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>24</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>209</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>ffffff</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 600</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>135</xmpG:green>
                           <xmpG:blue>228</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 400</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>165</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue 200</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>144</xmpG:red>
                           <xmpG:green>202</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Indigo 500 - Primary</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>80</xmpG:green>
                           <xmpG:blue>181</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grey 900</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>33</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grey 800</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>66</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grey 700</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>97</xmpG:red>
                           <xmpG:green>97</xmpG:green>
                           <xmpG:blue>97</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Grey 600</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Grey 800</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>55</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>79</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blue Grey 900</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>38</xmpG:red>
                           <xmpG:green>50</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
900 600 li
900 0 li
cp
clp
900 600 mo
0 600 li
0 0 li
900 0 li
900 600 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.129412 .129412 .129412 rgb
f
760.978 265.23 mo
754.53 265.23 li
752.764 248.753 li
750.996 265.23 li
744.324 265.23 li
740.879 234.307 li
745.604 234.307 li
748.212 258.692 li
750.553 234.307 li
755.237 234.307 li
757.666 258.869 li
760.184 234.307 li
764.426 234.307 li
760.978 265.23 li
.180392 .180392 .180392 rgb
f
782.186 265.23 mo
777.239 265.23 li
777.239 251.977 li
771.718 251.977 li
771.718 265.23 li
766.858 265.23 li
766.858 234.307 li
771.718 234.307 li
771.718 247.56 li
777.239 247.56 li
777.239 234.307 li
782.186 234.307 li
782.186 265.23 li
f
798.978 265.23 mo
785.725 265.23 li
785.725 234.307 li
798.978 234.307 li
798.978 238.725 li
790.585 238.725 li
790.585 247.339 li
797.256 247.339 li
797.256 251.757 li
790.585 251.757 li
790.585 260.813 li
798.978 260.813 li
798.978 265.23 li
f
817.093 265.23 mo
812.144 265.23 li
811.882 264.435 811.705 263.949 811.705 261.431 cv
811.705 256.572 li
811.705 253.7 810.731 252.64 808.524 252.64 cv
806.844 252.64 li
806.844 265.23 li
801.986 265.23 li
801.986 234.307 li
809.317 234.307 li
814.355 234.307 816.519 236.648 816.519 241.419 cv
816.519 243.849 li
816.519 247.03 815.502 249.106 813.339 250.122 cv
815.77 251.138 816.562 253.479 816.562 256.705 cv
816.562 261.475 li
816.562 262.978 816.607 264.082 817.093 265.23 cv
806.844 238.725 mo
806.844 248.223 li
808.744 248.223 li
810.555 248.223 811.66 247.427 811.66 244.954 cv
811.66 241.905 li
811.66 239.696 810.907 238.725 809.185 238.725 cv
806.844 238.725 li
f
833 265.23 mo
819.747 265.23 li
819.747 234.307 li
833 234.307 li
833 238.725 li
824.606 238.725 li
824.606 247.339 li
831.278 247.339 li
831.278 251.757 li
824.606 251.757 li
824.606 260.813 li
833 260.813 li
833 265.23 li
f
791.23 364.23 mo
786.953 364.23 li
786.953 359.956 li
791.23 359.956 li
791.23 364.23 li
790.746 357.98 mo
787.437 357.98 li
786.875 347.776 li
786.875 336 li
791.309 336 li
791.309 347.776 li
790.746 357.98 li
f
422.23 318.23 mo
417.954 318.23 li
417.954 313.956 li
422.23 313.956 li
422.23 318.23 li
421.746 311.98 mo
418.438 311.98 li
417.875 301.776 li
417.875 290 li
422.309 290 li
422.309 301.776 li
421.746 311.98 li
f
213.23 451.231 mo
208.954 451.231 li
208.954 446.956 li
213.23 446.956 li
213.23 451.231 li
212.746 444.98 mo
209.438 444.98 li
208.875 434.776 li
208.875 423 li
213.309 423 li
213.309 434.776 li
212.746 444.98 li
f
299.175 401 mo
292.509 401 li
292.509 394.337 li
299.175 394.337 li
299.175 401 li
298.42 391.259 mo
293.263 391.259 li
292.386 375.354 li
292.386 357 li
299.297 357 li
299.297 375.354 li
298.42 391.259 li
f
711.631 394.737 mo
707.861 394.737 li
707.861 384.641 li
703.653 384.641 li
703.653 394.737 li
699.953 394.737 li
699.953 371.179 li
703.653 371.179 li
703.653 381.275 li
707.861 381.275 li
707.861 371.179 li
711.631 371.179 li
711.631 394.737 li
f
719.643 395.007 mo
716.008 395.007 714.023 392.853 714.023 389.083 cv
714.023 376.832 li
714.023 373.063 716.008 370.909 719.643 370.909 cv
723.277 370.909 725.264 373.063 725.264 376.832 cv
725.264 389.083 li
725.264 392.853 723.277 395.007 719.643 395.007 cv
719.643 374.275 mo
718.465 374.275 717.724 374.914 717.724 376.597 cv
717.724 389.319 li
717.724 391.002 718.465 391.641 719.643 391.641 cv
720.821 391.641 721.561 391.002 721.561 389.319 cv
721.561 376.597 li
721.561 374.914 720.821 374.275 719.643 374.275 cv
f
742.128 394.737 mo
737.214 394.737 li
735.867 382.184 li
734.521 394.737 li
729.438 394.737 li
726.814 371.179 li
730.415 371.179 li
732.4 389.757 li
734.185 371.179 li
737.752 371.179 li
739.604 389.891 li
741.521 371.179 li
744.753 371.179 li
742.128 394.737 li
f
495.972 532.923 mo
489.185 532.923 li
489.185 526.14 li
495.972 526.14 li
495.972 532.923 li
495.203 523.005 mo
489.952 523.005 li
489.06 506.811 li
489.06 488.123 li
496.097 488.123 li
496.097 506.811 li
495.203 523.005 li
f
26.7095 258.51 mo
23.5113 258.51 li
22.6342 250.336 li
21.7578 258.51 li
18.4482 258.51 li
16.7389 243.17 li
19.0834 243.17 li
20.3769 255.267 li
21.5376 243.17 li
23.8619 243.17 li
25.0664 255.354 li
26.3164 243.17 li
28.4198 243.17 li
26.7095 258.51 li
f
37.2308 258.51 mo
34.7764 258.51 li
34.7764 251.936 li
32.0376 251.936 li
32.0376 258.51 li
29.627 258.51 li
29.627 243.17 li
32.0376 243.17 li
32.0376 249.744 li
34.7764 249.744 li
34.7764 243.17 li
37.2308 243.17 li
37.2308 258.51 li
f
46.7876 258.51 mo
44.3555 258.51 li
43.9389 255.727 li
40.9799 255.727 li
40.564 258.51 li
38.3502 258.51 li
40.8042 243.17 li
44.3329 243.17 li
46.7876 258.51 li
42.4487 245.887 mo
41.2877 253.645 li
43.6095 253.645 li
42.4487 245.887 li
f
51.3032 258.51 mo
48.8936 258.51 li
48.8936 245.361 li
46.3726 245.361 li
46.3726 243.17 li
53.8237 243.17 li
53.8237 245.361 li
51.3032 245.361 li
51.3032 258.51 li
f
58.8437 258.51 mo
56.5199 258.51 li
56.5199 256.187 li
58.8437 256.187 li
58.8437 258.51 li
58.7777 255.113 mo
56.6299 255.113 li
56.5425 254.851 56.4985 254.565 56.4985 254.171 cv
56.4985 250.818 59.1285 250.511 59.1285 246.698 cv
59.1285 245.602 58.6899 245.186 57.9225 245.186 cv
57.1558 245.186 56.7178 245.602 56.7178 246.698 cv
56.7178 248.364 li
54.4386 248.364 li
54.4386 246.852 li
54.4386 244.397 55.643 242.995 57.9887 242.995 cv
60.3339 242.995 61.5391 244.397 61.5391 246.852 cv
61.5391 250.84 58.6899 251.454 58.6899 254.259 cv
58.6899 254.544 58.7115 254.829 58.7777 255.113 cv
f
164.709 29.5103 mo
161.511 29.5103 li
160.634 21.336 li
159.758 29.5103 li
156.448 29.5103 li
154.739 14.1699 li
157.084 14.1699 li
158.377 26.2666 li
159.538 14.1699 li
161.862 14.1699 li
163.066 26.3544 li
164.316 14.1699 li
166.42 14.1699 li
164.709 29.5103 li
f
175.231 29.5103 mo
172.776 29.5103 li
172.776 22.9354 li
170.038 22.9354 li
170.038 29.5103 li
167.627 29.5103 li
167.627 14.1699 li
170.038 14.1699 li
170.038 20.7441 li
172.776 20.7441 li
172.776 14.1699 li
175.231 14.1699 li
175.231 29.5103 li
f
184.788 29.5103 mo
182.355 29.5103 li
181.939 26.7271 li
178.98 26.7271 li
178.564 29.5103 li
176.35 29.5103 li
178.804 14.1699 li
182.333 14.1699 li
184.788 29.5103 li
180.449 16.8871 mo
179.288 24.6451 li
181.609 24.6451 li
180.449 16.8871 li
f
189.303 29.5103 mo
186.893 29.5103 li
186.893 16.3612 li
184.373 16.3612 li
184.373 14.1699 li
191.824 14.1699 li
191.824 16.3612 li
189.303 16.3612 li
189.303 29.5103 li
f
196.844 29.5103 mo
194.52 29.5103 li
194.52 27.187 li
196.844 27.187 li
196.844 29.5103 li
196.778 26.1134 mo
194.63 26.1134 li
194.542 25.8507 194.498 25.5654 194.498 25.1709 cv
194.498 21.8179 197.128 21.5113 197.128 17.6982 cv
197.128 16.6025 196.69 16.186 195.922 16.186 cv
195.156 16.186 194.718 16.6025 194.718 17.6982 cv
194.718 19.3637 li
192.438 19.3637 li
192.438 17.8516 li
192.438 15.3969 193.643 13.9946 195.989 13.9946 cv
198.334 13.9946 199.539 15.3969 199.539 17.8516 cv
199.539 21.8398 196.69 22.4535 196.69 25.2588 cv
196.69 25.5433 196.711 25.8286 196.778 26.1134 cv
f
29.7095 26.5104 mo
26.5113 26.5104 li
25.6344 18.336 li
24.7577 26.5104 li
21.4482 26.5104 li
19.7388 11.17 li
22.0836 11.17 li
23.377 23.2666 li
24.5376 11.17 li
26.8618 11.17 li
28.0663 23.3545 li
29.3163 11.17 li
31.42 11.17 li
29.7095 26.5104 li
f
40.231 26.5104 mo
37.7763 26.5104 li
37.7763 19.9355 li
35.0375 19.9355 li
35.0375 26.5104 li
32.627 26.5104 li
32.627 11.17 li
35.0375 11.17 li
35.0375 17.7442 li
37.7763 17.7442 li
37.7763 11.17 li
40.231 11.17 li
40.231 26.5104 li
f
49.7876 26.5104 mo
47.3554 26.5104 li
46.939 23.7272 li
43.9799 23.7272 li
43.564 26.5104 li
41.3501 26.5104 li
43.8041 11.17 li
47.3331 11.17 li
49.7876 26.5104 li
45.4486 13.8872 mo
44.2876 21.6451 li
46.6094 21.6451 li
45.4486 13.8872 li
f
54.3032 26.5104 mo
51.8935 26.5104 li
51.8935 13.3613 li
49.3726 13.3613 li
49.3726 11.17 li
56.8237 11.17 li
56.8237 13.3613 li
54.3032 13.3613 li
54.3032 26.5104 li
f
61.8437 26.5104 mo
59.5201 26.5104 li
59.5201 24.187 li
61.8437 24.187 li
61.8437 26.5104 li
61.7779 23.1132 mo
59.6298 23.1132 li
59.5424 22.8505 59.4985 22.5655 59.4985 22.171 cv
59.4985 18.818 62.1285 18.5113 62.1285 14.6983 cv
62.1285 13.6026 61.69 13.186 60.9224 13.186 cv
60.1557 13.186 59.7177 13.6026 59.7177 14.6983 cv
59.7177 16.3637 li
57.4385 16.3637 li
57.4385 14.8515 li
57.4385 12.397 58.643 10.9947 60.9889 10.9947 cv
63.3341 10.9947 64.539 12.397 64.539 14.8515 cv
64.539 18.8398 61.69 19.4536 61.69 22.2588 cv
61.69 22.5434 61.7114 22.8286 61.7779 23.1132 cv
f
636.71 240.51 mo
633.511 240.51 li
632.635 232.336 li
631.758 240.51 li
628.448 240.51 li
626.739 225.17 li
629.083 225.17 li
630.377 237.267 li
631.538 225.17 li
633.861 225.17 li
635.066 237.354 li
636.316 225.17 li
638.42 225.17 li
636.71 240.51 li
f
647.23 240.51 mo
644.776 240.51 li
644.776 233.935 li
642.037 233.935 li
642.037 240.51 li
639.627 240.51 li
639.627 225.17 li
642.037 225.17 li
642.037 231.744 li
644.776 231.744 li
644.776 225.17 li
647.23 225.17 li
647.23 240.51 li
f
656.788 240.51 mo
654.355 240.51 li
653.938 237.727 li
650.979 237.727 li
650.563 240.51 li
648.349 240.51 li
650.805 225.17 li
654.333 225.17 li
656.788 240.51 li
652.448 227.887 mo
651.287 235.645 li
653.609 235.645 li
652.448 227.887 li
f
661.303 240.51 mo
658.894 240.51 li
658.894 227.361 li
656.373 227.361 li
656.373 225.17 li
663.824 225.17 li
663.824 227.361 li
661.303 227.361 li
661.303 240.51 li
f
668.844 240.51 mo
666.52 240.51 li
666.52 238.187 li
668.844 238.187 li
668.844 240.51 li
668.777 237.113 mo
666.63 237.113 li
666.542 236.85 666.498 236.565 666.498 236.171 cv
666.498 232.818 669.128 232.511 669.128 228.698 cv
669.128 227.603 668.69 227.186 667.923 227.186 cv
667.156 227.186 666.718 227.603 666.718 228.698 cv
666.718 230.364 li
664.438 230.364 li
664.438 228.851 li
664.438 226.397 665.643 224.995 667.988 224.995 cv
670.334 224.995 671.539 226.397 671.539 228.851 cv
671.539 232.84 668.69 233.454 668.69 236.259 cv
668.69 236.543 668.711 236.829 668.777 237.113 cv
f
856.71 257.51 mo
853.511 257.51 li
852.635 249.336 li
851.758 257.51 li
848.448 257.51 li
846.739 242.17 li
849.083 242.17 li
850.377 254.267 li
851.538 242.17 li
853.861 242.17 li
855.066 254.354 li
856.316 242.17 li
858.42 242.17 li
856.71 257.51 li
f
867.231 257.51 mo
864.776 257.51 li
864.776 250.935 li
862.037 250.935 li
862.037 257.51 li
859.627 257.51 li
859.627 242.17 li
862.037 242.17 li
862.037 248.744 li
864.776 248.744 li
864.776 242.17 li
867.231 242.17 li
867.231 257.51 li
f
876.788 257.51 mo
874.355 257.51 li
873.939 254.727 li
870.979 254.727 li
870.563 257.51 li
868.35 257.51 li
870.805 242.17 li
874.333 242.17 li
876.788 257.51 li
872.448 244.887 mo
871.287 252.645 li
873.609 252.645 li
872.448 244.887 li
f
881.303 257.51 mo
878.893 257.51 li
878.893 244.361 li
876.373 244.361 li
876.373 242.17 li
883.824 242.17 li
883.824 244.361 li
881.303 244.361 li
881.303 257.51 li
f
888.844 257.51 mo
886.519 257.51 li
886.519 255.187 li
888.844 255.187 li
888.844 257.51 li
888.777 254.113 mo
886.63 254.113 li
886.542 253.851 886.498 253.565 886.498 253.171 cv
886.498 249.818 889.128 249.511 889.128 245.698 cv
889.128 244.603 888.69 244.186 887.923 244.186 cv
887.156 244.186 886.718 244.603 886.718 245.698 cv
886.718 247.364 li
884.438 247.364 li
884.438 245.852 li
884.438 243.397 885.644 241.995 887.988 241.995 cv
890.334 241.995 891.539 243.397 891.539 245.852 cv
891.539 249.84 888.69 250.454 888.69 253.259 cv
888.69 253.543 888.711 253.829 888.777 254.113 cv
f
24.9907 68.296 mo
21.147 68.296 li
21.147 58.0009 li
16.8569 58.0009 li
16.8569 68.296 li
13.0839 68.296 li
13.0839 44.2744 li
16.8569 44.2744 li
16.8569 54.5692 li
21.147 54.5692 li
21.147 44.2744 li
24.9907 44.2744 li
24.9907 68.296 li
f
33.1591 68.5704 mo
29.4531 68.5704 27.4296 66.3741 27.4296 62.5309 cv
27.4296 50.0395 li
27.4296 46.1962 29.4531 43.9999 33.1591 43.9999 cv
36.8656 43.9999 38.8911 46.1962 38.8911 50.0395 cv
38.8911 62.5309 li
38.8911 66.3741 36.8656 68.5704 33.1591 68.5704 cv
33.1591 47.4316 mo
31.9589 47.4316 31.2041 48.0836 31.2041 49.7993 cv
31.2041 62.771 li
31.2041 64.4867 31.9589 65.1388 33.1591 65.1388 cv
34.3614 65.1388 35.1161 64.4867 35.1161 62.771 cv
35.1161 49.7993 li
35.1161 48.0836 34.3614 47.4316 33.1591 47.4316 cv
f
56.086 68.296 mo
51.0757 68.296 li
49.7031 55.4961 li
48.3301 68.296 li
43.148 68.296 li
40.4725 44.2744 li
44.1434 44.2744 li
46.1674 63.2167 li
47.9874 44.2744 li
51.6245 44.2744 li
53.5128 63.3539 li
55.4678 44.2744 li
58.7622 44.2744 li
56.086 68.296 li
f
829.25 120.07 mo
822.249 120.07 li
822.249 101.319 li
814.434 101.319 li
814.434 120.07 li
807.562 120.07 li
807.562 76.3173 li
814.434 76.3173 li
814.434 95.0684 li
822.249 95.0684 li
822.249 76.3173 li
829.25 76.3173 li
829.25 120.07 li
f
844.129 120.57 mo
837.378 120.57 833.691 116.57 833.691 109.57 cv
833.691 86.8179 li
833.691 79.8179 837.378 75.8174 844.129 75.8174 cv
850.879 75.8174 854.568 79.8179 854.568 86.8179 cv
854.568 109.57 li
854.568 116.57 850.879 120.57 844.129 120.57 cv
844.129 82.0678 mo
841.942 82.0678 840.567 83.2554 840.567 86.3804 cv
840.567 110.007 li
840.567 113.132 841.942 114.32 844.129 114.32 cv
846.317 114.32 847.692 113.132 847.692 110.007 cv
847.692 86.3804 li
847.692 83.2554 846.317 82.0678 844.129 82.0678 cv
f
885.887 120.07 mo
876.762 120.07 li
874.262 96.7564 li
871.761 120.07 li
862.321 120.07 li
857.449 76.3173 li
864.136 76.3173 li
867.822 110.82 li
871.136 76.3173 li
877.762 76.3173 li
881.2 111.07 li
884.762 76.3173 li
890.763 76.3173 li
885.887 120.07 li
f
490.368 201.652 mo
485.209 201.652 li
483.795 188.466 li
482.381 201.652 li
477.043 201.652 li
474.285 176.907 li
478.066 176.907 li
480.153 196.42 li
482.026 176.907 li
485.774 176.907 li
487.718 196.562 li
489.734 176.907 li
493.128 176.907 li
490.368 201.652 li
f
507.34 201.652 mo
503.381 201.652 li
503.381 191.047 li
498.963 191.047 li
498.963 201.652 li
495.074 201.652 li
495.074 176.907 li
498.963 176.907 li
498.963 187.512 li
503.381 187.512 li
503.381 176.907 li
507.34 176.907 li
507.34 201.652 li
f
520.776 201.652 mo
510.171 201.652 li
510.171 176.907 li
520.776 176.907 li
520.776 180.442 li
514.06 180.442 li
514.06 187.335 li
519.398 187.335 li
519.398 190.87 li
514.06 190.87 li
514.06 198.117 li
520.776 198.117 li
520.776 201.652 li
f
535.27 201.652 mo
531.312 201.652 li
531.102 201.016 530.96 200.627 530.96 198.612 cv
530.96 194.723 li
530.96 192.425 530.181 191.577 528.415 191.577 cv
527.069 191.577 li
527.069 201.652 li
523.183 201.652 li
523.183 176.907 li
529.049 176.907 li
533.081 176.907 534.812 178.78 534.812 182.598 cv
534.812 184.542 li
534.812 187.088 533.998 188.749 532.267 189.562 cv
534.212 190.375 534.847 192.249 534.847 194.829 cv
534.847 198.647 li
534.847 199.849 534.883 200.732 535.27 201.652 cv
527.069 180.442 mo
527.069 188.042 li
528.591 188.042 li
530.039 188.042 530.924 187.406 530.924 185.426 cv
530.924 182.987 li
530.924 181.22 530.322 180.442 528.944 180.442 cv
527.069 180.442 li
f
548 201.652 mo
537.396 201.652 li
537.396 176.907 li
548 176.907 li
548 180.442 li
541.283 180.442 li
541.283 187.335 li
546.622 187.335 li
546.622 190.87 li
541.283 190.87 li
541.283 198.117 li
548 198.117 li
548 201.652 li
f
318.98 258.528 mo
307.387 258.528 li
307.387 246.94 li
318.98 246.94 li
318.98 258.528 li
317.668 241.586 mo
308.699 241.586 li
307.173 213.923 li
307.173 182 li
319.194 182 li
319.194 213.923 li
317.668 241.586 li
f
507.789 125.238 mo
501.693 125.238 li
500.023 109.659 li
498.352 125.238 li
492.044 125.238 li
488.785 96 li
493.254 96 li
495.719 119.057 li
497.932 96 li
502.361 96 li
504.658 119.224 li
507.04 96 li
511.05 96 li
507.789 125.238 li
f
527.843 125.238 mo
523.164 125.238 li
523.164 112.708 li
517.944 112.708 li
517.944 125.238 li
513.35 125.238 li
513.35 96 li
517.944 96 li
517.944 108.531 li
523.164 108.531 li
523.164 96 li
527.843 96 li
527.843 125.238 li
f
543.719 125.238 mo
531.188 125.238 li
531.188 96 li
543.719 96 li
543.719 100.177 li
535.782 100.177 li
535.782 108.322 li
542.091 108.322 li
542.091 112.499 li
535.782 112.499 li
535.782 121.061 li
543.719 121.061 li
543.719 125.238 li
f
560.846 125.238 mo
556.168 125.238 li
555.919 124.487 555.752 124.027 555.752 121.647 cv
555.752 117.052 li
555.752 114.337 554.831 113.334 552.745 113.334 cv
551.155 113.334 li
551.155 125.238 li
546.563 125.238 li
546.563 96 li
553.495 96 li
558.258 96 560.304 98.2139 560.304 102.725 cv
560.304 105.022 li
560.304 108.029 559.343 109.993 557.297 110.954 cv
559.595 111.914 560.345 114.128 560.345 117.177 cv
560.345 121.688 li
560.345 123.108 560.388 124.152 560.846 125.238 cv
551.155 100.177 mo
551.155 109.157 li
552.953 109.157 li
554.664 109.157 555.709 108.405 555.709 106.066 cv
555.709 103.184 li
555.709 101.096 554.998 100.177 553.37 100.177 cv
551.155 100.177 li
f
575.887 125.238 mo
563.356 125.238 li
563.356 96 li
575.887 96 li
575.887 100.177 li
567.951 100.177 li
567.951 108.322 li
574.259 108.322 li
574.259 112.499 li
567.951 112.499 li
567.951 121.061 li
575.887 121.061 li
575.887 125.238 li
f
541.934 583.959 mo
535.147 583.959 li
535.147 577.175 li
541.934 577.175 li
541.934 583.959 li
541.166 574.04 mo
535.915 574.04 li
535.022 557.847 li
535.022 539.159 li
542.059 539.159 li
542.059 557.847 li
541.166 574.04 li
f
562.314 68.9591 mo
552.776 68.9591 li
552.776 59.4248 li
562.314 59.4248 li
562.314 68.9591 li
561.234 55.0201 mo
553.855 55.0201 li
552.6 32.2626 li
552.6 5.99989 li
562.489 5.99989 li
562.489 32.2626 li
561.234 55.0201 li
f
814.562 499.518 mo
810.792 499.518 li
810.792 489.421 li
806.585 489.421 li
806.585 499.518 li
802.884 499.518 li
802.884 475.959 li
806.585 475.959 li
806.585 486.056 li
810.792 486.056 li
810.792 475.959 li
814.562 475.959 li
814.562 499.518 li
f
822.573 499.787 mo
818.939 499.787 816.954 497.633 816.954 493.864 cv
816.954 481.613 li
816.954 477.844 818.939 475.69 822.573 475.69 cv
826.208 475.69 828.195 477.844 828.195 481.613 cv
828.195 493.864 li
828.195 497.633 826.208 499.787 822.573 499.787 cv
822.573 479.056 mo
821.396 479.056 820.656 479.694 820.656 481.377 cv
820.656 494.1 li
820.656 495.782 821.396 496.422 822.573 496.422 cv
823.752 496.422 824.493 495.782 824.493 494.1 cv
824.493 481.377 li
824.493 479.694 823.752 479.056 822.573 479.056 cv
f
845.059 499.518 mo
840.145 499.518 li
838.799 486.964 li
837.453 499.518 li
832.37 499.518 li
829.746 475.959 li
833.347 475.959 li
835.332 494.537 li
837.116 475.959 li
840.684 475.959 li
842.535 494.672 li
844.453 475.959 li
847.685 475.959 li
845.059 499.518 li
f
775.027 412.803 mo
769.244 412.803 li
767.659 398.023 li
766.074 412.803 li
760.091 412.803 li
757 385.066 li
761.238 385.066 li
763.577 406.938 li
765.677 385.066 li
769.878 385.066 li
772.057 407.097 li
774.316 385.066 li
778.12 385.066 li
775.027 412.803 li
f
794.05 412.803 mo
789.612 412.803 li
789.612 400.915 li
784.66 400.915 li
784.66 412.803 li
780.302 412.803 li
780.302 385.066 li
784.66 385.066 li
784.66 396.953 li
789.612 396.953 li
789.612 385.066 li
794.05 385.066 li
794.05 412.803 li
f
811.329 412.803 mo
806.932 412.803 li
806.179 407.77 li
800.828 407.77 li
800.076 412.803 li
796.073 412.803 li
800.512 385.066 li
806.892 385.066 li
811.329 412.803 li
803.484 389.979 mo
801.385 404.006 li
805.583 404.006 li
803.484 389.979 li
f
819.493 412.803 mo
815.137 412.803 li
815.137 389.028 li
810.579 389.028 li
810.579 385.066 li
824.051 385.066 li
824.051 389.028 li
819.493 389.028 li
819.493 412.803 li
f
833.127 412.803 mo
828.926 412.803 li
828.926 408.603 li
833.127 408.603 li
833.127 412.803 li
833.008 406.661 mo
829.124 406.661 li
828.966 406.185 828.887 405.67 828.887 404.957 cv
828.887 398.895 833.642 398.34 833.642 391.445 cv
833.642 389.465 832.849 388.712 831.461 388.712 cv
830.075 388.712 829.283 389.465 829.283 391.445 cv
829.283 394.457 li
825.162 394.457 li
825.162 391.723 li
825.162 387.285 827.341 384.749 831.581 384.749 cv
835.821 384.749 838 387.285 838 391.723 cv
838 398.935 832.849 400.044 832.849 405.115 cv
832.849 405.631 832.888 406.146 833.008 406.661 cv
f
684.25 569.514 mo
677.445 569.514 li
677.445 551.289 li
669.851 551.289 li
669.851 569.514 li
663.171 569.514 li
663.171 526.988 li
669.851 526.988 li
669.851 545.214 li
677.445 545.214 li
677.445 526.988 li
684.25 526.988 li
684.25 569.514 li
f
698.711 570 mo
692.15 570 688.567 566.112 688.567 559.308 cv
688.567 537.194 li
688.567 530.391 692.15 526.503 698.711 526.503 cv
705.273 526.503 708.857 530.391 708.857 537.194 cv
708.857 559.308 li
708.857 566.112 705.273 570 698.711 570 cv
698.711 532.578 mo
696.586 532.578 695.25 533.731 695.25 536.769 cv
695.25 559.733 li
695.25 562.771 696.586 563.925 698.711 563.925 cv
700.839 563.925 702.175 562.771 702.175 559.733 cv
702.175 536.769 li
702.175 533.731 700.839 532.578 698.711 532.578 cv
f
739.298 569.514 mo
730.429 569.514 li
727.998 546.853 li
725.568 569.514 li
716.394 569.514 li
711.658 526.988 li
718.157 526.988 li
721.739 560.522 li
724.961 526.988 li
731.4 526.988 li
734.743 560.766 li
738.204 526.988 li
744.036 526.988 li
739.298 569.514 li
f
253.307 587.76 mo
246.52 587.76 li
246.52 580.975 li
253.307 580.975 li
253.307 587.76 li
252.539 577.841 mo
247.288 577.841 li
246.395 561.647 li
246.395 542.959 li
253.432 542.959 li
253.432 561.647 li
252.539 577.841 li
f
237.307 56.7592 mo
230.52 56.7592 li
230.52 49.9755 li
237.307 49.9755 li
237.307 56.7592 li
236.539 46.8408 mo
231.288 46.8408 li
230.395 30.6474 li
230.395 11.9594 li
237.432 11.9594 li
237.432 30.6474 li
236.539 46.8408 li
f
106.741 170.346 mo
96.1557 170.346 li
93.2549 143.295 li
90.3541 170.346 li
79.4013 170.346 li
73.7445 119.58 li
81.5029 119.58 li
85.7833 159.612 li
89.6254 119.58 li
97.316 119.58 li
101.303 159.902 li
105.439 119.58 li
112.4 119.58 li
106.741 170.346 li
f
141.558 170.346 mo
133.435 170.346 li
133.435 148.589 li
124.372 148.589 li
124.372 170.346 li
116.394 170.346 li
116.394 119.58 li
124.372 119.58 li
124.372 141.337 li
133.435 141.337 li
133.435 119.58 li
141.558 119.58 li
141.558 170.346 li
f
173.184 170.346 mo
165.136 170.346 li
163.756 161.135 li
153.964 161.135 li
152.588 170.346 li
145.262 170.346 li
153.384 119.58 li
165.062 119.58 li
173.184 170.346 li
158.825 128.573 mo
154.983 154.246 li
162.667 154.246 li
158.825 128.573 li
f
188.127 170.346 mo
180.153 170.346 li
180.153 126.832 li
171.812 126.832 li
171.812 119.58 li
196.469 119.58 li
196.469 126.832 li
188.127 126.832 li
188.127 170.346 li
f
213.082 170.346 mo
205.391 170.346 li
205.391 162.658 li
213.082 162.658 li
213.082 170.346 li
212.862 159.105 mo
205.755 159.105 li
205.465 158.234 205.32 157.291 205.32 155.986 cv
205.32 144.891 214.023 143.875 214.023 131.256 cv
214.023 127.63 212.572 126.252 210.032 126.252 cv
207.496 126.252 206.045 127.63 206.045 131.256 cv
206.045 136.768 li
198.503 136.768 li
198.503 131.764 li
198.503 123.642 202.49 119 210.251 119 cv
218.013 119 222 123.642 222 131.764 cv
222 144.963 212.572 146.994 212.572 156.276 cv
212.572 157.219 212.643 158.162 212.862 159.105 cv
f
35.25 108.63 mo
31.2183 108.63 li
30.1132 98.3267 li
29.0083 108.63 li
24.837 108.63 li
22.6826 89.2945 li
25.6373 89.2945 li
27.2676 104.542 li
28.731 89.2945 li
31.6602 89.2945 li
33.1787 104.652 li
34.7538 89.2945 li
37.4057 89.2945 li
35.25 108.63 li
f
48.5108 108.63 mo
45.4171 108.63 li
45.4171 100.343 li
41.9654 100.343 li
41.9654 108.63 li
38.9267 108.63 li
38.9267 89.2945 li
41.9654 89.2945 li
41.9654 97.581 li
45.4171 97.581 li
45.4171 89.2945 li
48.5108 89.2945 li
48.5108 108.63 li
f
59.0098 108.63 mo
50.723 108.63 li
50.723 89.2945 li
59.0098 89.2945 li
59.0098 92.0567 li
53.7617 92.0567 li
53.7617 97.4429 li
57.9331 97.4429 li
57.9331 100.205 li
53.7617 100.205 li
53.7617 105.868 li
59.0098 105.868 li
59.0098 108.63 li
f
70.3359 108.63 mo
67.2422 108.63 li
67.0782 108.132 66.9674 107.829 66.9674 106.254 cv
66.9674 103.216 li
66.9674 101.42 66.3584 100.757 64.9786 100.757 cv
63.9278 100.757 li
63.9278 108.63 li
60.8906 108.63 li
60.8906 89.2945 li
65.4747 89.2945 li
68.6249 89.2945 69.9774 90.7583 69.9774 93.7418 cv
69.9774 95.2608 li
69.9774 97.2496 69.3419 98.5478 67.9887 99.1831 cv
69.5088 99.8183 70.0045 101.282 70.0045 103.299 cv
70.0045 106.282 li
70.0045 107.221 70.0326 107.912 70.3359 108.63 cv
63.9278 92.0567 mo
63.9278 97.9951 li
65.1162 97.9951 li
66.248 97.9951 66.939 97.4981 66.939 95.9511 cv
66.939 94.0455 li
66.939 92.6641 66.4692 92.0567 65.392 92.0567 cv
63.9278 92.0567 li
f
80.2827 108.63 mo
71.9962 108.63 li
71.9962 89.2945 li
80.2827 89.2945 li
80.2827 92.0567 li
75.0342 92.0567 li
75.0342 97.4429 li
79.206 97.4429 li
79.206 100.205 li
75.0342 100.205 li
75.0342 105.868 li
80.2827 105.868 li
80.2827 108.63 li
f
639.915 378.455 mo
634.132 378.455 li
634.132 362.966 li
627.677 362.966 li
627.677 378.455 li
622 378.455 li
622 342.312 li
627.677 342.312 li
627.677 357.803 li
634.132 357.803 li
634.132 342.312 li
639.915 342.312 li
639.915 378.455 li
f
652.206 378.868 mo
646.63 378.868 643.584 375.563 643.584 369.781 cv
643.584 350.987 li
643.584 345.204 646.63 341.899 652.206 341.899 cv
657.782 341.899 660.829 345.204 660.829 350.987 cv
660.829 369.781 li
660.829 375.563 657.782 378.868 652.206 378.868 cv
652.206 347.063 mo
650.399 347.063 649.264 348.044 649.264 350.626 cv
649.264 370.143 li
649.264 372.724 650.399 373.705 652.206 373.705 cv
654.014 373.705 655.149 372.724 655.149 370.143 cv
655.149 350.626 li
655.149 348.044 654.014 347.063 652.206 347.063 cv
f
686.7 378.455 mo
679.162 378.455 li
677.097 359.196 li
675.031 378.455 li
667.234 378.455 li
663.209 342.312 li
668.732 342.312 li
671.777 370.813 li
674.516 342.312 li
679.988 342.312 li
682.829 371.02 li
685.771 342.312 li
690.727 342.312 li
686.7 378.455 li
f
580.777 238 mo
567.888 238 li
567.888 225.115 li
580.777 225.115 li
580.777 238 li
579.318 219.162 mo
569.346 219.162 li
567.649 188.407 li
567.649 152.913 li
581.015 152.913 li
581.015 188.407 li
579.318 219.162 li
f
107.631 276.141 mo
101.138 276.141 li
99.3589 259.547 li
97.5796 276.141 li
90.8608 276.141 li
87.3911 245 li
92.15 245 li
94.7759 269.557 li
97.1324 245 li
101.85 245 li
104.296 269.735 li
106.832 245 li
111.104 245 li
107.631 276.141 li
f
128.989 276.141 mo
124.007 276.141 li
124.007 262.795 li
118.447 262.795 li
118.447 276.141 li
113.553 276.141 li
113.553 245 li
118.447 245 li
118.447 258.346 li
124.007 258.346 li
124.007 245 li
128.989 245 li
128.989 276.141 li
f
145.898 276.141 mo
132.552 276.141 li
132.552 245 li
145.898 245 li
145.898 249.449 li
137.446 249.449 li
137.446 258.124 li
144.164 258.124 li
144.164 262.572 li
137.446 262.572 li
137.446 271.692 li
145.898 271.692 li
145.898 276.141 li
f
164.14 276.141 mo
159.158 276.141 li
158.892 275.34 158.715 274.851 158.715 272.315 cv
158.715 267.421 li
158.715 264.53 157.734 263.462 155.512 263.462 cv
153.819 263.462 li
153.819 276.141 li
148.928 276.141 li
148.928 245 li
156.31 245 li
161.384 245 163.562 247.358 163.562 252.163 cv
163.562 254.609 li
163.562 257.812 162.539 259.903 160.36 260.926 cv
162.808 261.95 163.606 264.307 163.606 267.555 cv
163.606 272.359 li
163.606 273.872 163.652 274.984 164.14 276.141 cv
153.819 249.449 mo
153.819 259.013 li
155.733 259.013 li
157.556 259.013 158.669 258.212 158.669 255.721 cv
158.669 252.652 li
158.669 250.427 157.912 249.449 156.178 249.449 cv
153.819 249.449 li
f
180.159 276.141 mo
166.814 276.141 li
166.814 245 li
180.159 245 li
180.159 249.449 li
171.707 249.449 li
171.707 258.124 li
178.425 258.124 li
178.425 262.572 li
171.707 262.572 li
171.707 271.692 li
180.159 271.692 li
180.159 276.141 li
f
163.799 458 mo
150.025 458 li
150.025 444.226 li
163.799 444.226 li
163.799 458 li
163.407 437.858 mo
150.678 437.858 li
150.158 436.3 149.893 434.61 149.893 432.272 cv
149.893 412.39 165.486 410.57 165.486 387.961 cv
165.486 381.463 162.887 378.994 158.342 378.994 cv
153.797 378.994 151.198 381.463 151.198 387.961 cv
151.198 397.836 li
137.684 397.836 li
137.684 388.87 li
137.684 374.316 144.828 366 158.728 366 cv
172.636 366 179.786 374.316 179.786 388.87 cv
179.786 412.519 162.887 416.158 162.887 432.791 cv
162.887 434.48 163.019 436.17 163.407 437.858 cv
f
36.2134 392.764 mo
29.9478 392.764 li
28.231 376.752 li
26.5137 392.764 li
20.0308 392.764 li
16.6825 362.715 li
21.2745 362.715 li
23.808 386.41 li
26.0825 362.715 li
30.6348 362.715 li
32.9947 386.582 li
35.4424 362.715 li
39.5634 362.715 li
36.2134 392.764 li
f
56.8223 392.764 mo
52.014 392.764 li
52.014 379.886 li
46.6495 379.886 li
46.6495 392.764 li
41.9278 392.764 li
41.9278 362.715 li
46.6495 362.715 li
46.6495 375.593 li
52.014 375.593 li
52.014 362.715 li
56.8223 362.715 li
56.8223 392.764 li
f
73.1383 392.764 mo
60.2602 392.764 li
60.2602 362.715 li
73.1383 362.715 li
73.1383 367.008 li
64.9824 367.008 li
64.9824 375.378 li
71.4654 375.378 li
71.4654 379.671 li
64.9824 379.671 li
64.9824 388.471 li
73.1383 388.471 li
73.1383 392.764 li
f
91 392.764 mo
86.1485 392.764 li
80.266 371 li
80.266 392.764 li
76.0177 392.764 li
76.0177 362.715 li
81.9414 362.715 li
86.7911 380.701 li
86.7911 362.715 li
91 362.715 li
91 392.764 li
f
83.3511 223.143 mo
79.5815 223.143 li
78.5483 213.509 li
77.515 223.143 li
73.6148 223.143 li
71.6001 205.063 li
74.3628 205.063 li
75.8877 219.321 li
77.2559 205.063 li
79.9945 205.063 li
81.4146 219.424 li
82.8877 205.063 li
85.3672 205.063 li
83.3511 223.143 li
f
95.751 223.143 mo
92.8584 223.143 li
92.8584 215.395 li
89.6304 215.395 li
89.6304 223.143 li
86.7895 223.143 li
86.7895 205.063 li
89.6304 205.063 li
89.6304 212.812 li
92.8584 212.812 li
92.8584 205.063 li
95.751 205.063 li
95.751 223.143 li
f
107.015 223.143 mo
104.148 223.143 li
103.657 219.863 li
100.17 219.863 li
99.6793 223.143 li
97.0702 223.143 li
99.9629 205.063 li
104.122 205.063 li
107.015 223.143 li
101.901 208.266 mo
100.532 217.409 li
103.269 217.409 li
101.901 208.266 li
f
112.336 223.143 mo
109.496 223.143 li
109.496 207.646 li
106.526 207.646 li
106.526 205.063 li
115.307 205.063 li
115.307 207.646 li
112.336 207.646 li
112.336 223.143 li
f
121.224 223.143 mo
118.485 223.143 li
118.485 220.405 li
121.224 220.405 li
121.224 223.143 li
121.145 219.14 mo
118.614 219.14 li
118.511 218.83 118.459 218.494 118.459 218.029 cv
118.459 214.078 121.559 213.716 121.559 209.222 cv
121.559 207.93 121.043 207.44 120.138 207.44 cv
119.234 207.44 118.718 207.93 118.718 209.222 cv
118.718 211.185 li
116.032 211.185 li
116.032 209.403 li
116.032 206.51 117.452 204.857 120.216 204.857 cv
122.98 204.857 124.4 206.51 124.4 209.403 cv
124.4 214.103 121.043 214.827 121.043 218.132 cv
121.043 218.468 121.067 218.804 121.145 219.14 cv
f
387.351 30.143 mo
383.581 30.143 li
382.548 20.5093 li
381.515 30.143 li
377.615 30.143 li
375.6 12.0635 li
378.363 12.0635 li
379.888 26.3209 li
381.256 12.0635 li
383.995 12.0635 li
385.415 26.4238 li
386.888 12.0635 li
389.367 12.0635 li
387.351 30.143 li
f
399.751 30.143 mo
396.858 30.143 li
396.858 22.3945 li
393.63 22.3945 li
393.63 30.143 li
390.79 30.143 li
390.79 12.0635 li
393.63 12.0635 li
393.63 19.812 li
396.858 19.812 li
396.858 12.0635 li
399.751 12.0635 li
399.751 30.143 li
f
411.015 30.143 mo
408.149 30.143 li
407.657 26.8627 li
404.169 26.8627 li
403.679 30.143 li
401.07 30.143 li
403.963 12.0635 li
408.122 12.0635 li
411.015 30.143 li
405.901 15.266 mo
404.532 24.4092 li
407.269 24.4092 li
405.901 15.266 li
f
416.336 30.143 mo
413.497 30.143 li
413.497 14.6464 li
410.526 14.6464 li
410.526 12.0635 li
419.307 12.0635 li
419.307 14.6464 li
416.336 14.6464 li
416.336 30.143 li
f
425.224 30.143 mo
422.485 30.143 li
422.485 27.4053 li
425.224 27.4053 li
425.224 30.143 li
425.146 26.1397 mo
422.614 26.1397 li
422.511 25.8302 422.459 25.4942 422.459 25.0292 cv
422.459 21.0776 425.559 20.7157 425.559 16.2218 cv
425.559 14.9301 425.042 14.4394 424.138 14.4394 cv
423.234 14.4394 422.718 14.9301 422.718 16.2218 cv
422.718 18.1846 li
420.032 18.1846 li
420.032 16.4029 li
420.032 13.5098 421.452 11.8569 424.216 11.8569 cv
426.98 11.8569 428.4 13.5098 428.4 16.4029 cv
428.4 21.1035 425.042 21.8267 425.042 25.1324 cv
425.042 25.4683 425.067 25.8043 425.146 26.1397 cv
f
810.48 561.121 mo
803.343 561.121 li
803.343 542.002 li
795.375 542.002 li
795.375 561.121 li
788.368 561.121 li
788.368 516.51 li
795.375 516.51 li
795.375 535.629 li
803.343 535.629 li
803.343 516.51 li
810.48 516.51 li
810.48 561.121 li
f
825.651 561.631 mo
818.768 561.631 815.01 557.552 815.01 550.414 cv
815.01 527.217 li
815.01 520.079 818.768 516 825.651 516 cv
832.534 516 836.296 520.079 836.296 527.217 cv
836.296 550.414 li
836.296 557.552 832.534 561.631 825.651 561.631 cv
825.651 522.373 mo
823.423 522.373 822.021 523.584 822.021 526.771 cv
822.021 550.86 li
822.021 554.047 823.423 555.258 825.651 555.258 cv
827.884 555.258 829.285 554.047 829.285 550.86 cv
829.285 526.771 li
829.285 523.584 827.884 522.373 825.651 522.373 cv
f
868.23 561.121 mo
858.925 561.121 li
856.375 537.35 li
853.826 561.121 li
844.201 561.121 li
839.233 516.51 li
846.051 516.51 li
849.809 551.688 li
853.188 516.51 li
859.944 516.51 li
863.451 551.943 li
867.082 516.51 li
873.2 516.51 li
868.23 561.121 li
f
43.9961 219.45 mo
31.0811 219.45 li
31.0811 206.541 li
43.9961 206.541 li
43.9961 219.45 li
42.5348 200.576 mo
32.5425 200.576 li
30.8432 169.761 li
30.8432 134.2 li
44.2338 134.2 li
44.2338 169.761 li
42.5348 200.576 li
f
244.033 335.548 mo
236.516 335.548 li
234.455 316.337 li
232.396 335.548 li
224.617 335.548 li
220.6 299.495 li
226.11 299.495 li
229.149 327.925 li
231.878 299.495 li
237.34 299.495 li
240.171 328.131 li
243.108 299.495 li
248.053 299.495 li
244.033 335.548 li
f
268.759 335.548 mo
262.991 335.548 li
262.991 320.097 li
256.554 320.097 li
256.554 335.548 li
250.889 335.548 li
250.889 299.495 li
256.554 299.495 li
256.554 314.946 li
262.991 314.946 li
262.991 299.495 li
268.759 299.495 li
268.759 335.548 li
f
288.336 335.548 mo
272.884 335.548 li
272.884 299.495 li
288.336 299.495 li
288.336 304.646 li
278.55 304.646 li
278.55 314.688 li
286.328 314.688 li
286.328 319.839 li
278.55 319.839 li
278.55 330.397 li
288.336 330.397 li
288.336 335.548 li
f
309.454 335.548 mo
303.686 335.548 li
303.379 334.62 303.173 334.054 303.173 331.118 cv
303.173 325.453 li
303.173 322.105 302.038 320.869 299.465 320.869 cv
297.505 320.869 li
297.505 335.548 li
291.842 335.548 li
291.842 299.495 li
300.389 299.495 li
306.263 299.495 308.786 302.225 308.786 307.787 cv
308.786 310.62 li
308.786 314.328 307.6 316.749 305.077 317.934 cv
307.911 319.118 308.836 321.848 308.836 325.607 cv
308.836 331.17 li
308.836 332.921 308.889 334.208 309.454 335.548 cv
297.505 304.646 mo
297.505 315.719 li
299.721 315.719 li
301.832 315.719 303.12 314.792 303.12 311.907 cv
303.12 308.353 li
303.12 305.778 302.244 304.646 300.236 304.646 cv
297.505 304.646 li
f
328 335.548 mo
312.549 335.548 li
312.549 299.495 li
328 299.495 li
328 304.646 li
318.214 304.646 li
318.214 314.688 li
325.993 314.688 li
325.993 319.839 li
318.214 319.839 li
318.214 330.397 li
328 330.397 li
328 335.548 li
f
244.846 265.624 mo
239.763 265.624 li
238.37 252.633 li
236.977 265.624 li
231.717 265.624 li
229 241.244 li
232.726 241.244 li
234.782 260.469 li
236.627 241.244 li
240.32 241.244 li
242.235 260.608 li
244.221 241.244 li
247.564 241.244 li
244.846 265.624 li
f
261.567 265.624 mo
257.666 265.624 li
257.666 255.175 li
253.314 255.175 li
253.314 265.624 li
249.482 265.624 li
249.482 241.244 li
253.314 241.244 li
253.314 251.692 li
257.666 251.692 li
257.666 241.244 li
261.567 241.244 li
261.567 265.624 li
f
276.756 265.624 mo
272.891 265.624 li
272.228 261.201 li
267.525 261.201 li
266.865 265.624 li
263.346 265.624 li
267.247 241.244 li
272.855 241.244 li
276.756 265.624 li
269.86 245.563 mo
268.015 257.892 li
271.705 257.892 li
269.86 245.563 li
f
283.933 265.624 mo
280.103 265.624 li
280.103 244.726 li
276.097 244.726 li
276.097 241.244 li
287.939 241.244 li
287.939 244.726 li
283.933 244.726 li
283.933 265.624 li
f
295.917 265.624 mo
292.224 265.624 li
292.224 261.932 li
295.917 261.932 li
295.917 265.624 li
295.812 260.225 mo
292.398 260.225 li
292.259 259.808 292.189 259.355 292.189 258.728 cv
292.189 253.399 296.369 252.912 296.369 246.851 cv
296.369 245.11 295.672 244.448 294.452 244.448 cv
293.234 244.448 292.538 245.11 292.538 246.851 cv
292.538 249.498 li
288.915 249.498 li
288.915 247.095 li
288.915 243.194 290.83 240.965 294.558 240.965 cv
298.285 240.965 300.2 243.194 300.2 247.095 cv
300.2 253.434 295.672 254.409 295.672 258.867 cv
295.672 259.32 295.706 259.772 295.812 260.225 cv
f
514.853 74.5674 mo
511.673 74.5674 li
511.673 66.0483 li
508.122 66.0483 li
508.122 74.5674 li
505 74.5674 li
505 54.6896 li
508.122 54.6896 li
508.122 63.2086 li
511.673 63.2086 li
511.673 54.6896 li
514.853 54.6896 li
514.853 74.5674 li
f
521.613 74.7945 mo
518.546 74.7945 516.871 72.9772 516.871 69.7963 cv
516.871 59.4599 li
516.871 56.2793 518.546 54.462 521.613 54.462 cv
524.68 54.462 526.356 56.2793 526.356 59.4599 cv
526.356 69.7963 li
526.356 72.9772 524.68 74.7945 521.613 74.7945 cv
521.613 57.3017 mo
520.62 57.3017 519.995 57.8414 519.995 59.2612 cv
519.995 69.9957 li
519.995 71.4151 520.62 71.9545 521.613 71.9545 cv
522.607 71.9545 523.232 71.4151 523.232 69.9957 cv
523.232 59.2612 li
523.232 57.8414 522.607 57.3017 521.613 57.3017 cv
f
540.585 74.5674 mo
536.439 74.5674 li
535.303 63.9751 li
534.167 74.5674 li
529.879 74.5674 li
527.665 54.6896 li
530.703 54.6896 li
532.378 70.3643 li
533.883 54.6896 li
536.894 54.6896 li
538.456 70.4781 li
540.074 54.6896 li
542.8 54.6896 li
540.585 74.5674 li
f
106.981 39.4952 mo
102.791 39.4952 li
102.791 28.2716 li
98.1138 28.2716 li
98.1138 39.4952 li
94 39.4952 li
94 13.3065 li
98.1138 13.3065 li
98.1138 24.5304 li
102.791 24.5304 li
102.791 13.3065 li
106.981 13.3065 li
106.981 39.4952 li
f
115.887 39.7944 mo
111.847 39.7944 109.64 37.3998 109.64 33.21 cv
109.64 19.5919 li
109.64 15.4019 111.847 13.0073 115.887 13.0073 cv
119.928 13.0073 122.136 15.4019 122.136 19.5919 cv
122.136 33.21 li
122.136 37.3998 119.928 39.7944 115.887 39.7944 cv
115.887 16.7485 mo
114.579 16.7485 113.755 17.4594 113.755 19.3301 cv
113.755 33.4716 li
113.755 35.3423 114.579 36.0532 115.887 36.0532 cv
117.197 36.0532 118.02 35.3423 118.02 33.4716 cv
118.02 19.3301 li
118.02 17.4594 117.197 16.7485 115.887 16.7485 cv
f
140.882 39.4952 mo
135.42 39.4952 li
133.923 25.5404 li
132.427 39.4952 li
126.776 39.4952 li
123.86 13.3065 li
127.862 13.3065 li
130.069 33.9581 li
132.053 13.3065 li
136.018 13.3065 li
138.077 34.1079 li
140.209 13.3065 li
143.8 13.3065 li
140.882 39.4952 li
f
862.854 589.823 mo
860.384 589.823 li
860.384 583.206 li
857.625 583.206 li
857.625 589.823 li
855.2 589.823 li
855.2 574.382 li
857.625 574.382 li
857.625 581 li
860.384 581 li
860.384 574.382 li
862.854 574.382 li
862.854 589.823 li
f
868.105 590 mo
865.723 590 864.422 588.588 864.422 586.117 cv
864.422 578.088 li
864.422 575.617 865.723 574.205 868.105 574.205 cv
870.487 574.205 871.79 575.617 871.79 578.088 cv
871.79 586.117 li
871.79 588.588 870.487 590 868.105 590 cv
868.105 576.411 mo
867.334 576.411 866.849 576.831 866.849 577.934 cv
866.849 586.272 li
866.849 587.375 867.334 587.794 868.105 587.794 cv
868.878 587.794 869.363 587.375 869.363 586.272 cv
869.363 577.934 li
869.363 576.831 868.878 576.411 868.105 576.411 cv
f
882.843 589.823 mo
879.622 589.823 li
878.74 581.596 li
877.857 589.823 li
874.526 589.823 li
872.807 574.382 li
875.166 574.382 li
876.467 586.559 li
877.637 574.382 li
879.976 574.382 li
881.189 586.647 li
882.446 574.382 li
884.564 574.382 li
882.843 589.823 li
f
31.3848 589.353 mo
25.1923 589.353 li
25.1923 572.765 li
18.2793 572.765 li
18.2793 589.353 li
12.2003 589.353 li
12.2003 550.648 li
18.2793 550.648 li
18.2793 567.235 li
25.1923 567.235 li
25.1923 550.648 li
31.3848 550.648 li
31.3848 589.353 li
f
44.547 589.795 mo
38.5757 589.795 35.3144 586.256 35.3144 580.063 cv
35.3144 559.936 li
35.3144 553.744 38.5757 550.205 44.547 550.205 cv
50.5185 550.205 53.7822 553.744 53.7822 559.936 cv
53.7822 580.063 li
53.7822 586.256 50.5185 589.795 44.547 589.795 cv
44.547 555.734 mo
42.6132 555.734 41.3965 556.785 41.3965 559.55 cv
41.3965 580.45 li
41.3965 583.215 42.6132 584.266 44.547 584.266 cv
46.4835 584.266 47.7001 583.215 47.7001 580.45 cv
47.7001 559.55 li
47.7001 556.785 46.4835 555.734 44.547 555.734 cv
f
81.4874 589.353 mo
73.4145 589.353 li
71.2031 568.729 li
68.9913 589.353 li
60.641 589.353 li
56.3305 550.648 li
62.2456 550.648 li
65.5069 581.169 li
68.4384 550.648 li
74.2992 550.648 li
77.3418 581.39 li
80.4922 550.648 li
85.7998 550.648 li
81.4874 589.353 li
f
588.513 576.011 mo
583.921 576.011 li
582.663 564.276 li
581.404 576.011 li
576.653 576.011 li
574.2 553.989 li
577.565 553.989 li
579.422 571.354 li
581.089 553.989 li
584.425 553.989 li
586.154 571.48 li
587.948 553.989 li
590.968 553.989 li
588.513 576.011 li
f
603.615 576.011 mo
600.092 576.011 li
600.092 566.573 li
596.161 566.573 li
596.161 576.011 li
592.7 576.011 li
592.7 553.989 li
596.161 553.989 li
596.161 563.427 li
600.092 563.427 li
600.092 553.989 li
603.615 553.989 li
603.615 576.011 li
f
615.572 576.011 mo
606.136 576.011 li
606.136 553.989 li
615.572 553.989 li
615.572 557.136 li
609.596 557.136 li
609.596 563.27 li
614.347 563.27 li
614.347 566.416 li
609.596 566.416 li
609.596 572.864 li
615.572 572.864 li
615.572 576.011 li
f
628.472 576.011 mo
624.949 576.011 li
624.762 575.444 624.636 575.098 624.636 573.305 cv
624.636 569.845 li
624.636 567.8 623.942 567.045 622.371 567.045 cv
621.174 567.045 li
621.174 576.011 li
617.715 576.011 li
617.715 553.989 li
622.935 553.989 li
626.523 553.989 628.063 555.657 628.063 559.055 cv
628.063 560.784 li
628.063 563.05 627.34 564.528 625.799 565.252 cv
627.529 565.976 628.095 567.643 628.095 569.938 cv
628.095 573.336 li
628.095 574.406 628.127 575.192 628.472 576.011 cv
621.174 557.136 mo
621.174 563.899 li
622.527 563.899 li
623.816 563.899 624.603 563.333 624.603 561.571 cv
624.603 559.4 li
624.603 557.827 624.068 557.136 622.842 557.136 cv
621.174 557.136 li
f
639.8 576.011 mo
630.362 576.011 li
630.362 553.989 li
639.8 553.989 li
639.8 557.136 li
633.823 557.136 li
633.823 563.27 li
638.574 563.27 li
638.574 566.416 li
633.823 566.416 li
633.823 572.864 li
639.8 572.864 li
639.8 576.011 li
f
887.242 340 mo
878.758 340 li
878.758 331.52 li
887.242 331.52 li
887.242 340 li
886.282 327.602 mo
879.718 327.602 li
878.602 307.36 li
878.602 284 li
887.398 284 li
887.398 307.36 li
886.282 327.602 li
f
248.917 136.018 mo
242.849 136.018 li
241.186 120.509 li
239.522 136.018 li
233.243 136.018 li
230 106.913 li
234.448 106.913 li
236.902 129.864 li
239.105 106.913 li
243.514 106.913 li
245.8 130.031 li
248.171 106.913 li
252.163 106.913 li
248.917 136.018 li
f
268.88 136.018 mo
264.223 136.018 li
264.223 123.545 li
259.026 123.545 li
259.026 136.018 li
254.453 136.018 li
254.453 106.913 li
259.026 106.913 li
259.026 119.386 li
264.223 119.386 li
264.223 106.913 li
268.88 106.913 li
268.88 136.018 li
f
287.012 136.018 mo
282.398 136.018 li
281.607 130.737 li
275.993 130.737 li
275.204 136.018 li
271.003 136.018 li
275.66 106.913 li
282.355 106.913 li
287.012 136.018 li
278.779 112.068 mo
276.577 126.788 li
280.982 126.788 li
278.779 112.068 li
f
295.58 136.018 mo
291.008 136.018 li
291.008 111.07 li
286.225 111.07 li
286.225 106.913 li
300.362 106.913 li
300.362 111.07 li
295.58 111.07 li
295.58 136.018 li
f
309.887 136.018 mo
305.477 136.018 li
305.477 131.611 li
309.887 131.611 li
309.887 136.018 li
309.761 129.573 mo
305.686 129.573 li
305.52 129.074 305.436 128.534 305.436 127.785 cv
305.436 121.424 310.426 120.841 310.426 113.607 cv
310.426 111.528 309.595 110.738 308.138 110.738 cv
306.684 110.738 305.853 111.528 305.853 113.607 cv
305.853 116.767 li
301.528 116.767 li
301.528 113.897 li
301.528 109.241 303.814 106.58 308.264 106.58 cv
312.714 106.58 315 109.241 315 113.897 cv
315 121.465 309.595 122.629 309.595 127.952 cv
309.595 128.492 309.635 129.033 309.761 129.573 cv
f
745.218 215.102 mo
734.431 215.102 li
734.431 186.209 li
722.39 186.209 li
722.39 215.102 li
711.8 215.102 li
711.8 147.685 li
722.39 147.685 li
722.39 176.578 li
734.431 176.578 li
734.431 147.685 li
745.218 147.685 li
745.218 215.102 li
f
768.144 215.872 mo
757.742 215.872 752.062 209.709 752.062 198.922 cv
752.062 163.865 li
752.062 153.079 757.742 146.915 768.144 146.915 cv
778.545 146.915 784.229 153.079 784.229 163.865 cv
784.229 198.922 li
784.229 209.709 778.545 215.872 768.144 215.872 cv
768.144 156.545 mo
764.775 156.545 762.656 158.375 762.656 163.191 cv
762.656 199.596 li
762.656 204.412 764.775 206.242 768.144 206.242 cv
771.517 206.242 773.636 204.412 773.636 199.596 cv
773.636 163.191 li
773.636 158.375 771.517 156.545 768.144 156.545 cv
f
832.487 215.102 mo
818.427 215.102 li
814.574 179.178 li
810.722 215.102 li
796.177 215.102 li
788.669 147.685 li
798.972 147.685 li
804.652 200.848 li
809.759 147.685 li
819.968 147.685 li
825.267 201.233 li
830.754 147.685 li
840 147.685 li
832.487 215.102 li
f
101.8 564.6 mo
95.2725 564.6 li
95.2725 558.072 li
101.8 558.072 li
101.8 564.6 li
101.614 555.055 mo
95.5821 555.055 li
95.3354 554.315 95.2094 553.516 95.2094 552.407 cv
95.2094 542.984 102.6 542.123 102.6 531.407 cv
102.6 528.328 101.368 527.158 99.2138 527.158 cv
97.0601 527.158 95.8281 528.328 95.8281 531.407 cv
95.8281 536.088 li
89.4238 536.088 li
89.4238 531.839 li
89.4238 524.941 92.809 521 99.3969 521 cv
105.988 521 109.376 524.941 109.376 531.839 cv
109.376 543.046 101.368 544.77 101.368 552.653 cv
101.368 553.454 101.431 554.254 101.614 555.055 cv
f
526.8 475.6 mo
520.273 475.6 li
520.273 469.072 li
526.8 469.072 li
526.8 475.6 li
526.614 466.055 mo
520.582 466.055 li
520.336 465.315 520.21 464.516 520.21 463.407 cv
520.21 453.984 527.6 453.123 527.6 442.407 cv
527.6 439.328 526.368 438.158 524.214 438.158 cv
522.06 438.158 520.828 439.328 520.828 442.407 cv
520.828 447.088 li
514.424 447.088 li
514.424 442.839 li
514.424 435.941 517.809 432 524.397 432 cv
530.987 432 534.376 435.941 534.376 442.839 cv
534.376 454.046 526.368 455.77 526.368 463.653 cv
526.368 464.454 526.431 465.254 526.614 466.055 cv
f
870.363 214.8 mo
861.637 214.8 li
861.637 206.078 li
870.363 206.078 li
870.363 214.8 li
869.376 202.047 mo
862.624 202.047 li
861.476 181.227 li
861.476 157.2 li
870.523 157.2 li
870.523 181.227 li
869.376 202.047 li
f
585.073 475.649 mo
574.784 475.649 li
571.965 449.356 li
569.144 475.649 li
558.498 475.649 li
553 426.305 li
560.541 426.305 li
564.702 465.217 li
568.437 426.305 li
575.912 426.305 li
579.787 465.499 li
583.808 426.305 li
590.574 426.305 li
585.073 475.649 li
f
618.916 475.649 mo
611.022 475.649 li
611.022 454.502 li
602.211 454.502 li
602.211 475.649 li
594.457 475.649 li
594.457 426.305 li
602.211 426.305 li
602.211 447.452 li
611.022 447.452 li
611.022 426.305 li
618.916 426.305 li
618.916 475.649 li
f
645.71 475.649 mo
624.562 475.649 li
624.562 426.305 li
645.71 426.305 li
645.71 433.353 li
632.316 433.353 li
632.316 447.1 li
642.963 447.1 li
642.963 454.149 li
632.316 454.149 li
632.316 468.6 li
645.71 468.6 li
645.71 475.649 li
f
674.616 475.649 mo
666.721 475.649 li
666.301 474.381 666.018 473.605 666.018 469.587 cv
666.018 461.833 li
666.018 457.251 664.465 455.56 660.943 455.56 cv
658.262 455.56 li
658.262 475.649 li
650.511 475.649 li
650.511 426.305 li
662.209 426.305 li
670.248 426.305 673.701 430.041 673.701 437.654 cv
673.701 441.531 li
673.701 446.606 672.078 449.92 668.625 451.541 cv
672.504 453.162 673.769 456.898 673.769 462.045 cv
673.769 469.658 li
673.769 472.055 673.842 473.817 674.616 475.649 cv
658.262 433.353 mo
658.262 448.51 li
661.294 448.51 li
664.183 448.51 665.947 447.241 665.947 443.293 cv
665.947 438.43 li
665.947 434.904 664.747 433.353 661.999 433.353 cv
658.262 433.353 li
f
700 475.649 mo
678.852 475.649 li
678.852 426.305 li
700 426.305 li
700 433.353 li
686.606 433.353 li
686.606 447.1 li
697.252 447.1 li
697.252 454.149 li
686.606 454.149 li
686.606 468.6 li
700 468.6 li
700 475.649 li
f
360.049 176.118 mo
349.768 176.118 li
346.95 149.843 li
344.132 176.118 li
333.495 176.118 li
328 126.809 li
335.536 126.809 li
339.693 165.692 li
343.425 126.809 li
350.895 126.809 li
354.768 165.974 li
358.784 126.809 li
365.546 126.809 li
360.049 176.118 li
f
393.867 176.118 mo
385.978 176.118 li
385.978 154.985 li
377.174 154.985 li
377.174 176.118 li
369.426 176.118 li
369.426 126.809 li
377.174 126.809 li
377.174 147.942 li
385.978 147.942 li
385.978 126.809 li
393.867 126.809 li
393.867 176.118 li
f
424.585 176.118 mo
416.768 176.118 li
415.428 167.171 li
405.917 167.171 li
404.58 176.118 li
397.464 176.118 li
405.354 126.809 li
416.696 126.809 li
424.585 176.118 li
410.638 135.544 mo
406.906 160.48 li
414.37 160.48 li
410.638 135.544 li
f
439.1 176.118 mo
431.354 176.118 li
431.354 133.854 li
423.252 133.854 li
423.252 126.809 li
447.202 126.809 li
447.202 133.854 li
439.1 133.854 li
439.1 176.118 li
f
463.338 176.118 mo
455.867 176.118 li
455.867 168.651 li
463.338 168.651 li
463.338 176.118 li
463.124 165.199 mo
456.222 165.199 li
455.939 164.354 455.799 163.438 455.799 162.17 cv
455.799 151.393 464.252 150.407 464.252 138.15 cv
464.252 134.628 462.843 133.289 460.376 133.289 cv
457.912 133.289 456.503 134.628 456.503 138.15 cv
456.503 143.503 li
449.177 143.503 li
449.177 138.643 li
449.177 130.754 453.05 126.246 460.589 126.246 cv
468.127 126.246 472 130.754 472 138.643 cv
472 151.463 462.843 153.436 462.843 162.452 cv
462.843 163.368 462.911 164.284 463.124 165.199 cv
f
619.12 135.6 mo
602.88 135.6 li
602.88 119.367 li
619.12 119.367 li
619.12 135.6 li
617.282 111.866 mo
604.718 111.866 li
602.581 73.1177 li
602.581 28.4 li
619.419 28.4 li
619.419 73.1177 li
617.282 111.866 li
f
787.964 495 mo
777.184 495 li
777.184 484.221 li
787.964 484.221 li
787.964 495 li
787.656 479.237 mo
777.695 479.237 li
777.288 478.017 777.08 476.695 777.08 474.864 cv
777.08 459.305 789.283 457.882 789.283 440.187 cv
789.283 435.102 787.249 433.17 783.692 433.17 cv
780.136 433.17 778.101 435.102 778.101 440.187 cv
778.101 447.915 li
767.525 447.915 li
767.525 440.898 li
767.525 429.509 773.116 423 783.995 423 cv
794.879 423 800.474 429.509 800.474 440.898 cv
800.474 459.407 787.249 462.254 787.249 475.272 cv
787.249 476.593 787.353 477.915 787.656 479.237 cv
f
205.473 523.178 mo
194.863 523.178 li
191.956 496.064 li
189.048 523.178 li
178.07 523.178 li
172.4 472.295 li
180.176 472.295 li
184.467 512.42 li
188.317 472.295 li
196.026 472.295 li
200.022 512.711 li
204.167 472.295 li
211.146 472.295 li
205.473 523.178 li
f
240.371 523.178 mo
232.229 523.178 li
232.229 501.371 li
223.145 501.371 li
223.145 523.178 li
215.149 523.178 li
215.149 472.295 li
223.145 472.295 li
223.145 494.101 li
232.229 494.101 li
232.229 472.295 li
240.371 472.295 li
240.371 523.178 li
f
272.071 523.178 mo
264.004 523.178 li
262.621 513.946 li
252.806 513.946 li
251.427 523.178 li
244.083 523.178 li
252.225 472.295 li
263.929 472.295 li
272.071 523.178 li
257.678 481.309 mo
253.827 507.041 li
261.529 507.041 li
257.678 481.309 li
f
287.048 523.178 mo
279.056 523.178 li
279.056 479.563 li
270.695 479.563 li
270.695 472.295 li
295.41 472.295 li
295.41 479.563 li
287.048 479.563 li
287.048 523.178 li
f
312.061 523.178 mo
304.352 523.178 li
304.352 515.473 li
312.061 515.473 li
312.061 523.178 li
311.841 511.911 mo
304.717 511.911 li
304.426 511.039 304.281 510.094 304.281 508.785 cv
304.281 497.664 313.004 496.647 313.004 483.998 cv
313.004 480.363 311.55 478.982 309.004 478.982 cv
306.462 478.982 305.008 480.363 305.008 483.998 cv
305.008 489.522 li
297.448 489.522 li
297.448 484.507 li
297.448 476.365 301.444 471.713 309.224 471.713 cv
317.004 471.713 321 476.365 321 484.507 cv
321 497.736 311.55 499.772 311.55 509.076 cv
311.55 510.022 311.621 510.966 311.841 511.911 cv
f
430.536 416.56 mo
418.42 416.56 li
418.42 384.105 li
404.895 384.105 li
404.895 416.56 li
393 416.56 li
393 340.834 li
404.895 340.834 li
404.895 373.288 li
418.42 373.288 li
418.42 340.834 li
430.536 340.834 li
430.536 416.56 li
f
456.288 417.425 mo
444.605 417.425 438.224 410.502 438.224 398.386 cv
438.224 359.008 li
438.224 346.892 444.605 339.969 456.288 339.969 cv
467.971 339.969 474.356 346.892 474.356 359.008 cv
474.356 398.386 li
474.356 410.502 467.971 417.425 456.288 417.425 cv
456.288 350.786 mo
452.504 350.786 450.124 352.842 450.124 358.251 cv
450.124 399.143 li
450.124 404.552 452.504 406.607 456.288 406.607 cv
460.076 406.607 462.456 404.552 462.456 399.143 cv
462.456 358.251 li
462.456 352.842 460.076 350.786 456.288 350.786 cv
f
528.562 416.56 mo
512.768 416.56 li
508.44 376.209 li
504.113 416.56 li
487.775 416.56 li
479.343 340.834 li
490.915 340.834 li
497.296 400.549 li
503.031 340.834 li
514.499 340.834 li
520.451 400.981 li
526.614 340.834 li
537 340.834 li
528.562 416.56 li
f
126.829 91.9468 mo
118.094 91.9468 li
115.7 69.6235 li
113.307 91.9468 li
104.268 91.9468 li
99.6002 50.0532 li
106.002 50.0532 li
109.535 83.0893 li
112.705 50.0532 li
119.052 50.0532 li
122.342 83.3286 li
125.755 50.0532 li
131.5 50.0532 li
126.829 91.9468 li
f
155.562 91.9468 mo
148.858 91.9468 li
148.858 73.9922 li
141.379 73.9922 li
141.379 91.9468 li
134.796 91.9468 li
134.796 50.0532 li
141.379 50.0532 li
141.379 68.0078 li
148.858 68.0078 li
148.858 50.0532 li
155.562 50.0532 li
155.562 91.9468 li
f
178.309 91.9468 mo
160.355 91.9468 li
160.355 50.0532 li
178.309 50.0532 li
178.309 56.038 li
166.938 56.038 li
166.938 67.7084 li
175.977 67.7084 li
175.977 73.693 li
166.938 73.693 li
166.938 85.962 li
178.309 85.962 li
178.309 91.9468 li
f
202.85 91.9468 mo
196.147 91.9468 li
195.79 90.8691 195.551 90.211 195.551 86.7999 cv
195.551 80.2162 li
195.551 76.3261 194.231 74.8902 191.242 74.8902 cv
188.965 74.8902 li
188.965 91.9468 li
182.384 91.9468 li
182.384 50.0532 li
192.316 50.0532 li
199.142 50.0532 202.073 53.2251 202.073 59.6889 cv
202.073 62.9806 li
202.073 67.2895 200.695 70.1025 197.764 71.4791 cv
201.057 72.8555 202.131 76.0273 202.131 80.396 cv
202.131 86.8594 li
202.131 88.8945 202.192 90.3906 202.85 91.9468 cv
188.965 56.038 mo
188.965 68.9052 li
191.539 68.9052 li
193.992 68.9052 195.489 67.828 195.489 64.4766 cv
195.489 60.3472 li
195.489 57.3549 194.471 56.038 192.138 56.038 cv
188.965 56.038 li
f
224.4 91.9468 mo
206.446 91.9468 li
206.446 50.0532 li
224.4 50.0532 li
224.4 56.038 li
213.029 56.038 li
213.029 67.7084 li
222.067 67.7084 li
222.067 73.693 li
213.029 73.693 li
213.029 85.962 li
224.4 85.962 li
224.4 91.9468 li
f
718.583 353 mo
711.419 353 li
711.419 345.836 li
718.583 345.836 li
718.583 353 li
718.379 342.524 mo
711.759 342.524 li
711.488 341.713 711.349 340.835 711.349 339.618 cv
711.349 329.277 719.46 328.331 719.46 316.571 cv
719.46 313.191 718.108 311.907 715.744 311.907 cv
713.381 311.907 712.029 313.191 712.029 316.571 cv
712.029 321.708 li
705 321.708 li
705 317.044 li
705 309.475 708.716 305.149 715.945 305.149 cv
723.179 305.149 726.897 309.475 726.897 317.044 cv
726.897 329.345 718.108 331.237 718.108 339.889 cv
718.108 340.767 718.178 341.646 718.379 342.524 cv
.156863 .156863 .156863 rgb
f
429.959 576.306 mo
424.198 576.306 li
422.619 561.582 li
421.04 576.306 li
415.079 576.306 li
412 548.675 li
416.223 548.675 li
418.553 570.464 li
420.644 548.675 li
424.829 548.675 li
427 570.622 li
429.251 548.675 li
433.04 548.675 li
429.959 576.306 li
f
448.91 576.306 mo
444.489 576.306 li
444.489 564.464 li
439.556 564.464 li
439.556 576.306 li
435.214 576.306 li
435.214 548.675 li
439.556 548.675 li
439.556 560.517 li
444.489 560.517 li
444.489 548.675 li
448.91 548.675 li
448.91 576.306 li
f
463.914 576.306 mo
452.072 576.306 li
452.072 548.675 li
463.914 548.675 li
463.914 552.622 li
456.414 552.622 li
456.414 560.319 li
462.375 560.319 li
462.375 564.267 li
456.414 564.267 li
456.414 572.358 li
463.914 572.358 li
463.914 576.306 li
f
480.1 576.306 mo
475.679 576.306 li
475.444 575.596 475.286 575.161 475.286 572.911 cv
475.286 568.569 li
475.286 566.003 474.416 565.056 472.444 565.056 cv
470.942 565.056 li
470.942 576.306 li
466.602 576.306 li
466.602 548.675 li
473.152 548.675 li
477.654 548.675 479.588 550.766 479.588 555.029 cv
479.588 557.201 li
479.588 560.043 478.679 561.898 476.745 562.806 cv
478.918 563.714 479.626 565.806 479.626 568.688 cv
479.626 572.95 li
479.626 574.293 479.667 575.279 480.1 576.306 cv
470.942 552.622 mo
470.942 561.108 li
472.641 561.108 li
474.258 561.108 475.245 560.398 475.245 558.187 cv
475.245 555.464 li
475.245 553.49 474.573 552.622 473.035 552.622 cv
470.942 552.622 li
f
494.314 576.306 mo
482.472 576.306 li
482.472 548.675 li
494.314 548.675 li
494.314 552.622 li
486.814 552.622 li
486.814 560.319 li
492.775 560.319 li
492.775 564.267 li
486.814 564.267 li
486.814 572.358 li
494.314 572.358 li
494.314 576.306 li
f
504.144 576.306 mo
499.962 576.306 li
499.962 572.122 li
504.144 572.122 li
504.144 576.306 li
504.026 570.187 mo
500.158 570.187 li
500 569.714 499.921 569.2 499.921 568.49 cv
499.921 562.451 504.658 561.898 504.658 555.029 cv
504.658 553.056 503.868 552.306 502.487 552.306 cv
501.106 552.306 500.315 553.056 500.315 555.029 cv
500.315 558.029 li
496.211 558.029 li
496.211 555.306 li
496.211 550.885 498.383 548.358 502.605 548.358 cv
506.828 548.358 509 550.885 509 555.306 cv
509 562.49 503.868 563.596 503.868 568.648 cv
503.868 569.161 503.909 569.674 504.026 570.187 cv
f
144.762 580.997 mo
136.844 580.997 li
134.674 560.762 li
132.504 580.997 li
124.311 580.997 li
120.08 543.023 li
125.883 543.023 li
129.085 572.969 li
131.959 543.023 li
137.712 543.023 li
140.695 573.186 li
143.788 543.023 li
148.996 543.023 li
144.762 580.997 li
f
170.807 580.997 mo
164.731 580.997 li
164.731 564.723 li
157.951 564.723 li
157.951 580.997 li
151.984 580.997 li
151.984 543.023 li
157.951 543.023 li
157.951 559.298 li
164.731 559.298 li
164.731 543.023 li
170.807 543.023 li
170.807 580.997 li
f
191.427 580.997 mo
175.152 580.997 li
175.152 543.023 li
191.427 543.023 li
191.427 548.447 li
181.12 548.447 li
181.12 559.026 li
189.313 559.026 li
189.313 564.451 li
181.12 564.451 li
181.12 575.572 li
191.427 575.572 li
191.427 580.997 li
f
214 580.997 mo
207.869 580.997 li
200.435 553.493 li
200.435 580.997 li
195.066 580.997 li
195.066 543.023 li
202.552 543.023 li
208.681 565.753 li
208.681 543.023 li
214 543.023 li
214 580.997 li
f
848.787 380.522 mo
844.005 380.522 li
842.694 368.299 li
841.383 380.522 li
836.435 380.522 li
833.878 357.583 li
837.384 357.583 li
839.318 375.672 li
841.054 357.583 li
844.529 357.583 li
846.33 375.803 li
848.199 357.583 li
851.345 357.583 li
848.787 380.522 li
f
864.519 380.522 mo
860.85 380.522 li
860.85 370.69 li
856.754 370.69 li
856.754 380.522 li
853.149 380.522 li
853.149 357.583 li
856.754 357.583 li
856.754 367.414 li
860.85 367.414 li
860.85 357.583 li
864.519 357.583 li
864.519 380.522 li
f
874.124 380.522 mo
870.518 380.522 li
870.518 372.919 li
865.964 357.583 li
869.731 357.583 li
872.484 368.036 li
875.237 357.583 li
878.679 357.583 li
874.124 372.919 li
874.124 380.522 li
f
296.843 561.872 mo
293.066 561.872 li
292.031 552.22 li
290.996 561.872 li
287.088 561.872 li
285.069 543.758 li
287.837 543.758 li
289.365 558.042 li
290.736 543.758 li
293.48 543.758 li
294.903 558.146 li
296.378 543.758 li
298.862 543.758 li
296.843 561.872 li
f
309.266 561.872 mo
306.368 561.872 li
306.368 554.108 li
303.134 554.108 li
303.134 561.872 li
300.288 561.872 li
300.288 543.758 li
303.134 543.758 li
303.134 551.521 li
306.368 551.521 li
306.368 543.758 li
309.266 543.758 li
309.266 561.872 li
f
319.102 561.872 mo
311.339 561.872 li
311.339 543.758 li
319.102 543.758 li
319.102 546.346 li
314.185 546.346 li
314.185 551.391 li
318.093 551.391 li
318.093 553.979 li
314.185 553.979 li
314.185 559.284 li
319.102 559.284 li
319.102 561.872 li
f
329.869 561.872 mo
326.944 561.872 li
323.399 548.752 li
323.399 561.872 li
320.837 561.872 li
320.837 543.758 li
324.409 543.758 li
327.332 554.601 li
327.332 543.758 li
329.869 543.758 li
329.869 561.872 li
f
366.265 379.976 mo
353.467 379.976 li
353.467 367.177 li
366.265 367.177 li
366.265 379.976 li
365.9 361.261 mo
354.074 361.261 li
353.591 359.813 353.344 358.243 353.344 356.069 cv
353.344 337.597 367.832 335.906 367.832 314.898 cv
367.832 308.861 365.417 306.567 361.194 306.567 cv
356.971 306.567 354.557 308.861 354.557 314.898 cv
354.557 324.074 li
342 324.074 li
342 315.743 li
342 302.222 348.638 294.494 361.554 294.494 cv
374.475 294.494 381.119 302.222 381.119 315.743 cv
381.119 337.718 365.417 341.099 365.417 356.553 cv
365.417 358.122 365.541 359.691 365.9 361.261 cv
f
340.647 86.1273 mo
334.344 86.1273 li
332.617 70.0205 li
330.89 86.1273 li
324.368 86.1273 li
321 55.9003 li
325.62 55.9003 li
328.168 79.7363 li
330.455 55.9003 li
335.035 55.9003 li
337.409 79.9091 li
339.871 55.9003 li
344.017 55.9003 li
340.647 86.1273 li
f
361.378 86.1273 mo
356.542 86.1273 li
356.542 73.173 li
351.145 73.173 li
351.145 86.1273 li
346.395 86.1273 li
346.395 55.9003 li
351.145 55.9003 li
351.145 68.8545 li
356.542 68.8545 li
356.542 55.9003 li
361.378 55.9003 li
361.378 86.1273 li
f
377.791 86.1273 mo
364.836 86.1273 li
364.836 55.9003 li
377.791 55.9003 li
377.791 60.2183 li
369.586 60.2183 li
369.586 68.6387 li
376.108 68.6387 li
376.108 72.9571 li
369.586 72.9571 li
369.586 81.8091 li
377.791 81.8091 li
377.791 86.1273 li
f
395.497 86.1273 mo
390.661 86.1273 li
390.404 85.35 390.231 84.8751 390.231 82.4136 cv
390.231 77.6635 li
390.231 74.8569 389.279 73.8207 387.122 73.8207 cv
385.479 73.8207 li
385.479 86.1273 li
380.731 86.1273 li
380.731 55.9003 li
387.897 55.9003 li
392.822 55.9003 394.937 58.189 394.937 62.8526 cv
394.937 65.2275 li
394.937 68.3363 393.943 70.3663 391.828 71.3595 cv
394.204 72.3526 394.979 74.641 394.979 77.7935 cv
394.979 82.4571 li
394.979 83.9248 395.023 85.0044 395.497 86.1273 cv
385.479 60.2183 mo
385.479 69.5025 li
387.337 69.5025 li
389.106 69.5025 390.187 68.7252 390.187 66.3072 cv
390.187 63.3275 li
390.187 61.1684 389.452 60.2183 387.768 60.2183 cv
385.479 60.2183 li
f
411.046 86.1273 mo
398.092 86.1273 li
398.092 55.9003 li
411.046 55.9003 li
411.046 60.2183 li
402.842 60.2183 li
402.842 68.6387 li
409.363 68.6387 li
409.363 72.9571 li
402.842 72.9571 li
402.842 81.8091 li
411.046 81.8091 li
411.046 86.1273 li
f
421.8 86.1273 mo
417.225 86.1273 li
417.225 81.5503 li
421.8 81.5503 li
421.8 86.1273 li
421.671 79.4342 mo
417.439 79.4342 li
417.267 78.916 417.18 78.3545 417.18 77.5777 cv
417.18 70.9708 422.362 70.3663 422.362 62.8526 cv
422.362 60.6933 421.499 59.8729 419.988 59.8729 cv
418.476 59.8729 417.612 60.6933 417.612 62.8526 cv
417.612 66.1342 li
413.121 66.1342 li
413.121 63.1547 li
413.121 58.3183 415.497 55.5547 420.117 55.5547 cv
424.736 55.5547 427.112 58.3183 427.112 63.1547 cv
427.112 71.0136 421.499 72.2226 421.499 77.75 cv
421.499 78.3115 421.542 78.8725 421.671 79.4342 cv
f
685.112 141.142 mo
679.723 141.142 li
678.246 127.37 li
676.768 141.142 li
671.192 141.142 li
668.313 115.295 li
672.263 115.295 li
674.441 135.677 li
676.398 115.295 li
680.313 115.295 li
682.344 135.825 li
684.449 115.295 li
687.994 115.295 li
685.112 141.142 li
f
702.839 141.142 mo
698.703 141.142 li
698.703 130.065 li
694.089 130.065 li
694.089 141.142 li
690.027 141.142 li
690.027 115.295 li
694.089 115.295 li
694.089 126.373 li
698.703 126.373 li
698.703 115.295 li
702.839 115.295 li
702.839 141.142 li
f
716.873 141.142 mo
705.796 141.142 li
705.796 115.295 li
716.873 115.295 li
716.873 118.988 li
709.857 118.988 li
709.857 126.188 li
715.435 126.188 li
715.435 129.88 li
709.857 129.88 li
709.857 137.45 li
716.873 137.45 li
716.873 141.142 li
f
732.014 141.142 mo
727.878 141.142 li
727.658 140.478 727.511 140.071 727.511 137.967 cv
727.511 133.905 li
727.511 131.505 726.697 130.619 724.852 130.619 cv
723.447 130.619 li
723.447 141.142 li
719.388 141.142 li
719.388 115.295 li
725.516 115.295 li
729.727 115.295 731.535 117.252 731.535 121.24 cv
731.535 123.271 li
731.535 125.93 730.685 127.665 728.876 128.514 cv
730.908 129.363 731.57 131.32 731.57 134.016 cv
731.57 138.004 li
731.57 139.259 731.608 140.182 732.014 141.142 cv
723.447 118.988 mo
723.447 126.926 li
725.036 126.926 li
726.549 126.926 727.473 126.262 727.473 124.194 cv
727.473 121.647 li
727.473 119.8 726.845 118.988 725.405 118.988 cv
723.447 118.988 li
f
745.31 141.142 mo
734.232 141.142 li
734.232 115.295 li
745.31 115.295 li
745.31 118.988 li
738.294 118.988 li
738.294 126.188 li
743.871 126.188 li
743.871 129.88 li
738.294 129.88 li
738.294 137.45 li
745.31 137.45 li
745.31 141.142 li
f
754.505 141.142 mo
750.593 141.142 li
750.593 137.228 li
754.505 137.228 li
754.505 141.142 li
754.395 135.419 mo
750.776 135.419 li
750.629 134.976 750.555 134.495 750.555 133.831 cv
750.555 128.182 754.985 127.665 754.985 121.24 cv
754.985 119.394 754.247 118.692 752.956 118.692 cv
751.662 118.692 750.924 119.394 750.924 121.24 cv
750.924 124.046 li
747.084 124.046 li
747.084 121.499 li
747.084 117.363 749.115 115 753.065 115 cv
757.016 115 759.047 117.363 759.047 121.499 cv
759.047 128.219 754.247 129.252 754.247 133.979 cv
754.247 134.459 754.285 134.939 754.395 135.419 cv
f
678.166 102.797 mo
665.281 102.797 li
661.75 69.8682 li
658.219 102.797 li
644.886 102.797 li
638 41 li
647.444 41 li
652.654 89.7313 li
657.332 41 li
666.693 41 li
671.547 90.0844 li
676.581 41 li
685.056 41 li
678.166 102.797 li
f
720.549 102.797 mo
710.662 102.797 li
710.662 76.3126 li
699.629 76.3126 li
699.629 102.797 li
689.918 102.797 li
689.918 41 li
699.629 41 li
699.629 67.4844 li
710.662 67.4844 li
710.662 41 li
720.549 41 li
720.549 102.797 li
f
754.104 102.797 mo
727.62 102.797 li
727.62 41 li
754.104 41 li
754.104 49.8281 li
737.331 49.8281 li
737.331 67.0431 li
750.664 67.0431 li
750.664 75.871 li
737.331 75.871 li
737.331 93.9687 li
754.104 93.9687 li
754.104 102.797 li
f
790.838 102.797 mo
780.86 102.797 li
768.764 58.038 li
768.764 102.797 li
760.025 102.797 li
760.025 41 li
772.208 41 li
782.182 77.9898 li
782.182 41 li
790.838 41 li
790.838 102.797 li
f
729.663 457.677 mo
722.956 457.677 li
722.956 450.97 li
729.663 450.97 li
729.663 457.677 li
729.472 447.869 mo
723.273 447.869 li
723.021 447.109 722.892 446.287 722.892 445.148 cv
722.892 435.467 730.484 434.581 730.484 423.57 cv
730.484 420.407 729.219 419.205 727.006 419.205 cv
724.793 419.205 723.527 420.407 723.527 423.57 cv
723.527 428.38 li
716.946 428.38 li
716.946 424.014 li
716.946 416.927 720.425 412.877 727.194 412.877 cv
733.966 412.877 737.448 416.927 737.448 424.014 cv
737.448 435.53 729.219 437.302 729.219 445.401 cv
729.219 446.224 729.283 447.047 729.472 447.869 cv
f
437.523 480.163 mo
429.566 480.163 li
427.385 459.828 li
425.204 480.163 li
416.97 480.163 li
412.718 442 li
418.55 442 li
421.768 472.095 li
424.656 442 li
430.438 442 li
433.435 472.312 li
436.544 442 li
441.778 442 li
437.523 480.163 li
f
463.697 480.163 mo
457.591 480.163 li
457.591 463.808 li
450.777 463.808 li
450.777 480.163 li
444.78 480.163 li
444.78 442 li
450.777 442 li
450.777 458.355 li
457.591 458.355 li
457.591 442 li
463.697 442 li
463.697 480.163 li
f
479.678 480.163 mo
473.678 480.163 li
473.678 467.515 li
466.102 442 li
472.369 442 li
476.949 459.392 li
481.529 442 li
487.255 442 li
479.678 467.515 li
479.678 480.163 li
f
654.23 22.8892 mo
651.57 22.8892 li
650.841 16.0888 li
650.111 22.8892 li
647.358 22.8892 li
645.936 10.1275 li
647.887 10.1275 li
648.963 20.191 li
649.929 10.1275 li
651.861 10.1275 li
652.864 20.2638 li
653.903 10.1275 li
655.653 10.1275 li
654.23 22.8892 li
f
662.983 22.8892 mo
660.941 22.8892 li
660.941 17.42 li
658.663 17.42 li
658.663 22.8892 li
656.657 22.8892 li
656.657 10.1275 li
658.663 10.1275 li
658.663 15.5968 li
660.941 15.5968 li
660.941 10.1275 li
662.983 10.1275 li
662.983 22.8892 li
f
669.913 22.8892 mo
664.443 22.8892 li
664.443 10.1275 li
669.913 10.1275 li
669.913 11.9507 li
666.449 11.9507 li
666.449 15.5053 li
669.202 15.5053 li
669.202 17.3287 li
666.449 17.3287 li
666.449 21.0658 li
669.913 21.0658 li
669.913 22.8892 li
f
677.389 22.8892 mo
675.347 22.8892 li
675.238 22.561 675.165 22.3605 675.165 21.3213 cv
675.165 19.3159 li
675.165 18.1308 674.763 17.6932 673.853 17.6932 cv
673.159 17.6932 li
673.159 22.8892 li
671.154 22.8892 li
671.154 10.1275 li
674.18 10.1275 li
676.259 10.1275 677.152 11.0938 677.152 13.0625 cv
677.152 14.0654 li
677.152 15.378 676.732 16.2348 675.839 16.6544 cv
676.843 17.0732 677.17 18.0395 677.17 19.3706 cv
677.17 21.3394 li
677.17 21.9594 677.188 22.415 677.389 22.8892 cv
673.159 11.9507 mo
673.159 15.8701 li
673.943 15.8701 li
674.69 15.8701 675.146 15.542 675.146 14.5209 cv
675.146 13.2633 li
675.146 12.3515 674.836 11.9507 674.126 11.9507 cv
673.159 11.9507 li
f
683.953 22.8892 mo
678.484 22.8892 li
678.484 10.1275 li
683.953 10.1275 li
683.953 11.9507 li
680.489 11.9507 li
680.489 15.5053 li
683.243 15.5053 li
683.243 17.3287 li
680.489 17.3287 li
680.489 21.0658 li
683.953 21.0658 li
683.953 22.8892 li
f
688.493 22.8892 mo
686.562 22.8892 li
686.562 20.9566 li
688.493 20.9566 li
688.493 22.8892 li
688.44 20.0635 mo
686.652 20.0635 li
686.579 19.8447 686.543 19.6074 686.543 19.2794 cv
686.543 16.4903 688.73 16.2348 688.73 13.0625 cv
688.73 12.151 688.366 11.8047 687.728 11.8047 cv
687.09 11.8047 686.726 12.151 686.726 13.0625 cv
686.726 14.4482 li
684.829 14.4482 li
684.829 13.1905 li
684.829 11.1483 685.832 9.98149 687.782 9.98149 cv
689.733 9.98149 690.736 11.1483 690.736 13.1905 cv
690.736 16.5084 688.366 17.0185 688.366 19.3526 cv
688.366 19.5894 688.385 19.8262 688.44 20.0635 cv
f
367.231 580.889 mo
364.57 580.889 li
363.841 574.089 li
363.111 580.889 li
360.358 580.889 li
358.936 568.127 li
360.887 568.127 li
361.962 578.19 li
362.928 568.127 li
364.862 568.127 li
365.864 578.264 li
366.904 568.127 li
368.654 568.127 li
367.231 580.889 li
f
375.983 580.889 mo
373.941 580.889 li
373.941 575.42 li
371.663 575.42 li
371.663 580.889 li
369.658 580.889 li
369.658 568.127 li
371.663 568.127 li
371.663 573.597 li
373.941 573.597 li
373.941 568.127 li
375.983 568.127 li
375.983 580.889 li
f
382.913 580.889 mo
377.443 580.889 li
377.443 568.127 li
382.913 568.127 li
382.913 569.95 li
379.449 569.95 li
379.449 573.506 li
382.202 573.506 li
382.202 575.329 li
379.449 575.329 li
379.449 579.066 li
382.913 579.066 li
382.913 580.889 li
f
390.389 580.889 mo
388.347 580.889 li
388.238 580.56 388.165 580.36 388.165 579.321 cv
388.165 577.315 li
388.165 576.131 387.763 575.693 386.853 575.693 cv
386.159 575.693 li
386.159 580.889 li
384.154 580.889 li
384.154 568.127 li
387.18 568.127 li
389.259 568.127 390.152 569.094 390.152 571.063 cv
390.152 572.065 li
390.152 573.378 389.732 574.234 388.839 574.654 cv
389.842 575.073 390.17 576.04 390.17 577.37 cv
390.17 579.34 li
390.17 579.959 390.189 580.415 390.389 580.889 cv
386.159 569.95 mo
386.159 573.87 li
386.943 573.87 li
387.69 573.87 388.147 573.542 388.147 572.522 cv
388.147 571.263 li
388.147 570.352 387.836 569.95 387.125 569.95 cv
386.159 569.95 li
f
396.954 580.889 mo
391.484 580.889 li
391.484 568.127 li
396.954 568.127 li
396.954 569.95 li
393.489 569.95 li
393.489 573.506 li
396.243 573.506 li
396.243 575.329 li
393.489 575.329 li
393.489 579.066 li
396.954 579.066 li
396.954 580.889 li
f
401.493 580.889 mo
399.561 580.889 li
399.561 578.957 li
401.493 578.957 li
401.493 580.889 li
401.439 578.063 mo
399.652 578.063 li
399.579 577.845 399.543 577.607 399.543 577.279 cv
399.543 574.49 401.731 574.234 401.731 571.063 cv
401.731 570.151 401.366 569.805 400.729 569.805 cv
400.09 569.805 399.725 570.151 399.725 571.063 cv
399.725 572.448 li
397.829 572.448 li
397.829 571.19 li
397.829 569.148 398.833 567.981 400.783 567.981 cv
402.733 567.981 403.736 569.148 403.736 571.19 cv
403.736 574.508 401.366 575.019 401.366 577.353 cv
401.366 577.589 401.385 577.826 401.439 578.063 cv
f
723.566 507.815 mo
719.79 507.815 li
718.755 498.163 li
717.72 507.815 li
713.811 507.815 li
711.793 489.701 li
714.561 489.701 li
716.089 503.985 li
717.46 489.701 li
720.204 489.701 li
721.626 504.089 li
723.102 489.701 li
725.586 489.701 li
723.566 507.815 li
f
735.99 507.815 mo
733.092 507.815 li
733.092 500.053 li
729.857 500.053 li
729.857 507.815 li
727.011 507.815 li
727.011 489.701 li
729.857 489.701 li
729.857 497.465 li
733.092 497.465 li
733.092 489.701 li
735.99 489.701 li
735.99 507.815 li
f
745.825 507.815 mo
738.062 507.815 li
738.062 489.701 li
745.825 489.701 li
745.825 492.289 li
740.909 492.289 li
740.909 497.335 li
744.817 497.335 li
744.817 499.923 li
740.909 499.923 li
740.909 505.228 li
745.825 505.228 li
745.825 507.815 li
f
756.593 507.815 mo
753.668 507.815 li
750.122 494.695 li
750.122 507.815 li
747.561 507.815 li
747.561 489.701 li
751.132 489.701 li
754.056 500.544 li
754.056 489.701 li
756.593 489.701 li
756.593 507.815 li
f
567.696 403 mo
561.14 403 li
559.343 386.244 li
557.546 403 li
550.762 403 li
547.258 371.555 li
552.063 371.555 li
554.715 396.352 li
557.095 371.555 li
561.858 371.555 li
564.328 396.531 li
566.89 371.555 li
571.202 371.555 li
567.696 403 li
f
589.263 403 mo
584.231 403 li
584.231 389.523 li
578.617 389.523 li
578.617 403 li
573.676 403 li
573.676 371.555 li
578.617 371.555 li
578.617 385.031 li
584.231 385.031 li
584.231 371.555 li
589.263 371.555 li
589.263 403 li
f
602.431 403 mo
597.486 403 li
597.486 392.578 li
591.244 371.555 li
596.408 371.555 li
600.182 385.885 li
603.955 371.555 li
608.673 371.555 li
602.431 392.578 li
602.431 403 li
f
700.893 283 mo
693.511 283 li
693.511 275.618 li
700.893 275.618 li
700.893 283 li
700.683 272.206 mo
693.861 272.206 li
693.582 271.37 693.439 270.464 693.439 269.211 cv
693.439 258.556 701.797 257.581 701.797 245.463 cv
701.797 241.981 700.404 240.658 697.968 240.658 cv
695.532 240.658 694.14 241.981 694.14 245.463 cv
694.14 250.756 li
686.896 250.756 li
686.896 245.951 li
686.896 238.151 690.726 233.694 698.176 233.694 cv
705.629 233.694 709.461 238.151 709.461 245.951 cv
709.461 258.626 700.404 260.575 700.404 269.489 cv
700.404 270.395 700.476 271.3 700.683 272.206 cv
f
41.7593 349.494 mo
30.0073 349.494 li
30.0073 337.742 li
41.7593 337.742 li
41.7593 349.494 li
41.4238 332.31 mo
30.5641 332.31 li
30.1207 330.978 29.894 329.538 29.894 327.542 cv
29.894 310.579 43.1978 309.027 43.1978 289.736 cv
43.1978 284.193 40.9804 282.087 37.1031 282.087 cv
33.2251 282.087 31.0079 284.193 31.0079 289.736 cv
31.0079 298.163 li
19.4774 298.163 li
19.4774 290.513 li
19.4774 278.096 25.5729 271 37.4327 271 cv
49.2984 271 55.3984 278.096 55.3984 290.513 cv
55.3984 310.69 40.9804 313.795 40.9804 327.985 cv
40.9804 329.427 41.0942 330.868 41.4238 332.31 cv
f
633.601 211.815 mo
624.417 211.815 li
621.899 188.345 li
619.383 211.815 li
609.88 211.815 li
604.972 167.768 li
611.703 167.768 li
615.417 202.502 li
618.75 167.768 li
625.424 167.768 li
628.883 202.754 li
632.471 167.768 li
638.512 167.768 li
633.601 211.815 li
f
663.81 211.815 mo
656.763 211.815 li
656.763 192.938 li
648.898 192.938 li
648.898 211.815 li
641.977 211.815 li
641.977 167.768 li
648.898 167.768 li
648.898 186.645 li
656.763 186.645 li
656.763 167.768 li
663.81 167.768 li
663.81 211.815 li
f
682.255 211.815 mo
675.33 211.815 li
675.33 197.217 li
666.585 167.768 li
673.82 167.768 li
679.106 187.841 li
684.392 167.768 li
691 167.768 li
682.255 197.217 li
682.255 211.815 li
f
59.7382 425.742 mo
56.3174 425.742 li
55.3794 416.999 li
54.4419 425.742 li
50.9019 425.742 li
49.0738 409.334 li
51.5815 409.334 li
52.9648 422.273 li
54.2065 409.334 li
56.6923 409.334 li
57.981 422.367 li
59.3173 409.334 li
61.5679 409.334 li
59.7382 425.742 li
f
70.9918 425.742 mo
68.3663 425.742 li
68.3663 418.71 li
65.4371 418.71 li
65.4371 425.742 li
62.8585 425.742 li
62.8585 409.334 li
65.4371 409.334 li
65.4371 416.366 li
68.3663 416.366 li
68.3663 409.334 li
70.9918 409.334 li
70.9918 425.742 li
f
79.9008 425.742 mo
72.8692 425.742 li
72.8692 409.334 li
79.9008 409.334 li
79.9008 411.678 li
75.4472 411.678 li
75.4472 416.249 li
78.9874 416.249 li
78.9874 418.593 li
75.4472 418.593 li
75.4472 423.398 li
79.9008 423.398 li
79.9008 425.742 li
f
89.5128 425.742 mo
86.8873 425.742 li
86.7476 425.32 86.6539 425.062 86.6539 423.727 cv
86.6539 421.148 li
86.6539 419.624 86.1373 419.061 84.9663 419.061 cv
84.0741 419.061 li
84.0741 425.742 li
81.4971 425.742 li
81.4971 409.334 li
85.3872 409.334 li
88.06 409.334 89.2084 410.576 89.2084 413.108 cv
89.2084 414.397 li
89.2084 416.085 88.6683 417.186 87.5204 417.726 cv
88.8105 418.265 89.2309 419.507 89.2309 421.218 cv
89.2309 423.75 li
89.2309 424.547 89.2553 425.133 89.5128 425.742 cv
84.0741 411.678 mo
84.0741 416.718 li
85.0831 416.718 li
86.0435 416.718 86.6298 416.296 86.6298 414.983 cv
86.6298 413.366 li
86.6298 412.193 86.231 411.678 85.3174 411.678 cv
84.0741 411.678 li
f
97.9532 425.742 mo
90.9209 425.742 li
90.9209 409.334 li
97.9532 409.334 li
97.9532 411.678 li
93.4996 411.678 li
93.4996 416.249 li
97.0396 416.249 li
97.0396 418.593 li
93.4996 418.593 li
93.4996 423.398 li
97.9532 423.398 li
97.9532 425.742 li
f
103.79 425.742 mo
101.307 425.742 li
101.307 423.258 li
103.79 423.258 li
103.79 425.742 li
103.72 422.109 mo
101.423 422.109 li
101.33 421.827 101.283 421.522 101.283 421.101 cv
101.283 417.515 104.095 417.186 104.095 413.108 cv
104.095 411.935 103.626 411.49 102.807 411.49 cv
101.986 411.49 101.517 411.935 101.517 413.108 cv
101.517 414.89 li
99.079 414.89 li
99.079 413.272 li
99.079 410.646 100.369 409.146 102.877 409.146 cv
105.384 409.146 106.674 410.646 106.674 413.272 cv
106.674 417.538 103.626 418.194 103.626 421.194 cv
103.626 421.499 103.65 421.805 103.72 422.109 cv
f
477.468 318 mo
462.976 318 li
462.976 303.507 li
477.468 303.507 li
477.468 318 li
477.055 296.808 mo
463.662 296.808 li
463.115 295.167 462.835 293.39 462.835 290.929 cv
462.835 270.01 479.242 268.096 479.242 244.306 cv
479.242 237.47 476.508 234.872 471.725 234.872 cv
466.943 234.872 464.209 237.47 464.209 244.306 cv
464.209 254.697 li
449.99 254.697 li
449.99 245.263 li
449.99 229.95 457.507 221.2 472.133 221.2 cv
486.766 221.2 494.288 229.95 494.288 245.263 cv
494.288 270.147 476.508 273.975 476.508 291.476 cv
476.508 293.253 476.648 295.03 477.055 296.808 cv
f
532.307 519 mo
526.113 519 li
524.416 503.172 li
522.719 519 li
516.31 519 li
513 489.296 li
517.539 489.296 li
520.044 512.72 li
522.292 489.296 li
526.792 489.296 li
529.125 512.89 li
531.545 489.296 li
535.618 489.296 li
532.307 519 li
f
552.679 519 mo
547.927 519 li
547.927 506.27 li
542.623 506.27 li
542.623 519 li
537.955 519 li
537.955 489.296 li
542.623 489.296 li
542.623 502.026 li
547.927 502.026 li
547.927 489.296 li
552.679 489.296 li
552.679 519 li
f
568.808 519 mo
556.077 519 li
556.077 489.296 li
568.808 489.296 li
568.808 493.539 li
560.745 493.539 li
560.745 501.814 li
567.154 501.814 li
567.154 506.058 li
560.745 506.058 li
560.745 514.757 li
568.808 514.757 li
568.808 519 li
f
586.465 519 mo
581.668 519 li
575.853 497.486 li
575.853 519 li
571.654 519 li
571.654 489.296 li
577.51 489.296 li
582.304 507.076 li
582.304 489.296 li
586.465 489.296 li
586.465 519 li
f
38.5874 510.602 mo
29.7374 510.602 li
27.312 487.986 li
24.8868 510.602 li
15.7295 510.602 li
11.0001 468.158 li
17.4864 468.158 li
21.0654 501.629 li
24.2774 468.158 li
30.7076 468.158 li
34.041 501.871 li
37.4985 468.158 li
43.3197 468.158 li
38.5874 510.602 li
f
67.6973 510.602 mo
60.9062 510.602 li
60.9062 492.412 li
53.3287 492.412 li
53.3287 510.602 li
46.6588 510.602 li
46.6588 468.158 li
53.3287 468.158 li
53.3287 486.349 li
60.9062 486.349 li
60.9062 468.158 li
67.6973 468.158 li
67.6973 510.602 li
f
90.7441 510.602 mo
72.5538 510.602 li
72.5538 468.158 li
90.7441 468.158 li
90.7441 474.222 li
79.2235 474.222 li
79.2235 486.046 li
88.3809 486.046 li
88.3809 492.109 li
79.2235 492.109 li
79.2235 504.539 li
90.7441 504.539 li
90.7441 510.602 li
f
115.607 510.602 mo
108.816 510.602 li
108.455 509.511 108.212 508.844 108.212 505.388 cv
108.212 498.719 li
108.212 494.777 106.876 493.322 103.847 493.322 cv
101.54 493.322 li
101.54 510.602 li
94.873 510.602 li
94.873 468.158 li
104.936 468.158 li
111.85 468.158 114.82 471.372 114.82 477.921 cv
114.82 481.256 li
114.82 485.621 113.424 488.471 110.454 489.865 cv
113.791 491.261 114.879 494.474 114.879 498.9 cv
114.879 505.448 li
114.879 507.511 114.941 509.026 115.607 510.602 cv
101.54 474.222 mo
101.54 487.259 li
104.148 487.259 li
106.633 487.259 108.15 486.167 108.15 482.772 cv
108.15 478.588 li
108.15 475.556 107.118 474.222 104.755 474.222 cv
101.54 474.222 li
f
137.441 510.602 mo
119.251 510.602 li
119.251 468.158 li
137.441 468.158 li
137.441 474.222 li
125.92 474.222 li
125.92 486.046 li
135.078 486.046 li
135.078 492.109 li
125.92 492.109 li
125.92 504.539 li
137.441 504.539 li
137.441 510.602 li
f
152.54 510.602 mo
146.116 510.602 li
146.116 504.176 li
152.54 504.176 li
152.54 510.602 li
152.36 501.204 mo
146.418 501.204 li
146.175 500.477 146.054 499.688 146.054 498.597 cv
146.054 489.32 153.33 488.471 153.33 477.921 cv
153.33 474.889 152.118 473.737 149.997 473.737 cv
147.873 473.737 146.66 474.889 146.66 477.921 cv
146.66 482.529 li
140.355 482.529 li
140.355 478.345 li
140.355 471.554 143.691 467.674 150.177 467.674 cv
156.664 467.674 160 471.554 160 478.345 cv
160 489.381 152.118 491.078 152.118 498.84 cv
152.118 499.628 152.18 500.416 152.36 501.204 cv
f
178.483 232.757 mo
168.576 232.757 li
165.861 207.439 li
163.146 232.757 li
152.895 232.757 li
147.6 185.243 li
154.861 185.243 li
158.868 222.711 li
162.464 185.243 li
169.662 185.243 li
173.394 222.983 li
177.264 185.243 li
183.78 185.243 li
178.483 232.757 li
f
211.07 232.757 mo
203.468 232.757 li
203.468 212.394 li
194.985 212.394 li
194.985 232.757 li
187.518 232.757 li
187.518 185.243 li
194.985 185.243 li
194.985 205.606 li
203.468 205.606 li
203.468 185.243 li
211.07 185.243 li
211.07 232.757 li
f
230.967 232.757 mo
223.497 232.757 li
223.497 217.01 li
214.064 185.243 li
221.868 185.243 li
227.569 206.896 li
233.271 185.243 li
240.4 185.243 li
230.967 217.01 li
230.967 232.757 li
f
217.762 402.698 mo
210.203 402.698 li
208.132 383.382 li
206.06 402.698 li
198.239 402.698 li
194.2 366.447 li
199.74 366.447 li
202.796 395.033 li
205.54 366.447 li
211.032 366.447 li
213.879 395.24 li
216.832 366.447 li
221.803 366.447 li
217.762 402.698 li
f
242.623 402.698 mo
236.824 402.698 li
236.824 387.162 li
230.352 387.162 li
230.352 402.698 li
224.655 402.698 li
224.655 366.447 li
230.352 366.447 li
230.352 381.983 li
236.824 381.983 li
236.824 366.447 li
242.623 366.447 li
242.623 402.698 li
f
257.803 402.698 mo
252.104 402.698 li
252.104 390.684 li
244.907 366.447 li
250.861 366.447 li
255.211 382.968 li
259.561 366.447 li
265 366.447 li
257.803 390.684 li
257.803 402.698 li
f
770.331 324.025 mo
761.564 324.025 li
759.161 301.618 li
756.758 324.025 li
747.686 324.025 li
743 281.975 li
749.427 281.975 li
752.972 315.135 li
756.154 281.975 li
762.524 281.975 li
765.827 315.375 li
769.253 281.975 li
775.019 281.975 li
770.331 324.025 li
f
799.172 324.025 mo
792.443 324.025 li
792.443 306.004 li
784.936 306.004 li
784.936 324.025 li
778.328 324.025 li
778.328 281.975 li
784.936 281.975 li
784.936 299.997 li
792.443 299.997 li
792.443 281.975 li
799.172 281.975 li
799.172 324.025 li
f
822.005 324.025 mo
803.982 324.025 li
803.982 281.975 li
822.005 281.975 li
822.005 287.982 li
810.591 287.982 li
810.591 299.696 li
819.663 299.696 li
819.663 305.703 li
810.591 305.703 li
810.591 318.017 li
822.005 318.017 li
822.005 324.025 li
f
847 324.025 mo
840.211 324.025 li
831.979 293.569 li
831.979 324.025 li
826.033 324.025 li
826.033 281.975 li
834.323 281.975 li
841.11 307.144 li
841.11 281.975 li
847 281.975 li
847 324.025 li
f
287.663 448.88 mo
280.713 448.88 li
278.809 431.12 li
276.904 448.88 li
269.714 448.88 li
266 415.552 li
271.093 415.552 li
273.904 441.833 li
276.426 415.552 li
281.475 415.552 li
284.093 442.023 li
286.808 415.552 li
291.378 415.552 li
287.663 448.88 li
f
310.521 448.88 mo
305.188 448.88 li
305.188 434.597 li
299.238 434.597 li
299.238 448.88 li
294 448.88 li
294 415.552 li
299.238 415.552 li
299.238 429.835 li
305.188 429.835 li
305.188 415.552 li
310.521 415.552 li
310.521 448.88 li
f
328.618 448.88 mo
314.334 448.88 li
314.334 415.552 li
328.618 415.552 li
328.618 420.313 li
319.572 420.313 li
319.572 429.597 li
326.762 429.597 li
326.762 434.358 li
319.572 434.358 li
319.572 444.119 li
328.618 444.119 li
328.618 448.88 li
f
348.141 448.88 mo
342.809 448.88 li
342.525 448.022 342.335 447.499 342.335 444.785 cv
342.335 439.548 li
342.335 436.453 341.285 435.31 338.907 435.31 cv
337.095 435.31 li
337.095 448.88 li
331.86 448.88 li
331.86 415.552 li
339.761 415.552 li
345.191 415.552 347.524 418.075 347.524 423.217 cv
347.524 425.836 li
347.524 429.264 346.427 431.502 344.095 432.597 cv
346.715 433.691 347.57 436.215 347.57 439.69 cv
347.57 444.833 li
347.57 446.452 347.619 447.642 348.141 448.88 cv
337.095 420.313 mo
337.095 430.549 li
339.143 430.549 li
341.095 430.549 342.286 429.692 342.286 427.026 cv
342.286 423.74 li
342.286 421.36 341.476 420.313 339.62 420.313 cv
337.095 420.313 li
f
365.286 448.88 mo
351.002 448.88 li
351.002 415.552 li
365.286 415.552 li
365.286 420.313 li
356.24 420.313 li
356.24 429.597 li
363.43 429.597 li
363.43 434.358 li
356.24 434.358 li
356.24 444.119 li
365.286 444.119 li
365.286 448.88 li
f
377.143 448.88 mo
372.098 448.88 li
372.098 443.833 li
377.143 443.833 li
377.143 448.88 li
377.001 441.5 mo
372.335 441.5 li
372.144 440.929 372.049 440.31 372.049 439.453 cv
372.049 432.168 377.763 431.502 377.763 423.217 cv
377.763 420.836 376.811 419.932 375.145 419.932 cv
373.478 419.932 372.525 420.836 372.525 423.217 cv
372.525 426.836 li
367.574 426.836 li
367.574 423.55 li
367.574 418.218 370.193 415.171 375.287 415.171 cv
380.38 415.171 383 418.218 383 423.55 cv
383 432.216 376.811 433.549 376.811 439.644 cv
376.811 440.262 376.859 440.881 377.001 441.5 cv
f
481.599 111 mo
465.79 111 li
465.79 95.19 li
481.599 95.19 li
481.599 111 li
481.149 87.8813 mo
466.539 87.8813 li
465.942 86.0913 465.637 84.1523 465.637 81.4678 cv
465.637 58.6475 483.535 56.5591 483.535 30.6069 cv
483.535 23.1495 480.553 20.3154 475.336 20.3154 cv
470.118 20.3154 467.136 23.1495 467.136 30.6069 cv
467.136 41.9424 li
451.624 41.9424 li
451.624 31.6509 li
451.624 14.9459 459.823 5.3999 475.779 5.3999 cv
491.742 5.3999 499.949 14.9459 499.949 31.6509 cv
499.949 58.7964 480.553 62.9727 480.553 82.0644 cv
480.553 84.0034 480.705 85.9424 481.149 87.8813 cv
f
353.541 541.114 mo
344.707 541.114 li
342.285 518.535 li
339.864 541.114 li
330.722 541.114 li
326 498.74 li
332.476 498.74 li
336.049 532.155 li
339.255 498.74 li
345.675 498.74 li
349.003 532.397 li
352.455 498.74 li
358.266 498.74 li
353.541 541.114 li
f
382.604 541.114 mo
375.824 541.114 li
375.824 522.954 li
368.258 522.954 li
368.258 541.114 li
361.599 541.114 li
361.599 498.74 li
368.258 498.74 li
368.258 516.9 li
375.824 516.9 li
375.824 498.74 li
382.604 498.74 li
382.604 541.114 li
f
405.612 541.114 mo
387.452 541.114 li
387.452 498.74 li
405.612 498.74 li
405.612 504.794 li
394.111 504.794 li
394.111 516.598 li
403.253 516.598 li
403.253 522.651 li
394.111 522.651 li
394.111 535.06 li
405.612 535.06 li
405.612 541.114 li
f
430.8 541.114 mo
423.958 541.114 li
415.664 510.423 li
415.664 541.114 li
409.672 541.114 li
409.672 498.74 li
418.026 498.74 li
424.865 524.103 li
424.865 498.74 li
430.8 498.74 li
430.8 541.114 li
f
79.8003 65.6002 mo
73.2725 65.6002 li
73.2725 59.0722 li
79.8003 59.0722 li
79.8003 65.6002 li
79.6142 56.0547 mo
73.5821 56.0547 li
73.3354 55.3159 73.2094 54.5152 73.2094 53.4067 cv
73.2094 43.9848 80.5997 43.1226 80.5997 32.4073 cv
80.5997 29.328 79.3677 28.1582 77.2138 28.1582 cv
75.0601 28.1582 73.8281 29.328 73.8281 32.4073 cv
73.8281 37.0873 li
67.4238 37.0873 li
67.4238 32.8383 li
67.4238 25.9415 70.809 22 77.397 22 cv
83.9878 22 87.3764 25.9415 87.3764 32.8383 cv
87.3764 44.0463 79.3677 45.7706 79.3677 53.6534 cv
79.3677 54.4537 79.4306 55.2544 79.6142 56.0547 cv
f
275.862 227 mo
265.083 227 li
265.083 216.22 li
275.862 216.22 li
275.862 227 li
275.555 211.237 mo
265.593 211.237 li
265.186 210.017 264.979 208.695 264.979 206.864 cv
264.979 191.305 277.182 189.881 277.182 172.186 cv
277.182 167.102 275.148 165.17 271.591 165.17 cv
268.034 165.17 266 167.102 266 172.186 cv
266 179.916 li
255.424 179.916 li
255.424 172.898 li
255.424 161.508 261.015 155 271.894 155 cv
282.777 155 288.373 161.508 288.373 172.898 cv
288.373 191.407 275.148 194.254 275.148 207.271 cv
275.148 208.593 275.252 209.915 275.555 211.237 cv
f
639.236 540.6 mo
631.361 540.6 li
631.361 532.724 li
639.236 532.724 li
639.236 540.6 li
639.012 529.085 mo
631.734 529.085 li
631.437 528.193 631.285 527.227 631.285 525.89 cv
631.285 514.522 640.2 513.482 640.2 500.556 cv
640.2 496.841 638.715 495.43 636.116 495.43 cv
633.518 495.43 632.031 496.841 632.031 500.556 cv
632.031 506.202 li
624.305 506.202 li
624.305 501.076 li
624.305 492.755 628.39 488 636.337 488 cv
644.288 488 648.376 492.755 648.376 501.076 cv
648.376 514.598 638.715 516.678 638.715 526.187 cv
638.715 527.152 638.791 528.118 639.012 529.085 cv
f
858.8 60.6 mo
852.272 60.6 li
852.272 54.0722 li
858.8 54.0722 li
858.8 60.6 li
858.614 51.0547 mo
852.582 51.0547 li
852.336 50.3159 852.21 49.5152 852.21 48.4067 cv
852.21 38.9849 859.6 38.1226 859.6 27.4073 cv
859.6 24.328 858.368 23.1583 856.214 23.1583 cv
854.06 23.1583 852.828 24.328 852.828 27.4073 cv
852.828 32.0873 li
846.424 32.0873 li
846.424 27.8383 li
846.424 20.9415 849.809 17 856.397 17 cv
862.987 17 866.376 20.9415 866.376 27.8383 cv
866.376 39.0464 858.368 40.7704 858.368 48.6534 cv
858.368 49.4537 858.431 50.2544 858.614 51.0547 cv
f
264.8 87.6002 mo
258.273 87.6002 li
258.273 81.0722 li
264.8 81.0722 li
264.8 87.6002 li
264.614 78.0546 mo
258.582 78.0546 li
258.335 77.3159 258.209 76.5151 258.209 75.4066 cv
258.209 65.9848 265.6 65.1226 265.6 54.4072 cv
265.6 51.3282 264.368 50.1582 262.214 50.1582 cv
260.06 50.1582 258.828 51.3282 258.828 54.4072 cv
258.828 59.0873 li
252.424 59.0873 li
252.424 54.8385 li
252.424 47.9414 255.809 43.9999 262.397 43.9999 cv
268.988 43.9999 272.376 47.9414 272.376 54.8385 cv
272.376 66.0463 264.368 67.7706 264.368 75.6533 cv
264.368 76.4536 264.431 77.2544 264.614 78.0546 cv
f
873.699 468.6 mo
863.639 468.6 li
863.639 458.539 li
873.699 458.539 li
873.699 468.6 li
873.412 453.888 mo
864.115 453.888 li
863.735 452.749 863.541 451.516 863.541 449.807 cv
863.541 435.285 874.932 433.956 874.932 417.44 cv
874.932 412.695 873.033 410.892 869.713 410.892 cv
866.393 410.892 864.495 412.695 864.495 417.44 cv
864.495 424.654 li
854.624 424.654 li
854.624 418.105 li
854.624 407.475 859.842 401.4 869.995 401.4 cv
880.153 401.4 885.376 407.475 885.376 418.105 cv
885.376 435.38 873.033 438.037 873.033 450.186 cv
873.033 451.42 873.13 452.654 873.412 453.888 cv
f
294.834 44.1416 mo
290.653 44.1416 li
289.507 33.4556 li
288.361 44.1416 li
284.035 44.1416 li
281.8 24.0874 li
284.865 24.0874 li
286.556 39.9014 li
288.073 24.0874 li
291.111 24.0874 li
292.687 40.0161 li
294.32 24.0874 li
297.07 24.0874 li
294.834 44.1416 li
f
308.588 44.1416 mo
305.38 44.1416 li
305.38 35.5469 li
301.799 35.5469 li
301.799 44.1416 li
298.648 44.1416 li
298.648 24.0874 li
301.799 24.0874 li
301.799 32.6822 li
305.38 32.6822 li
305.38 24.0874 li
308.588 24.0874 li
308.588 44.1416 li
f
319.478 44.1416 mo
310.883 44.1416 li
310.883 24.0874 li
319.478 24.0874 li
319.478 26.9526 li
314.035 26.9526 li
314.035 32.5391 li
318.361 32.5391 li
318.361 35.4038 li
314.035 35.4038 li
314.035 41.2769 li
319.478 41.2769 li
319.478 44.1416 li
f
331.225 44.1416 mo
328.017 44.1416 li
327.846 43.6259 327.731 43.3109 327.731 41.6777 cv
327.731 38.5264 li
327.731 36.664 327.1 35.9766 325.668 35.9766 cv
324.579 35.9766 li
324.579 44.1416 li
321.429 44.1416 li
321.429 24.0874 li
326.183 24.0874 li
329.45 24.0874 330.854 25.606 330.854 28.7001 cv
330.854 30.2759 li
330.854 32.3383 330.194 33.685 328.79 34.3438 cv
330.367 35.003 330.881 36.5209 330.881 38.6122 cv
330.881 41.7065 li
330.881 42.6808 330.911 43.397 331.225 44.1416 cv
324.579 26.9526 mo
324.579 33.1118 li
325.811 33.1118 li
326.985 33.1118 327.702 32.5961 327.702 30.9917 cv
327.702 29.0151 li
327.702 27.5826 327.214 26.9526 326.098 26.9526 cv
324.579 26.9526 li
f
341.541 44.1416 mo
332.947 44.1416 li
332.947 24.0874 li
341.541 24.0874 li
341.541 26.9526 li
336.098 26.9526 li
336.098 32.5391 li
340.425 32.5391 li
340.425 35.4038 li
336.098 35.4038 li
336.098 41.2769 li
341.541 41.2769 li
341.541 44.1416 li
f
348.675 44.1416 mo
345.64 44.1416 li
345.64 41.105 li
348.675 41.105 li
348.675 44.1416 li
348.59 39.7011 mo
345.783 39.7011 li
345.668 39.3575 345.611 38.9849 345.611 38.4691 cv
345.611 34.086 349.049 33.685 349.049 28.7001 cv
349.049 27.2676 348.476 26.723 347.474 26.723 cv
346.47 26.723 345.897 27.2676 345.897 28.7001 cv
345.897 30.8775 li
342.918 30.8775 li
342.918 28.9004 li
342.918 25.6918 344.494 23.8583 347.559 23.8583 cv
350.624 23.8583 352.2 25.6918 352.2 28.9004 cv
352.2 34.1146 348.476 34.917 348.476 38.584 cv
348.476 38.956 348.505 39.3287 348.59 39.7011 cv
f
364.412 267.746 mo
353.758 267.746 li
350.838 240.518 li
347.918 267.746 li
336.894 267.746 li
331.2 216.648 li
339.009 216.648 li
343.317 256.942 li
347.185 216.648 li
354.926 216.648 li
358.939 257.234 li
363.102 216.648 li
370.109 216.648 li
364.412 267.746 li
f
399.458 267.746 mo
391.282 267.746 li
391.282 245.847 li
382.159 245.847 li
382.159 267.746 li
374.129 267.746 li
374.129 216.648 li
382.159 216.648 li
382.159 238.547 li
391.282 238.547 li
391.282 216.648 li
399.458 216.648 li
399.458 267.746 li
f
420.855 267.746 mo
412.822 267.746 li
412.822 250.811 li
402.677 216.648 li
411.07 216.648 li
417.202 239.934 li
423.333 216.648 li
431 216.648 li
420.855 250.811 li
420.855 267.746 li
f
757.479 33.9786 mo
751.871 33.9786 li
750.335 19.6494 li
748.798 33.9786 li
742.996 33.9786 li
740 7.08744 li
744.109 7.08744 li
746.377 28.293 li
748.412 7.08744 li
752.486 7.08744 li
754.598 28.4469 li
756.788 7.08744 li
760.476 7.08744 li
757.479 33.9786 li
f
775.921 33.9786 mo
771.618 33.9786 li
771.618 22.4535 li
766.817 22.4535 li
766.817 33.9786 li
762.592 33.9786 li
762.592 7.08744 li
766.817 7.08744 li
766.817 18.6123 li
771.618 18.6123 li
771.618 7.08744 li
775.921 7.08744 li
775.921 33.9786 li
f
790.523 33.9786 mo
778.998 33.9786 li
778.998 7.08744 li
790.523 7.08744 li
790.523 10.9291 li
783.224 10.9291 li
783.224 18.4203 li
789.025 18.4203 li
789.025 22.2618 li
783.224 22.2618 li
783.224 30.1367 li
790.523 30.1367 li
790.523 33.9786 li
f
806.274 33.9786 mo
801.972 33.9786 li
801.743 33.2871 801.59 32.8642 801.59 30.6749 cv
801.59 26.4493 li
801.59 23.9522 800.743 23.0298 798.824 23.0298 cv
797.362 23.0298 li
797.362 33.9786 li
793.139 33.9786 li
793.139 7.08744 li
799.514 7.08744 li
803.894 7.08744 805.776 9.12352 805.776 13.2725 cv
805.776 15.3852 li
805.776 18.1513 804.892 19.9571 803.01 20.8403 cv
805.124 21.7242 805.813 23.7598 805.813 26.564 cv
805.813 30.713 li
805.813 32.0191 805.853 32.9796 806.274 33.9786 cv
797.362 10.9291 mo
797.362 19.1884 li
799.015 19.1884 li
800.589 19.1884 801.551 18.4971 801.551 16.3457 cv
801.551 13.6952 li
801.551 11.7745 800.896 10.9291 799.399 10.9291 cv
797.362 10.9291 li
f
820.107 33.9786 mo
808.583 33.9786 li
808.583 7.08744 li
820.107 7.08744 li
820.107 10.9291 li
812.809 10.9291 li
812.809 18.4203 li
818.61 18.4203 li
818.61 22.2618 li
812.809 22.2618 li
812.809 30.1367 li
820.107 30.1367 li
820.107 33.9786 li
f
829.674 33.9786 mo
825.604 33.9786 li
825.604 29.9062 li
829.674 29.9062 li
829.674 33.9786 li
829.559 28.024 mo
825.795 28.024 li
825.642 27.563 825.564 27.0635 825.564 26.372 cv
825.564 20.4947 830.174 19.9571 830.174 13.2725 cv
830.174 11.3516 829.406 10.6216 828.063 10.6216 cv
826.717 10.6216 825.948 11.3516 825.948 13.2725 cv
825.948 16.1918 li
821.953 16.1918 li
821.953 13.5415 li
821.953 9.23888 824.067 6.78035 828.177 6.78035 cv
832.286 6.78035 834.4 9.23888 834.4 13.5415 cv
834.4 20.5332 829.406 21.6084 829.406 26.5259 cv
829.406 27.0254 829.445 27.5245 829.559 28.024 cv
f
758.724 586.979 mo
754.813 586.979 li
753.74 576.979 li
752.668 586.979 li
748.62 586.979 li
746.529 568.215 li
749.396 568.215 li
750.978 583.011 li
752.399 568.215 li
755.241 568.215 li
756.715 583.118 li
758.244 568.215 li
760.817 568.215 li
758.724 586.979 li
f
771.595 586.979 mo
768.592 586.979 li
768.592 578.936 li
765.242 578.936 li
765.242 586.979 li
762.293 586.979 li
762.293 568.215 li
765.242 568.215 li
765.242 576.256 li
768.592 576.256 li
768.592 568.215 li
771.595 568.215 li
771.595 586.979 li
f
781.783 586.979 mo
773.741 586.979 li
773.741 568.215 li
781.783 568.215 li
781.783 570.894 li
776.689 570.894 li
776.689 576.122 li
780.738 576.122 li
780.738 578.803 li
776.689 578.803 li
776.689 584.298 li
781.783 584.298 li
781.783 586.979 li
f
792.774 586.979 mo
789.772 586.979 li
789.612 586.496 789.506 586.201 789.506 584.673 cv
789.506 581.725 li
789.506 579.982 788.914 579.339 787.575 579.339 cv
786.556 579.339 li
786.556 586.979 li
783.608 586.979 li
783.608 568.215 li
788.057 568.215 li
791.114 568.215 792.427 569.635 792.427 572.53 cv
792.427 574.005 li
792.427 575.935 791.809 577.194 790.497 577.811 cv
791.972 578.428 792.453 579.848 792.453 581.805 cv
792.453 584.7 li
792.453 585.611 792.48 586.281 792.774 586.979 cv
786.556 570.894 mo
786.556 576.658 li
787.709 576.658 li
788.807 576.658 789.478 576.176 789.478 574.675 cv
789.478 572.825 li
789.478 571.484 789.022 570.894 787.977 570.894 cv
786.556 570.894 li
f
802.427 586.979 mo
794.386 586.979 li
794.386 568.215 li
802.427 568.215 li
802.427 570.894 li
797.334 570.894 li
797.334 576.122 li
801.382 576.122 li
801.382 578.803 li
797.334 578.803 li
797.334 584.298 li
802.427 584.298 li
802.427 586.979 li
f
809.103 586.979 mo
806.262 586.979 li
806.262 584.137 li
809.103 584.137 li
809.103 586.979 li
809.022 582.823 mo
806.396 582.823 li
806.288 582.502 806.234 582.153 806.234 581.671 cv
806.234 577.569 809.451 577.194 809.451 572.53 cv
809.451 571.189 808.915 570.681 807.977 570.681 cv
807.039 570.681 806.503 571.189 806.503 572.53 cv
806.503 574.567 li
803.715 574.567 li
803.715 572.718 li
803.715 569.716 805.189 568 808.058 568 cv
810.925 568 812.4 569.716 812.4 572.718 cv
812.4 577.597 808.915 578.347 808.915 581.778 cv
808.915 582.127 808.942 582.476 809.022 582.823 cv
f
565.843 324 mo
551.097 324 li
547.056 286.316 li
543.015 324 li
527.757 324 li
519.876 253.279 li
530.685 253.279 li
536.648 309.048 li
541.999 253.279 li
552.713 253.279 li
558.268 309.452 li
564.028 253.279 li
573.727 253.279 li
565.843 324 li
f
614.346 324 mo
603.03 324 li
603.03 293.691 li
590.404 293.691 li
590.404 324 li
579.291 324 li
579.291 253.279 li
590.404 253.279 li
590.404 283.588 li
603.03 283.588 li
603.03 253.279 li
614.346 253.279 li
614.346 324 li
f
643.959 324 mo
632.841 324 li
632.841 300.561 li
618.801 253.279 li
630.417 253.279 li
638.903 285.508 li
647.39 253.279 li
658 253.279 li
643.959 300.561 li
643.959 324 li
f
103.203 346.966 mo
91.3326 346.966 li
88.0792 316.631 li
84.8262 346.966 li
72.5434 346.966 li
66.2002 290.036 li
74.9004 290.036 li
79.7007 334.93 li
84.0088 290.036 li
92.6337 290.036 li
97.1045 335.255 li
101.742 290.036 li
109.55 290.036 li
103.203 346.966 li
f
142.248 346.966 mo
133.139 346.966 li
133.139 322.567 li
122.974 322.567 li
122.974 346.966 li
114.029 346.966 li
114.029 290.036 li
122.974 290.036 li
122.974 314.434 li
133.139 314.434 li
133.139 290.036 li
142.248 290.036 li
142.248 346.966 li
f
173.16 346.966 mo
148.761 346.966 li
148.761 290.036 li
173.16 290.036 li
173.16 298.169 li
157.708 298.169 li
157.708 314.028 li
169.99 314.028 li
169.99 322.161 li
157.708 322.161 li
157.708 338.833 li
173.16 338.833 li
173.16 346.966 li
f
207 346.966 mo
197.808 346.966 li
186.664 305.732 li
186.664 346.966 li
178.615 346.966 li
178.615 290.036 li
189.838 290.036 li
199.026 324.113 li
199.026 290.036 li
207 290.036 li
207 346.966 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Plus) ()
%%Title: (04336.eps)
%%CreationDate: 12/16/2020 10:48 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6BjVNHo07Uerd?u^H\`%:!b'ZO)*fJU5r8iKME?Q'J4MT)G`Lt's0^`ah*'RWPFa%Ok;[5K3aToe]i8!5f@&L(Z`m9mN]N/3
%kG$W-HTc$&<f(8G!r1+:hu>8Z4D>jkK8Cnsh>4&jG(p8#DESsJ9&3OW5?Q6s^=>9T^"NYf;Tl`[>HR=#\RMU?^OeM#?2(_SCk\-l
%^Khf@8D^#4I7c$)*'c)h!'aE;45F`UF;,4?5QnGgq`W^`Wa,[pGDY>t"?q']A\&q1#X!X]gg[NG$?MMA/7He7pq_t_GXgU1%MiW@
%=]&BPC:V&s@0nLC#.1>fq$o(C-q-i\E(gWgJL\*d79tRk;-,>a,&(0/`]rt/#=@d-(F;[NKDf3=*Fa:([Yg&K;,L,ceT?Y/'!QmO
%gI+LKJ#qj/5Q$i=<@XNS5^H/I&o@V4q.fFb.IKTu8:F[:79-(!UtO1D?q!5LJ<M&ja6AQdSG]TN7]R8`Q5rPc&,"p7..]kD7jGL3
%46SWX[JmY6)Z@;CmP):e%Yjr9YhADki4k]Pn)?A+6a=K\@4HU<p1gZ_.-WcC#=%@niH]:i)DYUDa\qVJ\<LLJme781crr,D]GlM'
%A`$0g!7B\('E9G<NISgk<mJuNXIk,t1A5.]!lW02-<]ii*31D*>,4RGbWHBi]iJte;A7uuTXMC2QmD0NlBeG'b\^OF\9SY\W_:Pu
%an`@I1C$PKH&!3#[Nk_(%0'MW4UGn`Yg6$3Tg(YSrWB"tD%5\ELCZnWYlD#X*.lB?`<%q)Heh0D!ZkqG8ukGKKu,&4Q^9\7oe40*
%(q=I!KS-Lh]#K5H5&+/7ha0/2-LYK[(NthNY:-*F[S-1/!4Kl;]tEBX@[hZ<#jb`n=JkPF@Im24CerPD*F7M.[YX<>4aB"d#@Qlk
%qot%2BAI.=Q<V1rI^:2WTP*A6p()"#mjnDAd=7[,OMc#SFs9s\la4$sQr>6EGD&+tG8d;q)[Bo(?]-TE3acH%h$a4_r'Gmc-:U/D
%$3a1sGG.@0K+7kLs.6RSr6p;L#_(RnG=T@&c?]/6s0l*DFO.hZX0=eSp0iar\c&k\n7;nQ-^sneEPGP02W21qPHQij92c`355ScK
%r<d]3fBE6IW=SS8>`roRU"c-A@B8-])J8)CC%22C[0J6>^IHap[#esK6362GRC^6imWW^+N@%1IV72:mNrH$fl^-/afjL]V>.%,-
%TBMq?q5AiO882MKE;4aF2G:GYX*N*roe)a,>d6L3>iq'Yh3M_\o=O3UrJgf02(*STij_*hG/32"N^h9%./W8;HPlD9N\5*1KOr9#
%mhgu]%bB)`&e.6\#I%@4cAW20N8?rS>u0tMYLL`mSOuB'8,Oa^%u2sn$PQPklnep@H1k7HMpmku1XZ0'IF`6m#Am&8JfN;:_e-Rs
%*dnt96cBnRVr0"':U%DkeOPu2qsin#%O;6G$j"qtkM/+GHbEL/%fRJ50:l*e.CXIWKSD+"Mgr3?*VaUhs68%e0O\&^pOE%3^XaO5
%V8&M1[9YIbZ!W:DHL/\[6GHn)2VrM"4R/P)!7Ij%s&&e8Z:+YsfkU/s%P(CoehLihi,t"&IQ2k^EuKUf6f98eO<i<OTk#Xl5f<KD
%ZdCHHd":a[7.s6)*S0$TbY0"DT>Hb-<b83cC@Bc0[BE\M$<pPs\5DKcnoRnOKU%#]AHYBiD(8bOe[eoC/4"]I\\YKVOV-_5dmpLg
%4eedZ`*SE%Q-"`D]Uss9)B-ut.'k62h:n0F3U2Y$ol,[TLfkXeAnPB/R[pgRT3_=gBhgDbM,V.nai7:t;Fg5Sn05uG5$b=dYCADK
%__`#MARZRt6C+FaW?,!h``,\?];L?`n$7+OAr.TT4NYfYfY"_a*^""NBHjaGm*+CG1W>-hqu6PPZ1.KI$S5k_X-Q\Pl-csnA^_qu
%]Yt_U@N*k@iH]<NT$#;V3Pj!7WSDd6#$FF]H+,g/]okB'9AKHdA1geUI@eX,F1InZ;9j6nGqSha,Rcm[QckUXS*+g[98)H<gcUr#
%DfWCZg1W0ReiLe$keEkM?]Am#IEdqXki/$KF47Jf1!*C43Z'ctiR]D>U%`?!EcK7:4"&ZF59GPWa"c>t->Q4sKDErl__JujASTdQ
%V?\E8RO\hA:st^PQ"5f.^TTB8O*Y5_e>i2B(gGG+Ps</`+*=!C@<Im7r$U3fJ#96`Wb&u</Et);f1?cZc)e0iXd!8Ebnq6Qc-NpJ
%SAkmWJ)29DQ-5C2*"9TiVXJ?.\F!S(dq>!G\kHIerCMPcj^O0/mQ*trc<sc?bcmb'.Ak+`:ZHBjmp<I:cGEqcXN`a#@gnCokI#V\
%<3OQ>UmX92(T72CK:^t2]-Dr_nBWfSZY\H.G/`UigqieL/\j$IiH[;/dUXgo\C/Tc)/WNW3M__JAVls7@s4-GLnSY!A;LhmGDle(
%(K2p_H;5c=5#U]CY0s,:<Lkm`i"Tu*k4#Ys%^T_tDr;W0_Z%N(jVW,Gj7cp805#@2^3Q8dT\j9JZKRE`)il)fe*O2Ak6.!4Xg8m(
%3l+c(^P8kcb?C\<fC/<)9#_)!qWF5HX__ut]krUb0en)X,3,SKp:C4Z-!ikn<IqICU,'>iFR:nE;gbAnk"U%.RGpTs$2V&!F#<jN
%Tpa6V`;pS$f?V#I9tYm*9.\mElhX?"=LKR"%1XduM2rSmY>"I@2dX7snbOgIMe6ZSDIU+2Q+5\hEb1+?S`uU%R-SLqcA6q]`oR+F
%*f6M#JnI`KDD8u7jU#iZ__]8fDMJ2E<tf-0d+=>kRNPOT2ntehK(CEM#JF0?*o[@QHaV_c"(f@PV&d)@jZHA:(t!W%=jD_3b`D%L
%KFDHRAXoaI(l74knL^?\AZaDf>=W+[?:-rBWP^8A2,8R_^Mi#Q?Qi)?NDol5/r.,!U'B_VmcJ*9h.17]h8J,[.Z(lr]?(a33d3pt
%R3$%a=2O%<5+8a;=^j@"mTNb"H]ghm\bY(UfsdSm/Ok\N>,U%K?i&'"D1rikXS$5Yi,8Knqj'-CI[4h[P`MegpXdR]Ol!>o5J3B"
%lPZ*/&5MiL/8Vau1TW*\iBN`6;.=&`R;#@(,E$H:7YO`&2CAB?qq$.SJ5MitUK4RZg7ntdMs>Uc-WBl<P!6ld<;JU$J(gY1e*l]"
%3?6&L(h9l!B]?Y;VXi=Ll*=Eg=;/%h\Um5\N\BC]iL"d9XC^\D]HhoOSFpfsES3r&DNMkL.`/\e)ODmBFD9NS?!EUDT/OHmm'f!3
%;U:S:h-ds0Mim=s7.IV%`#jC?-"HdnK,L8[NMi8in4YPl5D_-2U1A!ZH2bt(q,rqhr@H+[j+B+pbBXaCPUT))HPRo;T(Mkl;)/k=
%cd/?0c_C?kmNu/Xm0;u*;ld/^EAs:pj@>e11$<1HIU7bqq6MLLQ@[61FLm$Sb>^fS'*FRM7cq<>b-[dJ0m@,KP:bn1[M&N7,E]7U
%i'2H3Z?Z&`O#\ud0-!*BnTI,Q>ITmRk]X^=\(`BEmS)a?C-ULDc57q\I,e&#GaQ7BPl3AP^[OJX^;&1@#\L_k.T;7kJ,#:-f2C@k
%idrqNbA!gXRn!X']/I-6s+4N$=lNq/fD]'fQDq]lgU4RtS&]<NfsS'A9jNqZK?`+.MIdj2c)o]l@b!6q^unbchm@-d)X:\eWr4-^
%9>9^35c2hpI.'(GIrG=b6[bCP)9o'V(8m:],o+Pc1s2&AIe@D3^\6r"$qf!O^&!_kN108n[$`^//0ef=n?7t,s#/dkr;R!!ONS9+
%Ba:;D\f.Uk[_&NJjSWIgA!u"J5OI9/o/ie%ml4"3K_#SJIP>Or^JJ[l_^hRh`)Q(iWJ(09Ksb?7#)gmq1rAirVjXY]089Di&aZ]h
%@Jl7knN>"IHd$DKEEC.^\a`$1REElopeXM\g[91hksk%V0`[WjYo>e4(6-E7.'7Hs/AM\g'4c??897eIbe#@(MOF8lQ/C$tA9I2$
%XMNHZ=d,h?&$If'jVemd;`pnE[&^R9$t])]97.kq@m$QXe]=b>ff*n&)%?I$oAqGri`Xe^o*3LFeo)$OgYjhj%f[k/Mk<3ur<*">
%VMn=%T,X><)tBTsGM"rie\7Sd9=UF<qmUu#:;^Z>g9pLK%O:.Kb4I3[:RN'krSRGMn"7>o9;aH2!*dH4k,.]scSs!jZDDU54l8*A
%k'OiB0l+Q&98)GS^@OMFbjYI?D%g^!kPKVoq3IN5kG(=F`I!5fTm9s&cc^dd]^/kTC3BR1\EJ]VB*2sJ\,dYaH-tICg?c8biC6%J
%CioQ^:?oFY4CS,d$/7-&!o&";7\bIq8lk8&Fag34S7c^1X=Y*Uh'?bd2o2>7L=KEZW;MK,;sg2hHSinLVgbKY8-R[<_1sTbBVtEP
%A;VOamcgbF0;[j"b5e`<QT&$\PU13bOIBgD)dRVN;b3%0oWuJ8P(Bk<R#OJ4gS)(Sf/g#k7f:oub,Be"n^>fYDuIi.AaXQ\od40,
%[PB^L0uC[e!'0=uFiY9no/3<=RZW>uheC>kY7Rrr,JJ[rQ]C3D7e8L4mrt#f25Bu9;2/2BY8PU:N%u,(c&f3=-ErT"I!*0sPmrK1
%CL9;Jm;'KN^Pk<QRC<)0OZWH?8u@hsSGY2J\,Yk^A2jsLfihVu,<s<.GHUg/2O5ZgVChXmf<SMuL+^"hp3ko@Dt8^07d]0,A)VpH
%B7f<5:&L`O+N&DlN,.)T[nUB_&A#\p'<UEdT[lerN&"tgrfE$bZGj^=0:KuA^A0W>RE3mtjSY0thp=Aqd0Td2[kL6<OstkZE6"?F
%Z+-rHb\.&<^ObXYF,oi2R!t9,cBR;`h/6Rl1RXZaX.8(]'^%2l=18#R[kH"0)u(jRc#7d]^iqr>T./NA_rp[dcd)i)VU+].;+De@
%F?%X1ots8]$piV6BhWraE40(jM=chuO;;qKQ&!-;aj!Vc2;+RoZXl/3kK%1^YOiW,4c_42NUC0F>CV-+hDrp/11Ok#CA6m/)J=q<
%M5,?NQ8p7\B5$=aq,u_;RMf;;GaN,Wo*fK-U!5C#)eWi62&ikap#d/"=ct843iUE^Q#:2KWEkj.?A>dKqmpIpfc$?9lm+[A_h;%=
%bnMOo5[eu/O>SBaT!)Z%$L8PLU]/rF'm<LD>F=;BoXipR2!dt%ba6Z*`U-4$`gH[,2t["L(\F6l]BpJX.oXdW17FDsbc_r%-*GrE
%XRsC`,B+0-;:PN@Tc_M4r2(W#=22RG6iYRQ6p4`nR+G]#Y%K4A^;4*kfj[@9j0PncY]8O'eVCQ`o56?gcYps<<L,\@p-+T8FbYOl
%ft+jd,s9<!/1rogTiH^>,]A<DF'-1>DRO-oYtk%LQHg+i1&@ePs53F)eVonWNUrRqI$+eB^?>="C[(,#C[f5F`h)Lc+8Fj1bSNli
%DQma^["lFiQII03e=J*]*DRQ@?Sb0re@CV^)58&@(j-mprhhJcf$)r49)W7pe/==\(tgrREMI"s12o9K]@eJdJbQ69?SXN'f0B+p
%/O$=[n0M9ib`BH]Zak?>GPu@G\(u,He<AHJ17u`(A+Oe[T$GU0\Jqh1:Zpm)gaq\pVAAabl!3@kTm8[X:Zq_HFRF@bN?PnE'`QDP
%1!JPUZc7mJl[@Bm&t-o!k1<49:Vm%;CF*RH!o6FoQ5MJ4^VTCU\K@Tpl?9'T?1sVY1\X*(RiLA4)D?D$s)!M"@@j6;Z1i"9T=&G,
%X,S*O]"M:\3W-=WYn^NheT]?6hdg^_H^Zl(!6,ipd$m-iR2[W8OdK]'3nr]eVliN;ls#mk8$C(mPl,UR=isJ8IdQDObGmeUc;("K
%oSq>QH?M_5HY`X<gS7np)!jqu`=&u8r.HXEBX[4Z1\HQq6ML,/4'rkm`_$Hm$$q5;+G8J5Ce9P3Nn$]EVW@$GbD\T!T;6sQXagjJ
%WS=+1C:_[6&p%R$O!T.JrctUe*n>$^jF!A9#'%fY(1T821,WMq_S81$45qoCS;2/M0V$=LHH`.pGr58N6us5oO_sBcqjcGK1Jepd
%5)m>E^O+d33"(5(R[iF!s(R&ND\VL8O\>He[>06lKqBI$c3,dZ=R?#]/AWu^R."edUrcT/E2AsO1YT2!Fm`CA-dA#aV<uQ@F]]Um
%%quQ'B9``!H;5cE/&=9%Eg;s=A2NO:HEZ]MC]3DbZ5mQDg98&.bb>]`VI.QuA=<>69_t">q8I0Lei!D87e=[dqSm@9e_E)5^2a.T
%_4/$tX<.YZY#>2o,EkRbr*R0Mn5m9>kDt#jp=,5H<$;!L?V?Wcc+b?E0@B]dfjEuMU/nb<=+bNl+8<se.F4mM]7D9c!AXimp7X9R
%a=/i"=M10?s6;cS,YK+IS6a<\[3n\MTBikucV47SQ[J^++^\:A`RI7_o/e^Vh<C,'A\5eVg!B;j9A1qciJNKB9SMHW]OPD.;\n:p
%QV@<(Rtd=>88g3NEEI22+(sq8e!h>ZbI0!lT<S4;K'B@3Tc[e[1A-V&%gf/YCqZ\;L&j/SXSAI*EPL'BSH#Z00Irnnr@l,&H)@Eq
%@I5UMSmB+D:<@l@gM2q;bL?T?N:cSiF]>Z;\WUN!amrc`aCU7*)lm+]Y%H?c1\6qkB(M7/k2>hg`%dNh5>s*^Z0*4>oT@[D\Y6%.
%]o]<MFn8*21\oPPI-G-i7e?qRU28-0+*o!u3[TiHE1th)P#,cbSC\@sN:0#PZh7do)nc@<Ut]`koP<-cLc9S[;T8q(qCb*;27(9D
%[9eEK2(%H=6"7Ss00rbim$brYG,HKiL.!a4U!r2\c2mE(06gX]GVQjEG19mupOCM9oJ`E@G0h/D^\^u,BOVn9ZS5JINs:r]]iq=W
%&b^;CrC5FHReC6OrE?5/>0REjJb#PUh/7!;rZ0NB2*\8rjmnoa?m8@k^VF"[IE4\mKhM(%SnZUP)$^%8q>94:&(kfSrpU2sU`Y+n
%4mR4ilHjHk'"e<pW.AU[!"/ZEe=Gm];7#(oKqaZkgW+f<@tsdQFUaI#pa7/NVIu>X,ObHH-Ph(PB&MD<+n-JlpNX[/"fr?-;LJEP
%^HI9HT)nfs7$66I^&)3u)ZPF3%l$+u?5c';I9m%V<n6"+KqY_.>s8M$<]D(RN0/b!n"G.!h''-Z)#!4n$:kNWGl8.F0E/lhrpQM_
%PLSRu]t]F(4M/OHoUo$_IO2"WJ-7KUJqe352A]u^%P6*%YX'N'%0tW2Nb=Fn*]".E[UF-DYLprA#"<D*Y%N(5VWF:Z@.Q9N.r\0-
%an:)*G-OaX+l9(XhPR?\)*j+E1WLf[N9E[pli9mlGn.9>9j7X:di35SPAS=8\p.!M.)e1hR.=P+[o#'%EG[pL$HR6a:p,e-O8q`_
%l]$i:5SU)'\4i-Nkufnf]L`LmK-EgB])e21iV<t%dMZuO;4;SIPP?ODbB=#R/fQq:0H/OCac8c-NAkRN_s,hYQ*"[Y%Z,qhMQ!j+
%&TD#Yg]a$fdDaMVXla$Z[)(iPm;%3cQ6m\;1ib\I?h'g6;V*iJ.Qq7/<-*oTg($%*K.[@gWenh.M`^n,>:t_g6U5,#J9Ks<]5D$P
%!?HKM3)n&7@lil\-9n`Sr:0K/FTakV#aeA6`+L/#T;eDTfYk'ma"5I?esn\UK;\ENR5Q?!FN$)i#Lau@`]>ebfeh`b-U4itaES5q
%@f*%kdtV.`Qo6khpr$bdL`<"=Jg/&;is3qJ1d$&QlOQu\NMPRDS<pZqT_]6.9H!0F-?L^MgS09VS\Unn9ICJ?)a=(4:I.TKEo7Ic
%dO>INs*`b0$C3j;+ic_V.rnAI%.P/4n`X3SXP:Uhr]`7m9;#u^E2(P3qPYEXL?7,#k1[]:=p1K#a02ae&ca3j?8u6'e)83C7D]G1
%dfSE\dpQ);$XJ\KGDqK(334ufK-*Cu`9!hP<.(h@S%(%k'Mcs_r\I0P6-+O-O0nOMUXA=/&,s#3@qpEg_a#%$bYK)An),c`3*)N"
%g;SE0_.e<S(j=XQ;tJOndtnt.^GIJR/%X]55HTF+O\a?N6+4<l<`Wh^eEcEiX'<=GVlg"d_+qHqIG+KFaX^ge4)8V[R&nU_-W?Eq
%CXNBUktf1p,XtdGrdEVt*kRR5q)#_%&n2]Js7LHHl(HS.s'DjmEl>E8kTX_qR7g@?e(,&J[#k<j*JUt&`b'hX!ug39[Z-K);j(#/
%PT>uChPT_8/=`kTQ*5*TiQcP2ZH:GMH@F/N6O5fTiV@H-hn5>j,>[KLZ.mMAHfKKab>EmNqd'-lO*+;aNX]QB,asK^;%(!%Y#jqC
%rS4(!*jt)#(XdS;O]m6ZeueTa3Vg)d%2#>b>,sYSp,(uUUY`[t-l]j3Smr7cTS%^!C:cC6ig<Fa$du(5)NqqRDQYZ3G&rGH_(b47
%ru!UP`E!g6E"9NYrA1^,>Hets30e6LYI22D=sHHsS^_9,kkCWKpT2q,%""c#5RK8QrOCT\lc+E:7#-p"R8[a%VahjrG"kW=&Z/=A
%pcLMC>>K!$?k&P2qn(qjrE2?t7+l=a?>EtC+"OIZ36&??m!:2u!_U_-=M'4@@+<A"5d?&P#INij*tH.r:<=;G8$Y*TZ!-HuN+s/;
%m\&;Roo`@Aet=Vg^P9;ZnF'e']?qVLcC1lt0VY#GY3i*dEmDo%7@rXFNod/T[;m)^:eX1('gmafpVObCcosLMEeiVHgDVLsC+:ZI
%qaQOfB`@.s3fmKf7me]Z'bZqgnCb;h`H"=n>,kZij*aJF@']l75\U*qBmb]oPl>ME-F`s$YQrrWO^*btRS^(D%&*KYB#t^fUKCiW
%T@WM>2LTmj]eBG/*'=TRD/jtih*K]6.oV5JYMftIk*409mD"G)MQ2PIjN`IBf3?K@Y`:5TItNt<J<[m7._SB2]3iI)%i<=-$tu@>
%kWl3%$$/I1qh,DI\ah2);t@o+L@ZQi%DRY"l$T4fN3PC&K#+\K]b90+Ns(7FXVUBS+^Y*S?%Gb$SZL3hR`;o]8tB-ufZXBh[A`ae
%bKUuOo`9lL_JWr7C.71[$Fg+^_lppl!MB%&^C`@\g6#TdhAsUcO6bNn_%Gr\Ab9)^3_hAT+/H8oPY+)<#M[*^;+!i.M9S9sQ04V.
%lt`6*B6fkLW;U3A3*ED>Vc1Bm-@JLl>T`U557"mn(eZsq(i'aAZj,@XM*@<3r"KJB=3]S>kf)(OSt_6F^,CX7_"/=;]4\aHo57<C
%;Pr_nkeKr^Cp=RF*I;NKAaG-2V@=i`MX59sVF?&WZWg1>c;CLj4+Z%F^<T<YY0_,eq\nm^>/M[hS&4r>,b!EPIYCftHaVho=J;N6
%^e-O^d:VRA2&Lq2NeA^87VK8PQ,ASIF`=4#Z1r4GeJci1.UYH)6U*UH_5S$pk+9W!ZS<YdS:bkD1l<KA4tr4OL.eoq$RhHQ_HJR[
%ckMJdn.r`_"?E1A-AH,Z[Jn^]9P77<9^r+mo,lY.?!kYNAfEfm;-,(ka^k^(![Dc63GP1/C<]d)K1Q]kLU$>j3li"PnZui*0gf#A
%DWU:n*O_lBeC'C4c7H';:G@3DY$7=C<F?t?WS>5i<^VgFd^V(r<l1]T%+0OHi;aRJ7PkA+<`@M99V#)I\Rseg8"Re=U(D+7PhRnf
%S$<NMd\sCYS&-GKLhWU4:8pV6I5qSt"Fpe7DEQC49<0A&Fc0rY(s'gq*BF>Z3b<Ym0g6N,3Xr=';0[,/$$HI2?^R+F@BRGJ<"<A2
%1aRe0?^G1K2lNDZ"u55dg+:WtO^1$R]90-'n4.Xm'06`qDE\<R_M7%,!NR#Ppfhs,l[erW5mSJdlUAp'NF(,'SQrM=lK&^I[uuB(
%70=Q<49q921fP!,9aJ$d\QZ.9A+dQEl;?m?5b2&V5/;fF5k&Xr'XrA8Oc?W;H%2Ku,G;Vp/dZ8&Ehgnp*p1\E=E.nEeGIMIN0?-)
%EJ'[WcCn\UVjE,@IO7:0ME74GYSc%9<hXSu(^,KcIJg>bMcoBd`$-SffrJ`[f2sl5.t9B:"4aPr42XG8L)G<17_W!j:C7r6Z6EhJ
%`JHp?MrEN:2um1pkmS+!?.;?_e68/"Zh`9k6be=28D9kD9HO[d-W?l!D1`l*Wseo5W0/s1bIoOhr0L51e2u4&"=N!i(r]fRj]PNk
%W@hI"RV/AHP1AO`Lh5-WgeF1l1To_b(YO[MT&`DO)X_e6@$ZuW_pi?uY8?(2"mn3U1,R=H1A,]9c+!I)(mEA,]01*uUUDA[Zqrmt
%A&7VMNUT"3pHlRN4f]$m[;V`m0(q]n-)]8r7[2H'UoqqME]#G58Y$kXk]k5Obf#'*R"H>mGKdBeddIm6)cQ?"U='M%o[qJfAk;)8
%>8`<@ktI<VFumH[68f4JR'r;K_KkN[m:cm2Ier[UrB["qOdk8Us6f!\]m=mcabM'[_k*V!]g7*d=_i]hE)LokV-7K%jr0FVeKK11
%kIA7XD?.B?NFcD]Sa`A.lPU?K,G\:A(ep:P@$3C!''O9]&Tc@6b+DDM.Y*hkAqrRa0Y*kXT&#u7kT#b>!<d&!>S!-7[+]ON.CD)g
%Xclk^.X4/Be7E8r[6_^\!E1q.VL$">+4TVI_>(am=HBjbV`RJ\kbp@.O_1k?l>WYgHbX4uJcC0JD=+9mmkG2-TlD?"fSm#TV/Xn!
%8IMGg;QO-*($;7nQBn\]FrhHWA3;u^[7a)\^0%jo+hH/57m!p<L[UW+^sW^1YFgjrG1$%D<c##\6A>aMmd+/\gkU1/:DjhI3G#YN
%>CDc=2fSAf[&Rc!Zs!uOVV5"l%c'F?b-]lpG2>S(^/cq1j]cqt7Q7K6pnK=aihe?hj-*O@Q(msF[n3VckSV1qp`pq/OVnQK`XJ"<
%ie]ZX)"hQmoG9]B37/50&Z0Gp3/jujlO?nI_>V,?q)5U893J[@_S.p=J?fu>D=FJSg)hi6k#<0^/AR`3lI*@fcd24]pf'qll51>.
%a]*YBG0d$;,gbP!jcRu*AT;Xg.J*8?okR_HAdF.'l=<Ml(0DL;b-3mB9jSHEJtOoJMSZ3aM?q`[c/k>27Y<Bu9q3%Q@AUJ'C'/HZ
%Y)S?(RUJsr"e\,_>#3fH)2<DbVO9&5`(&uk?CDN[Bq8&l7.JQ,11<rLWLsI/bAR?Pfd.A3>g#cU\D(pgOC"EB%`R1'#bIa^E2!YK
%0j1]0hMpnoC7SX@)g^?!F:WKHjfb1FD%_7iK.c,_r9K<If[)eA#Gmindk_M_2_f;M(tVR&_6Cm^%Ju^<WBZ^0hQkaKbh0Ta9'Q:1
%9->0rh&nk:@-p^]K/<Rq.Xi@7EVAFO4u,?JXNm9PG-*^c8CEC%*V]Z9216Tn%?.,el;>fMf@b598<+U!:E*uE),VYo\.^&`2DDBb
%+$UZ?Ls!aJ#H6grq"]H2I]\/:+]mtdptB+RhMHl'=DQ?!\+IQanM;>[4O1pk&$TWB[9%/N[[:<O9f-%je^"k8rB-%@I`BZ?Z*p^c
%J"b3@UrV]=Qa,>N=u-F3Fr#m22MmJSBrq4`[&Jg`4'd,b$Fd2'o%qJC=]%((Lhb(I7+B)lduA&h0F$J>/dU^eKt267kb.`qfK'<8
%kFq#L99<CZlI@q)*CFPf1+"pC'(q?c;NrKD3G&5*Xk8SuV[>qjh-JniLNP`ONPF>]FmK$h41r7g^\-a:,J1Uss!66qe/%lkMaurW
%GH.-dUKb2cmCWC7Xm^0;h9gOgs.Al2_=lkQnE8B)V,-2W[iX>>II#JDe(`4hD<W/<#F`E8][_M:CVkig"8mIEn31*ai5=A<puf)p
%;qq_((aTPa/DtEZqXA&&529A<?ai6_qLY@-D;s0TU31b4a0/M>FmGF)D>a7%Ibk!&hgLAh>I8:qp,=$;O3@/GFL-,f[_@dC@u=5X
%k8tcE6f+!_jn@B4EP&Ne]fr`[^AYFsTCjh&M[s-q5ab>f\T%;bqssRQ\\DFNh7m/rBcS.W'?[(=DHAkFBYO!&F_cnsh05/j%.6:W
%-i"")^qWjY.))&2>^R'bhD,ZAC^l[_I+mrS>9E:*^J_e@S.ZD3*]8323A>dBr!Im,DF`XPcT_9t[KPN;:OnMp_"SY;5SCL%s6l)W
%[i/g-dq@^=/!KRLs5(BLc'*qW2eoNtT%`r4=,U;]SbD1A7H`7Nb,prJqk[mV5Ia?m51q9,f!euR4PFitY?0W=hqRFWl<\&Vg@H+S
%a15[sKC\3r`JSYZCZAq(_:Ia@Dm2*DB!(#'DH(QIUJamC`JZ)sW`trfGZ8EAHrMc^oCjoXqPlI15_i[VZEWc1h&2MCIjd?r='#ar
%DKSe.4W7WZ59b;@Q*PK*V"hKCrrfn^T,USP[&r0WJogD2Mg+Uta//^7oNp'glQ<PnY::X&ed)$EEd;5)<*A!jS3o57?Bn<aqkN`X
%LD-lDg1n<-5;-=Q9:+L>1FA5[pW@WbqIOI6nbj-P&.guQID#@-KhqHWP]n(Y[u.6ckIZGCeN4d@`9UT:"Pj3Q(ROIBFn`jal-_TJ
%fIST+pQg``=$A3SQ0uDgPeth#8$AN@\_O.8CKL;1\\*>s]jtE<``gXQ2t)3!Dgm)f.(0m4hd>b(^E42j8,'_?"%ui;:G6SKL2=O!
%YZ9o:n$eW*mVT%NmIq-\T!pU;[gW02Y.8qfDMfe,?q=UTjLkA`G@DMNok%p?#(pa[4^;5t$&^D(TZq_+;dJ$*m;Cc@fj4ti]Q^?f
%qi9HWjH[:uQT&8/hQ:!pG<XAs+*A?LV+9U_*?:AhjFk20TVrnHYEm6Z=3t$.WaU@dZWCJ6D;M>K>(55HD@$72Og[T75W?^9m9PKr
%=aj?'jI\>+[\'hqV3UFDX>T='[0moNg/rgrBR@]J5JDB`)`i8S\^C3Mr$*4V5r#aU?Z`&\TN(H\+Q7qu_-DA4Lo!Fn@d^@-q36cK
%*"F#O@'r2M$chATbN8?'B4%TC.[%-)07nh1f.RO/V;af:r2BF&lcY(V$g=JO]K&/e!e!][DmrNej]=n6F^`$_rd8`iC47LF)s?UB
%$a=gc9T\5.:S)d_kfOD6UG)"IL&L:hB9i$ciu+%U,\o:A:^)Ter/9[WYA.D]994m9gY+V.hC]d4*KJ.-9*eU]6o5aaqmW;sNaN(Y
%Qgj^4mC/(/$gZ:(j0DO-^L^>,f_i*Z.>*XC=BR8"K9+.EM@3K+gh8C/qE2J3N2W8.)c]j5X#l$aV^Br`c/mg%Von#pZ[BUA4FV&t
%h>Ok*.#CTMN"1KEZ?WR^<4X?1=51pKHq!<Nb_%i[C2Ap=)lT]>0Y?'5J@Ra7V2NOaJ[\L+H!'Rm=sqF33-`kt'l3a@cM$PG=eH_"
%i$s+Dh:(n#@i:6MUS(kn^:D\>98b:]G2@K,0R:)Y_qK,(`mn^H:g#hmD,e[G>AO&^c6p7H7^<5Ge^#c#A_/GqebrS!p>jIGY?#>?
%jg@mt#K>$,7_@=<]]p8m043Uj2P)LY#(##Sh<.i#hQ$=QE-QhW+0'b!=!Yu>95ZeWb3/Mk&>6LZa\:^fX4L,kM[hm4qf$@Q[OrW8
%7XP07I-+\*'OEEA#Ouj/$AZ[j>5m^9l6`oVdP"ueZ9\/`Z!"_Clnp;_46E8HlJEXHW2X5,hkHKUdl8:`00];S,!A`]=&eD&Tm$M?
%L.>_Wr(kKT]7Y1/ht9'Kd2]RN'okI@/b*2#_PaN\-`&p>q=G$\61nR3HojA@*0#t!q("%U2@YcA<kl@tNt%L<;:jZ@52Ir8]Yj?!
%7J#m+bCY02f%k1Bm?5"YWc$dn8&j!uo:ZbfXZn^F(/'\lp.3bbDIcTOj4>L/`=f:E^QP@lo`BVkaJq`nPRo@Ned@nI(!g/;+'PR\
%HeVY5P8;0AA`uSp=N"+`AOEO<lnI;9Q6?3iW3JXH+?9[k-GaYP;?GZN:)VAKQ?Vh/mhi;=g7%A_[ZQeP7!,_9qGjnH'QkY#dn1Q]
%J26[t8s>R=">W8d/iI#A+WO@AMJb<c_hT]Q+"bb4?=PZ%,8#(9.\XLcj-1-*WjkG<;SM3ng7%5O7mk4\Ssr7!LP6=75D^^iYOSei
%2p`/4WCNt+@,\-D9BqF9?M"J%k](l2AF._^'M7AZj;JEplf=M%Z9j9V\^1tZ;R*=DgNX\cV^/icWh&@=(7)9;'j;)MChOn^je_'9
%(^80KfaoDM#W'=sQ2V=t!SZu9MgMbX:oRAZdZu+Pdof&\S=$)/Vi5Fo`*D<!P>ZZsHuj"oIUYZpN)9*8T==?Xn3Q%.e[&"^l[F'e
%H,-teqN%;r!Uk;2XaJiLZX138+HLCL=nABo@.c.j1Zb[>P<1EN9$NEp>MJhO0DCiP;dp/ZG`\NbW3OG7#u,Ut>Dm,VPgo9ClI'/X
%'-?Km]pDJIQB)o-[U.cs$qck]_me`?cb:)nQAVSKiNQ8;h`CVd5JuEf[FI1qh(7%)@f<jb3o+'><9Y`Z?+[fB%MI;n^$Y[=nQM'V
%=K>&/Bbo#Ib2J!?-SjbW!S#Rq+D&HcZhOI5P23+""lukS!!fVupRHqS@h$(oT\=.)D=?tB!=?XD$=\;Tm7ib1))<!H5i",>R3?X.
%_EjloX2l8RXCE.=a"*RopoSrD#p4qh$WfH,HMt3A,?uZIg!jr,GgLh"b.+%U00^tMqp<7/=n0J^]*H:k$Qk*[<(<qIBgeep.TH9e
%O_=L\mUr^M-&7<^$BG]`U%?3LeZ'Z,p0Tuc[>/J=FAu/$Q?+aB4sK'=Qj5^l(:eZ[Es(VqV?c.WLAU)'X+_,Ifo&R0ri!`4Q/PL,
%p/qqXD`H)'m8d/+R*GN`f^'<4>$K0HrSi`<5CC+^D8!Rsn9"C!5m[%mEi(At=DtD2PV1kN=pKp\:EpVLO9^O3BEa8pHcqML*1T*"
%U9%k]n?I4L4hN(j&3=a22qfhcL[&S)P:"8kk4\\bBZ7$"r:&W>A\0b8l"M^PD4g(Eb2'IL^/qL%/\X3s!q5ZVrLB'4HF$FmnbhSc
%VW?,8-_G6.k3bCM],I4\(tDs,[56GGqh_JNl'^c67s>Eu#gKGep%t(/Sb9[[a0^U2j71,:9E7`*Gu33p)W0uuT+mhnd4eX.%W98*
%iSDO@YjlO0r,D"MaYsSY>MEK;lJI'eV".o-`<"G1!X[4GUBBrLYYmJe\oikBg0:%Z+$3[S0:)(/?S3EX_&ETNWOaUgH>KS@a_LWc
%s1p(cC#aM\C\n\o.V<_&[FqF^71/df9;H>]dq5m;f-r(C@tbPc`fMcqcV)MKPL/EHeTZege*Sfb7$BF."t8lQ\-:/?R`75g2:#I5
%aL^Wn_Mk.no]BO`GkT-nYd&TNm!5A]BEp&M$811iFT/OB/j6b_SC;6IetY?30OUqu-P,&+nC,(4MsAF#>-X>W1ni<l%ZNoM)qO3D
%Qi;d-duOn*JGb=0>@370(PN7/'\WdMR+tsI@0F4+K.aUYf%r=FOU\_Umq@U)?$Q#D""<VKYBL]TkH(VkBlAd]+8=)V+_'+igN1*9
%?!fMH(S&J&"dm.?T>_&JJ,@OBk2Vg&b.I''];#2fFh[A)_8/S!n9>faO.Cuq%pneKD"Q6XL,kWVCZXAreHZqB*7?$=X#H)]jSR!l
%mN,A'n(`7g4pR2b>Q3HDo$bRS72k_f.mV"1MhN\.N8XELq;%f=9s5&:e\f5sncNp8qE#\#hJ)N?euQF#U$0&p_gHH^%',X\<+u"c
%^Dd":r[hXSh9I?c6b$C4Y.OH(r-Z2's2?%tH7O\Aq9>*.3p'o5gh#\]j$WRsqamVj4n,&p2tdnR2StMJ=*388rV=E%F*jb\ec[en
%RY;uqnmSFZHuL1NI29h79UG/U^piZ9ZLI!2H+d.&?@)9(TceaOUOVSMK[a?=@ALBH-t+?=b/f3g:[lqI\ppFlLHJ8[B7rCKI!N##
%DH0s[+S10^Gir-'r9.(ge@^4]"oWW<$_9f"?(E1eYsI4#n()j%hYEUCfO*Nb[^B!!WF7fbD0']t^D`'X6>mUO%uoc6oAJ*Op=jP2
%0-Sd%F8u4o_u_%<'Y9Y.%o?qZPn?k-rVBi`%qIi[<E/)-6XoAg,e,=?*uDTJON*K^jms8jFOJBJE-e/3WK[`3/h3^"Mo-od+.Bfq
%@-ste02d&aH0a#NDQU3I*\-6$?+tB,C],Nkf^aCf;nA3mklu1B#B[UDQOYW\jd!f7nQ%Pl>'oYu8)DN)oJ^.6DS-RVAV8Og*oI\2
%$db$^pU4D!+-2Z++-EIrErN;J]!_P8o9Bs!_`u1`YEEh[LjAlo5Z?HI)uO,\#k#1Q0#NaB,&rBu.Zl+UU[jV0K0aeEXKoOMFEc[i
%B]PX9`V09UG?eigg]htGop,eY)s/=]4_Fe)\Dt!fq/IMI60#V[9Z>i(LJKu>Q!;SCqKG+5bNI]1?DFt1psG!Gg`1WG.@i]3jYVkc
%)iPUr>eXdC=68l9cV;;tY:e![Ntt'<3s*9"DX4L_%RdoJQ,VS!#pu>6d9=18LRTA?OVf[n*)UMcfaejbI(-k1!l<=1kJFr9ZlpB<
%I'pBXW-:b&PYlN*T,ML&+H=4[>Oq!SZX%NOT=mLR@;<BIV'r;b/(UuV8_pOK454ne"'r+mQSe9E?gs*L.PM?N%LV%/q-lrT+T5r%
%=rWA2<#HM<Hcn>Bf&M+dAt$"[mH7uC2?Cb-]eP3)I,$.ff&Om\:p!O5G5Y.m/T3f:I>J<7F>;,e9Ug4^CpiL#@h`r75CE>$W?NI(
%6Q_1;DsK%#2#)eR_4:o$_$EcUiVMj8Amb&-Y#XgO=Ybl:<prs2cW;qtETLifB?'(^2886J')"\d<=<eBisou#(kokFF]_u's3c])
%W2l%'46CHp2tscH\&elrFDgb%g]$/qA-DJba^LI3di7K;HhSYps%HsZUkoHP^j^4bl%!8&'*=/QPO7K1qo^,"O/nJe4kbPaq!9VT
%?-2EDL2KEJ-X3(Bb*![9-X/Z)T7Anf^Qb=.#G7rI=ai2P)b<>QVA$Ld\G0Ot%;%<?f:$p72gMJDQ)^@_ed**ddb=7u?YgPVS\Yjr
%dT7rW:KLngba7_57_!oN%9su-WEhabd\btL[Et!#@GGsbkTLSX6W!COp-n?T"G'igj*VR7PD6UETY./O&:;W#F)[E)M]!L#0Rd!#
%CgDRs+,u:"e('i4ba;!(Z\1KgTb@fcPg-nYdE35`c,G<1X;e17g\&t]dt5?'^Q"p28LPJOVbU?9Xr7c?lK*e&^A#/0UicF8E>qi\
%gKU.#m#U7@cSf^"IHP,uN708aHeVaD+'q9%lFg:XXHbG]0`#^k^^Zq1$AU5-,\E3TYI=^/YA]c"4gdTQmhC+0lP^cF3-aa0T8ktB
%Cj1!!oWW`%P1uHVU\@LRkf\Tq8<Y*BWGGW#>UbB/&nWUK:Y_fVGg:;JDu&@XGIpNZ,60#39&<F?]8<5-n*\4r\K\WAB[i*pXkJD[
%@VaLVhKf(nFU,ou=Hr-$XN:!oB;<VI&#2c[_/Z(o:TL%O@ttPK3oC3jbm#,Lo<m*^)#]eZL!JAj5hNVLP96nbonpo&NEEfr+KkZ&
%!ZA^T!#,*9,_+pEG#C;KkoEFe"]np#X2',[,dtpRP5]P)5-&<)$HD6"T!FGMj]/t.H!GgF>cVeG]QmO/pa`u/hRt7V6YENWPL?6K
%%1j'K[NWX?edMB$T&@?K`>b%p'r1$4D=A;!]8bN9pG8\VCYPHt.bd7u\c)'kj\)g@X)BiV5EV<0mlkf&;m!].D7m/2gurY-ac]l`
%>?YcfS_Y+*1gs04A&!Or@'=Sm[/04FmF=/p7F=-#<tuH`IU'E3*1$m@aHpPI`t'>G?A.Z\du8K!>'YYq2]HDq<tEIrRW%UBl6[FD
%ks+s9G$5jYMpg]fA$ru(.\.j%!5j-Qr_@%p=jb9p3I&0a<C@C&5psN=1bhLC\'L)D?"kWq?,+?di^nd*F@V6<DZdTK68N?1BZ/M8
%f!fFe5-GY]O)H%<4tV5fE)O>%5J;2W8-5R+:Hra`mQW]Wl`XZe!B4G@a,Zg3gho53E.Jkd^Er+&]t2Kbf'e!Rl-tk8S1\aK/I+!,
%Q<.HH*=oUEO.JU80CST%"u!ICh$ku30Tu^pT&?&draXp^Z9CZ+is4qBG0b4+oOa>=HFD,jiWk:i@`iuA7<uo^41^;Fc#d+!j?ZkT
%M2;IBbPg.%RQL#%#@M><qIR-ccu!M._.mmG/$rJM+eCD!jit!hcUfYUf1WbTBE@!_KI:@2VnC]=hAF&ben=Q?qr,:rO>AIQB=TXB
%E=o=ErU9b%C$D.uPcJuk)+L8nG8'Pjh/[Bra%DsjBf959.277\/pTfN:[u,;oY#j[s$@n:^$'<e5Q&c8hsotu]ITT152O;2oM_$g
%^okh/'Ha(,c;UR%";YdtolV+V@BFUu;W!"UGd[?)4M%We_Y*RL[8*J3p(^RHCJ),Z4k;#\<hD,V;N%(oO-5&fc'2\6&>)+1SUAR)
%;6%G,RB<_Q;]70/qjjs@=DK``KCsBY]1Q;Tm,%,WXgMUk;bkh(jKF3THfru3NLB+;r`Ca&3I-g"nPpue2$[WP02CTeHF2>VjEu--
%WP(_W7^i^MMXGYVq!dL*;%7HC*+"gcqn'di>lg>E&qDF4E,tLjeG?TH+Q_drq&@`]4W%$`f_b1l4S2l/mh+<rX]g_q7b.(VWd1b0
%%g$2B9&.'j)_P;KcZ/Naj`j?2han-=XBIO[DKlS3_&b[e!qc)MBitGII\$[-;3gh9\s=9gl=(!iSH(gWp27\2qZMi`U'/]OT;YMT
%]OSJYRL$X8dPhj#]+.BYE0BFP=I9tUn</cckF$VAN&??1,:)`iISrKF<N)#hBL0\V&IoZC6!HW9W\iX<+:JmYJLX[*^)hDk&=5m"
%FQlZ!"]\(o^0]B1)<&"E:`0G`K1da%<b!7oi44LQ0'hh#K$GFs&;p<D\uD@>U@75-BJ:0$,U_km1!g?P+UOV0W+8nj&!337+GRh"
%a>_AVn!b!p27?dPLQH..F9LuYi';CZ67.ouRo!R:3U.6)G:DoW7;_g1@!)aKCc\4iSiDH.B#2gR:#u_8%2tnO5_FYhA#LS<hZ2L%
%M4'5n+o4ZYDlRs>TEu]G=..2RKtM1V*@K4Gn#2<MI%)5cb-scU+H;cn(%q-P(&1V]c+=0[^*%>45aH?B0JktViaRFORB/\N#;B"K
%oh=,L=O4pkR1pYp+>J]!(\.oB(lCZ_[S.7M;%)QK9</`DF4j)'&/G9LKVE%B1+[,SKkZ^</&t+(;SI;_7D!><KF&\l30'Cl9sh`s
%Xe;UK?u%nP43-o^)!'`[]MtN(>_Ksb6P(<<*(TAr?Yf%,Pm\#H;oh?a!8AMB:eAi+I,5^)CWcb;OgoE$D%kf7CW9tV!\.eMWNSf,
%46##'(/VBn$p^t%;YMK;W4?d2^.V39)YE6\0nK?.\](E#lOsj_GWq')oq44Q:&6>H1ql/0ejDm3Tb4Nhb_8[=k(_%^lHlGi"):!'
%Dc"\VqP\.UAs?aL+;kiB#XElE_YesM@1l+P9MiWs<&A?`WblsSBH5K^#W,7!)@'jq(BR^?Ldd/(!DVYqbMn[%"(LpS1D3F37oe;"
%UD+[+/:]a<7&-Kj&-A$5Kogo?63s$'-]5oq$-<HpE/J_a=C<tQ&0+O$Ld_KTka]-/P#=l1")9tQAkY%UO/fX$7O^74=9&FO7&-EX
%.>33s0d3?c;%$B@]9>Ys5^?i!Ln_Vo5,0?QdAPjGp0@)n%V&b<Y/c&8DZsh=a+7>UcjpM:;:.m6gG9WT1]gG%_]Q[afO/CH.d@j_
%7#fBE+UNsN<GcN8/W=+jM5M6sjZVN(HRAhh6*QLbXi=0C)GSPUlmaUN;'-7VbA<.='9SY_.]Tq-cGqh6.]Q=B[%Kp;#K%T98XU>o
%>#<+ELhdFkWB^q1>2*MsJqD^%"-P5H_?%P^3e=Fh!!IZs:*tPATqV_Ui-CVdb]6QHe><q5G?MeO!qcYO2f'fWM1T(/R-Q/+">8%(
%^/6%"Jrga>Z7IF!'$WurlF3Q(M\=Na@*^s(CgnEhF=_^!-qjf^0X5U>hdULZLcD7LUQn2GDW&8]1KG'gZqF(oD,*Dp^Jo4T"^9`4
%YcL8Z_.K)F[O=0;a?oKs%O-\,j94/ATO:MOVa.oPP#aK0!6MQQcs_u-*>:]mV\0,*lrn!f><N@rYO<f8(`*kWL=eVo%>_XPjK,bk
%]OMd:UC"dd((3BGVXGen^$T6'4k;rMCBbPi_<9K7`0<N)Z2nnVhRGRcJ5+3[:2oD*CjhC5a+Q6/B(2c#KCUY=%EP4+3XMMbN!c3p
%Z^N5cN[3ob5#>cG1k;P<OAn'f!aa2cfP5>)/IaggJDu,mdN8`?/!.3H@jm:1&9[2HaR,du;%$B@]9?MGA;E-:f*u[ADSS@l%$ejL
%D-W9M+B3g1[hBm[:c=<7+GVaE5_m;="sX>h,_PoC3B4/T&Jht<A@-&[Y*QHBNdD'D9GLuu5P;]@!$O%[fWp0.')ceO_F+n>=!\lu
%ED=nUJ7ISpcVfk>@FOQrW^OOESld6]/dX"\aQe'_;\+YD(^n(E<)BQSX$;?2"tCn?l?X#Y>9<&XChc7=?',SLA<9<+ES3<nIDCbB
%!^["DkITSSbVD8ie/+'r0!Q(aKac."OF[e.R**I&J:60q65RY@<'2""0$Etp>:q$.Fo"q$(kF1l)Pc=t^iBq;,i<*103MFfi1YAL
%ZdcgC*h^#]fa1YU5Yu^BN/WZD*TKZqWWI`:5Hm]tW)QhhdXmW-Kc-6<REi<fdtF^WVNC,JFVP-j#`+9;E<<_qM[Qu3FlS;B;'2uL
%R&p0F8-gAM[i++uH'JZ^Ku@@VM;c$'FA*LLflt"mJXNT.(TAV^X*K!>-#+mU#F"G*BLa8J[h9uB_Edo&bHP9-45^eaQ]Ooh!J4&N
%?4Q$c*+gD2U'I@%2".:Lc4L--&i;pkjbJHk/LE9`X<e&.rF%hiU.jqs&AeHZEEo/9I!78+Tn/m=\[[k+h]_uBpjcP^6P5C(*Brnf
%EE-D(Juej1bni63S0@8:.$`5W$\%=_Y?obe3RP7&+?aVd:#Xf"2i)ic+MAWW+S0G"k]#D`6*G6E0MK^"`BZZYD+(llm"kHq[3Q.h
%o5-5/NdMcXY0A4%pMI0uK_i+oj@$^V+W\Uqq)/s]MBb<]9up#<I1M#,2Mi6\0t!h`<!a/e[@h(:04oN2jDo?MXLcU2QkiXmP&4r"
%96`1F,V9ks>T:UaOk3E?"&UK@D+^G7)>Q07]GO&KO`-/1gpa7.'B\%KaQL93'a")'I9R+R;Q7/adgIAoj@$-[M<2IrM*.*g)r.ng
%C_sXjZ-"!:L:oC8&Wq`05`Wk>QqF7ZM=<JOVFB!oBu-0m8`[m5@'$p^8IIR?f4I@l_7!3pCI9N@D9TC2&pZ(kg0t>3D$jlQf4G4n
%jL%\Dg*?_+,'Rl27[Qh("%$k28XRs^1!6E./OF,.Qh`OBb2HZ"[Nc>:Ebu.!#VTco(ACpWckEQV!F=uPbeWAT%@8`qB2NECDi50!
%Xj;Eb//E3.-!Cq3-X<,D;5WR2,2p=bVQNX@GD0g2+R7\MHfWqKCSM1,D+(nBUaklu'TgBHH,?s<TV@[L2p@7q5u2a1nMVb-D([d/
%VD",k-ZX#k-6[!^f8.k)jOR"m+Bah.1Y"=@4#L7)CJNs>9JsB?0$R@:0^d>)RB-RS6^-VJPPI#2Ae;L/KaSN=1BgED+H`S4OZb)/
%?:4_/?(#Lu?n,#N>qP3\Cs7f"Q4B+$+ZJ@T9S9=O7!3VhN1.i*">(NcWN2n.60&lY3,hBFGqW;(=4N`1Z=OAT8%pL.ES%&:24<W*
%&3Fo;$KGIR[hLAbSXP[$OlJ/b6:N/sAVtlZNI7$De$2;8>rEHdT"pT4(l<X(,Z%sYbds=c?"l!H&I>nWZdN5R>tKqa1UTeV^oW_O
%F0HeX;\i0FK#dsq49JN4-io5KQqHS<L_Y1WTD9lA30B,^ONflq7%Ao:Lq4Wi\&8--/c68'qJh@F0G8#ILUSE-8*!s,oO&l\nfija
%_]5(d$-Zj=QQQ#LKBH-%jH^4BES6IUM@)A+%q;Z^muC)N"QhM,'M0NW*f5BcNBQ]k,XVGA0dCmQ0mA9No1$/^[,T!JF9*$^ju4:=
%M^50u>S&n9*TdX"1Y1DN5=B=m?=mEY'+nHM+6*,+mu:FY!AT=d'h""M\<7Lu/0V$l/_1JQI>dtJm#<YB`la0=`#'ti&T(<g-IAH"
%*ALT\0-nOkZ')'V@#Ll"(cj"5q",km>kg+.=XLR^3)gh1W(N(d6'("jE6golZ-]C=@kEMu6TqGI-<nil[Oo.V8spGp>#5CaMD[Iq
%:p*o(<',9Bg*6Agm]VEs()IW4G@NAUq=8!r<O'9:$H*YeN%oF5>/d*G=0*%gDWK3,B^X;.8D=`7N"?Xl?>[?h`igNlI/,B=%!s.,
%8Ppd85s=1P#SDuPH8Hrg\ZD_ueJ8kAoVeh^FG0-P-5aG;f-//)SP>K\6\p(JRkT=.LUbB'6&YP$,*ilC@9u_rQ7r0-!d`Yn&\`-P
%,Brd.6nCGi&?QhP4N_\R;,ObJ+[>OK$A\nJHTXX5R\CjW"sQjAU4deH+r2<;cne0^`!U#X+k`GhJeSAOZ+:d[VBEVFM@r?,;nj0k
%$Dp&ZMuk-M2_#[9N^Ts:i^d#J8AnD:U_4u5RW'??`53\MFQ"MlWi@W_/!#!5C8%YEGG;S=?/ZALZK'fiGNE_3-[PD*\_X-WEkfj3
%'?,1VL7<e+ElZE:h@b0n[bTB<EmIHKjeeLl]VY)>>rT0-[-a`"Eo0UM_3GsX.QSoG\-_Y]gj\gI'C];<pSKhqIAfJmC`ruTKjXJ/
%oP/\OD*e"e/ZM\q>=_$hi>5LSor+e[QJ`b$%[S@f:N"*"*IDfSc4PNQpZ,@[*0'[O<77Pd342bs)lEt[PM:(,3_$72/U^F_WEG@m
%7&$Fs3@f-$0_rYQS0P].G^YR\6kZ6=/k^F^hj5:$$FpN/#lj#`dP#@_QuM-3S/,+/:ajefQHi_2I^CE]#]GQ%["N-LDi%;t@VIW:
%)2G`2<'Zh>kUh3iDS?:u>H3c(GtSloR"t;3BU@"Q?4_i`CstD]>9_5aksRPB"Xi#]mG0L8WIg`2MnUigi:Nru]VUM>eA(gngo`H$
%';T11rAml%90\LWG#?(@DU@q)'Z:aC;FL]M/VU96qGV;]!F'eA'r0UuJS8oLB&8\;I,iKahJu:aQkj,hBUd6]hGQcW[IrWFSK;p-
%?duGEd9GW(K8Z7NKs:]G*o8VgFEG78WX@n81KeN-,H@f^k[nqP:V5a`#LCWY0VpB2IIJ)J%T@$QF`eOG8Ad-53%Z%BWN/^-$W$Di
%d;s<..UXW,,7MEj1B<bXd00c$+?'NKQK\VG">/mF7S^lJlmJEseIpE,mnqO[HH(P'i,)^]J6>kp1dB>Xe0*-(HA3_-N.<rpc=I,I
%Qlqg+,/<`08fC_FO+>O[ci[n`p\##1W[.i_f-_gK5iCXS+;!Y'2E1k3)@,R"i!WXd>:G4EfL0RG!5,KJ?"ddd/m?*pVh,MJO/`I#
%USdQ9%#C15Z/@m<;U("3Kd&EC1BQK_Pr/DS*#]SO/CZ9g$oa)"0r_Pi4/Q;.[);FnZO)4i:f]6Hl"GYh4+VtJd'ItY5$B;6MAFSq
%A&TSE,aK+93&LV%pI4<.!*_Ge8kFC?j'`&dm#?l7O:2=J$H:AGiOSK(3$s3uEOgo1hk=h5TQ-p-oO/`#5PubQWf!Me2Eh&`8CW/*
%`+-6ok>-b5H*Ha\$E.!\W<8fc!lemdoi"Zh!g2]O1;Tt+<9gLb"m@TGT^XH!ZJsnsD&)[s.KJqsj-lG"K5u8j,2d]BFY&Ko,,EKs
%'-Hfd;2SOa=taV^+AmpXY68MW!LddN4Gi(H>$.+MO3CFi,H24cOs-ch"U.Or>7ub'/Et*HL91$gRRai;$p84JKVb=qlYMMd0LB_0
%\ikXX4j`.\66iGSP!5?eK$/bUIEQd<6us"#r?A3B"]B30)0,o!35WXSMRr:#]-(Jp,Uj<l.>^T]`?N$,;Zbo@QF'!+#3)#JU><c4
%=F@K_bsHZ9*p\k92jcha1._Pd-%?/:W]Fe.S=>m.`Bb#$,E't0Rp;6J@'YcQJ>abW&,US2+?n*OCg_ZF5ERGTq$WAL*M9eZZPPeg
%24,L-1EkIL*)4RdU+(.k(qdXQ`dBnM:2FP?n_"\BTk3.<IZ_>;o&*,2'#f8TQYpROI/&bRF@/!CK0F2:i'S3gHgU;iae0IdMD/)X
%"^cs2b%%*":Ej#E[S'`hNJErcgJ2i)fQ]sB9n9b=jX7&%nJ$/.jE+WVe\qHcT8,\Q;l]B:fS8Q7)\ZnDR]$6Mk[S_YXK?9j3%s&d
%<&WYQoVk,0"]VIap%9`)\M;IM`p(pGC('<M,<l#kUDP93[U!Y$>Wa,q4]2D`<A6[J*:8'0qC/A(E>7/I`M6k5)l0/^-=I7NoRT^W
%W(KfCWWhY/-S%KI*gEb+!j^4MRL(Q4'V$c,+p4ISJ3Xo\5Kr$p"';LY![5Ga>JVmU"iZ`DG4K!//\EpVV:A9pd&mVD]=?a13h?C]
%M\'-G]i*7XMT01_>E-@^'Xp>;;@GgQK"0?]^`UEN6^d[V/b"$j3\1j!+i+Kg[KF$KH^tL9cX-._;5/:Fe&)skoFTcZ`e?HE;",V7
%M]"#eS[N)u/R$Y`T],CU(sphRi\</k@$"h/Sp:bj0c\.qA5CRh6&8^[E3\-2`J<!M/K@fq7ikq>N'pdr.Z+j)-ptq<Y8mjr1u!E5
%+K_A0BFM:_hIJ)a<>j!BVT:Js56aE<C_9lb*(MRrcWB-TGWtbd#_<4]jp_q:d-&n'UnhKij7lo+FIjP0:b<%roWY9X<_\K?<@]7t
%83mt@iqOE7VW&F2#&_kb#ZT@EKNhsD'r.J,V?P!kM8lUN#2K^IMbPgMB2!Zg&XXVF?c412(0eV;-otE4^_WE`C;ms.C>jG'_UcAE
%%omJ]N)"bXR6L(4:Rq`6_"2Mri_aSuH/\rmHL7Q';%$B@]+YA._E9V*)FHl>:4P[n[rG-2"c%>'R.U`)+j:,E9qZ/WI([7H`GcZ0
%==u3R7Gf830`r=CiZhocUQFf9N*.=UYV>$[jECjtr:*o9$RZF.giPP$.YXQ@h?tNB5t'c=#m+D^^]:S:LneI=-_7Z#PL3F2;.g@.
%J4!tEg6b,M_P4W`mj;@#@N3&N",%`ad\=B,mTn9a1\j1'JS[u?iq)>X%n3!,4fYk#F3ZJ$54'3.V3[%n(f6*?#4`@0NM4]&W"XY)
%8$npZ/PH=Ak,B=>UK]r'<S54i+Vj'I'/c!29`kJ<[RHt^W(/.pWb>YKQkL`e`HCd6jALj*"Yk\GF'8u-/;u=u#g_1D0-X9+*$mA5
%$As0r"J:;IQ\cO;cpZHnd>d'I:6+?b&8`$?iR6ar&R(0fWpC^!.-qY0$P;cZ#oor9@%4qqZ/8i7m`%Lf(?"je?k"Aj_HcgX=C@3(
%8CYWSaIcb#W/k$45`k"m4R>Jb2$bbogrin&N?@Yg)<Oe\9o)oM$,F_2n8VpkRR7m(n@Z?oq(W/7]dIK%+:a(n93O:^PK<e@5U!]d
%L4a1!1VF&[/>LpdP#a0a-q0"Wd^=6<"ZPIf2A<6I:Vh?K'W`R"/-Vjg@KbJ`5a^QN+G*1`,8?*3(lgYc:b[pHX:$`)EH.E'G8)fP
%k\\XBTot]`?)3(-,i"d#5d!9H'NL7!+qdoCKks&9WqHKqaQP3`BrIc`F>]=/rIdGHRZ"c!mkK`oE2c@Jm"iqIgLrik)'8ui3!MI<
%C=A#k/$nFFLp3Q]Zr%FF8C.WP?D[tXl4+kr,t^[-?13_S/0*TB"lqjlG6U/$.mP2[>`k>Ck"g:WWa=5`3E\%X#8WY.n:1ZMmr<]C
%4c5<B$bNZ7Jo%Lok_kL>3q64P6LYI"8fqo]3o1el""p6T`.Fn:g$KOV,/.U>V2nI;0j_7KhV(BknZF:,?81<qZQ(=HD?mN5qeWTk
%J^kSCH5cI[eCUHZfEm!c%)"GK^tn)d<,KIiQ/lIg!`[7(e[;'2685Me<E`?[&A)J5hO0&oQhZ6"a`d/"kb7G)IP?N"o_8WR9ROM0
%%$)*LFL*<GE8_QS9Jh,U<Y,ld\p#Q+'+"%@(N'Bli!CQMjamP#emLiLTsPog_u,fm8-C(ZP%%9bng0`'+Pps,-PaT@q%d;CM1uMQ
%3gfns`\8l7K-6rtEc8VFCt55[Q=`g&&O^2Bo,B?IK(qHp'uZQ)&FYsC9qZ_:`:MWt!f;5J_&D1--9L`O]l7J5M]bWO+BoTqbfSuM
%'_P\Yb!tFFI(Zs?#hVfWLr5GeEaFOXg7bN-SnBCWVuktB3uIt9ViQh:"n@bS$R$K:BLn5#o)hJSeDAg\FF\Vn::B*=G-T4p+<L-5
%\7sp3p/h]q<o[6!ELA1OH%<V&a%aeO0tBubDB:t]932ECHd1S*'n49'JU<cb%QJmo@!?JHmA:(L<hQ0>]d1U/Ymr@?2VfHBD-XeB
%bq\E\3u11lH@*S)Q4<>t=$(tZkY(0m?tL>HX#`E?i3A\$Mp!CpKfFr2L!gNB$TBN*0f1>G\.3h04VKR">4hAIN2:NZ.FseMA(6;M
%;UBsJ%ji[.`l)E>%;A\I"e7EPOd(Yej-2taUnA8p5ucj`.8)sl(1PPiAi?ec`WYC%-*S$C+A/ikTgS1'4`%e#8;A*)8Ic\GG2q7$
%fe0t++X&7[$"REjPYXZMC:A1%g;a?80c[icMJ\\H3or*u3CoWpPg+F)>sj1`pY<dSlYIMHQK\R=6<Tf2@i3(9)Q>,e>0H(FS`3RG
%[ZcHcUgrD@&j!;)BY4L?R3%WXWCgRWaZ=055j4jo/;V.X=F+885p$-9WDA<E*ppFfQ2rqT'aUuGAZ*TPLpPRN`0ft547&[n#ksl,
%JBsMORM*RF#L?MHJ"T/<Z_M3d(/uDM?T:HSU;kSbWC0$7i8E@)@fhKJ/b*ln$q-$"Y5uU4#:qA?1iWUD!W!klm.Bg^"G^;?LRYgG
%[U+?aaJ[XA78TPc/ftV:W!.UW-2NUF7OrGOJsnYs1cXS+#C]S_4@THCT[#[$!9jZ3'VX]#l.A&pE!!Ym:$=i6Wu4TRYdeDpgDY'7
%2mOA8<HT#k$29_5d&;Yu[bZcM&g*h:?-I%gJkjmRSkUq&P^`g:@j&^VO=Bck*(53<$BC[[fc]S=JH2K*"]\cWn[+f/fpbAE_INaP
%O?TH"q['k+W,+_IhSmOI+`R;k2]^+m?!X>%huGKP+G#e:3?t\8+[B\'K&FUj#4=f\.dGteTQH#o[&$+%;nTV8U:?"jGjH>3M%Y1q
%hT@9qG_SNhI)0GV,!,6QaTerL+Aj4,XUl2e61DTG\nI(G4?Qa&NhPfiS-PitZ@u^5/qsMuX$U*F:a+dt3PMDa?nO_G>t\m+JYI%]
%O9CG:#SIn]X/M"ZG@QQ*'7A(2cf@]-,)"*3&1u'3etU_pLj*(O8k.hR4g9/34k8rJMhBYf_t5hpoWa9[ie<M<@!`1k2obdjAAJWd
%9m3[>7I`E!RuI`a29Xtq0nT!?7^=R+$H$hH.%4>o@P)hX*U*);0XhH<0k'UD6,P$@eAf+)I5B.NhMQ"BnS(*<Q\j9%O-@J_[b0:E
%,S9l+#/[hVEC#==/H8XF]["W1>!d-S\*<1E*`ZE`1$tZ)Fedfn=rJ7&fSFCk)<Bg&*Ggg;'JFS;"ECSU=Qq5PTrMsRZB/md'8Ril
%A45ep]hQt;$jt?<V(=;,[Fr9F#)lP0>Wu"T<F,&u3k1eT\SqU!*!,':9;4'aP(F1&W`O=[:)",mCnt8U%X\U'.Mt:?i3FS(\9K*$
%QjrWg=4guTNB8F-gLc,4?u`i9(-Y9>\6M=\C:QGA5nKZOU*mX=P(C[&58BuL71Hg7M:Zkhlnooql+s!r=3I')<`,#r!@6j4o1bAK
%Y];(=-n,@\#pjK'E8/8'9OFcQNs8E2jWl+ITIM\%"[.`e=kIP1fu-AqD:_?JeJ<+jS3G)^JuY'W(A+O-hN-J*WtM93Q27c_]]d@k
%Pn4Tlm7n;-&t<2,\r&G%R5Wg_2t9a[[QbEm_$'RjDG?(mLm`&pc%M^R&]'-49_RMb._Zt-@LLhN,CGa'i=CQk:F63c(4fN>ASf*"
%G.d=4"6OGW/SKO+l/=KoVFiSXg;b@cE`=?"dArA^Pb@chdW9&I<##p*5FIP3/P+%VW'ZpKd"m67XtH?U-GKTu;2<L;S+&1ZQlV"0
%K>jl<h3N_V<$AogM6Q/',`7Z9"U<HkG=(>;p$n>d"[^u0o"#IQkFM,aGJ%#6V*Q?3A`;LMKa3:!Z&^$]YD3AYM-:J""!,ORBMLlk
%^\BdFJmst_,$6r-`9h(BMW^#e,\k_C(F;Op?^O_fU+M]B"QS%Y)f/^tIV%;&2<hTKFY$/d]Kr/lJLV9p!Ya4h$A&5^n3PG_]9>HG
%n[de3M3H:B&2:=BBj#489m)-kPdG1&'c6T`5!=OWP7*^bg+cQ(<2p:ViMWDI$WV&U'E',HAi.n@iQ?dAI"'8A6+7\MpCSYc>t@E9
%L1;(mi8[:cO"h`kHj\>9>c:UV]L.>nX#KO(+ZlG!2M8_R7k"[1"_k=Ya"T;\a"Qq\O!UslV2eb385J!&39E[@E@=e]_OA30!0_GZ
%:N,$3V"^"03c4_\<a_&C9E_;U+_p<s#Qn=TKE1IA1@b/t%A_RNQZiX[9I3,,:'"4YCb%tK$7MsqcM?BIH:#_r*/j:3k6(SAEJ.=,
%$lc[7kfG)N=-(bp`u0]Ea@8u69$1Ck*S]+sMQB3_*>Vc:kaCL-LIqKpeHA]jIeZ=2$%RcnnZah=-@^X%)]gSc%nHDdMP/@.-ZKh3
%+8p6UJqa8"p,WV0^<^B>(#Soq+sIN2KZd;U'"r34YWNZ%`]tt04JTcR]';OLC(Oc4oGo;/L/f3^\g1\P6sC,aHV%3;K5-S^-SPsI
%fE"d)Ti;+1/(tIJ5%qQ\M)p&?(e5#gBX`7SY(<YZoDr\gL\HeVe.q(Vq,Rp?W7U3j0*6e-n4gXj,![7O*!![bPWnmF5QDsGNaCG5
%MQ3K$![Y\r&s'E"X^[Y0ZfmIs7ifi67e0Nc&Obj)9g7;ckEZ*c^R98@71@)_)6OW%&]6<,F(e2V4fcGV,3W6M)^PPX)TjpW*H"g/
%oK8nU$$`3oh>^F9N51\R0C%gW3W1+=Z`)VM!N".+Ho0Uf;F!Zd7;X'Bn14=`@:M2][j[.X'Kur0C3tCN=#!PQBQhY8=/53o*qcc4
%2-lrB*lUK-HpO.XCF*)sY"."Xm!tY_d=VcpZFUgi\$hETGX7T9Pmt\"kd'`S#(:h5hA4.*VZ\aC_8gO%4d@'bP4<QW0\Uc$'Bk@P
%5e+&]iZV[?FX[Zl&[R'kEt[KgdO?D+JnHG>DKuENiSkkaW[%DVCF)N1(66aGlNGI01!,er90uLR-(S.;>N,e\EghNlm)F/"7Y?TX
%#tc/9_Sr+^BCEY+nD0ihTcC)=Mmhj/LJeVC@0Q2P,fI;`8gWc^UGdMP-&N4;UH];qi+iQ@_H)GQ+a%r=(oK>C-J=8[P"=)48LkL7
%Tu&qq"5aq_?],+;-JKN6F4hgY/Z8?d3+`6!q;ZCuR=ghPg%;C0.dBHH$mJ,(jS')%gM(Y)-seesT9_ln]WI:h#&UX+PL*t@Oqn(h
%/:5Q5X?'cC[Z#2+4dff7B3Zu$XdMh114;pAjNY*cq*i0[DL;f<i3AJ6nWYN<#6P$5</2S2<EntV$[mE!\#PaK._ciC+#jq#p6faQ
%;*f&=,1QA?lZA=U<3N<=D5(\d!3oi'AcTIoP[3^.OhF7,$1VtQOVnp^NeX^_WusU/&fC!#&mC*.lU9Y")C'F%/2YXZc\RojgQjCD
%&Wb8qkK*`0+5@B/2:#mf-q6>5D0`E(?@lprp\XN-R.d!UZE\\=]c0p^ArQ-Plndn\D2?=d>uLk^8$B+PocVY<1/W<*^fLUtlqdaH
%1N,Yl_IubP)0]6^^sW65'saDP`>pJCB;X%N8!OihU"FHWPJ9Q+Zu!1&LeicSV_SBYNM2$.9<cB%fn(:<nDP.+C`_1>rI>?I*`^k2
%9ek6l%ZEfdjCI@l+MdlK]ECBD<8gajO%W9N]*Y%%pE!5G`O>t23Kq0IK>)rlUG#+,@Lt[^9D:L_Pi*!!r-ibl`RfY!^$+\;D0Ear
%S]B>;iY%etZM+kcUr8R+IJ,-r%T[)4.QIac#O"<RHBa>K?N"Ia!lbTkIK#P$*%iJJlj7-I\[:P#OGe<_=`fEs7I`".J?KASeALH3
%JM2="%(hQ-pDn'+LTdtefir4U-,])#'.iA=fCIoA"TbBQ)"aC\6=8M_`uoa[2g^EL6#eaVp5Y$iZDPTU]-\Ujcls_>Y=;Bb<mn!:
%<F*`_nrImp*CDREa!DfWDAU>R#pSJ!!Du2iJ+#+?><@[-pbF.]F/c)a*c"_PK=s,ZqZq0&;A+gRDgIu^Q*f=[U)I:6p5I'4$9Nk=
%SXq0bfb'(@(.5O'7obI5(XRf1*DoX%_soVQFFc"IQ1)ZLQ,`pE@Rth;kdVY\G\@bc7f)C[a2Z^PptVrYO(c'D]IFT@n="St(k(j0
%^8dHci)3P\_H5'ZMrtG)QWSk@bi(15j4!V+oVe0D'F<#?"iR&]O]3%@E7m.?Pl.U"^=S%P\q)n!;haL141l\5&A3)B"_r)c`;?C"
%,u=jiI%+=n)isQq'3/3Mmhk'qs!fEYdY\[TLUq1>9%YEZkS5K?%I*QT%SA\VfaIS=TsDCcU5iop#Y"9p-5CGE+pVJpiVJiIg$"&k
%<<^<RljRK;$kr"I%^\g;-$/9cUkM:&[!KUV%.<6]m,fsWX=V*S-U>+LLXcjWeH3Be<S,eih6hWZk9[k=dW=*j;=qkJ>boE,MgG<d
%4hTd-PuL"r9o2['0o9=rae#949_PL23/FaR@-7Ya*`SN_aG./k@AKlg[-:eU]ECd_VWG)JY0WI'nKe6HeaWhE3scN^94fJ0!XIg@
%KiPoCJ]-q#VVhqY_4sV>[`!$.DS.8%.YPn.=qHnmJ1l+NR(:j`TMh>pll]Ip)$^n>A9BJ[QT=m>S^rrL*N2quXhEYY/LQtCe3r1@
%Md)O6!`if=J;7C_mG>.[%`AL1K=LYlqbA'.:^7R;6lgFhW!H'tf7P,+\eu_a$S#tmkC9a4@^FiQ#hY<S";U2emgM"O9G1='_`(XW
%AqFR;d0')?AOnWerqqoZQ'-]tq6'ASUP&4Qe;a&3ZS+enaLuJA3"gDSaR-l0pl%@(2W2>8Tcpt!&(F8loF.4G+2I!45oK^,\C1u'
%ja=sJJhG:&lRP)C&"0-;01Ko?J3AG@n`:;iT:b4l:j<#C8RF0TJe2bVKb8RBJZYcAgL.3F;_WOhPKQu1Cl;T?"e@p"j!RIYK>L@b
%7&S.i!BbXFZ0c8_MV;$&il`=T"GRG>d[OoL](+h]:#]/l9GRs5_fnrpC8Ege$_IVl8kTdr#nb^q+DtBSH]dOhW#6a>:oTINA@_>9
%Be?9F,cb]HqXuA(+tFr'5c)&\(ZNn#EV4"O<=Yo+C,M3hLn'O(cgIX(ceK.ZD70QLZscPZ"s1B(/.MmN+@/[2[!-h#9,ntI<)$B^
%+V-\L!d*?Q2Ob8"H]#'%DfN/,<a>cQ+e!!;32OlUP=,eioDkM<Zs6U4l.V'=P.!?h$L4n^"t5?^fH<p=)O!-EZ9d8F<,Fpp9TMfg
%&rT=h+8@*?q<]SBoK&OC4<3?bpuX>:JT9ADN-r9u^e?utY--@O;@Q,:gp`!1&DnVNQF'>u$Nf5[-6WJp*AQ7%j:i=&]^bB3pbY"C
%$l[IBi12-<kFBZ^Ko[A1Dnlhg.0WFNO,+.KjqNXG>@KF1'Na`#B[M[p>.0cTi]n=r8YUHG*<U*,,C6bUA`.#)K[*+Kh1h4,jVi%j
%1<`id#dMpgU@5b83a4dhR#jV[D,jF-\fZj?0o0b<F!43+J\6UM,jY\6oF6fp0ccT/H;W+*$_N(hq9hp&/7?j[fKuj#.f,(:qT]5.
%[ntV`4#*\S\#j^a?jON'ko8M-0LUCK3&9V5A"]<hkI/<._/.J1pN%`b&32Hhr$$=$*2?]c\%-"-JSsNcM=?E?gp8nK,m39HA!k:W
%UIr"6F2o+"PHp!?I2cOB8=`+I$"\hF+4LOq/I>6"6r_cjJT-28fHTogH;L^bE$)"^@jFLn[@h(;(FVl'JkG^gBdJsi)au[[bRb9m
%AL2^TOmlH$EW:g?Wc=r8?oE4dZ+;9+MD<K?:/R,Sm@)j=VLW/E.NT1Yi;Uq4%M=QZ%abkP%\MKbrm5b@3ukH,nV2-KL3f2B.[gqR
%h!N'O'qceA'<X8JVl'\uR@#mVH!2n&?'(ic/Y*Psn/*3&CIIq_"M#%bR1"-#><CN]*1-ti+cuk+5a2".#9Qt)DN21kM#b/MpJX>4
%Gq2:MWM\8gK1\.K%o2bsk5W3*[qW84=0hbd"n`n]Uk\Ueoe$^@9cG!/Zj/M]bZmnMap+IfF/s7YhnHL!KVVF^jmgP/Q[6sG0.E1?
%9"d]q(fOd0fZTprG;Yf?$#LD78Y5OFJTX_,OlmaDP'M_+:3m*KRAV7'G`&#ZPF2goQ76_`<]KE([usb8AucpI1XG;\M0C`0Xd27d
%<D7RjUcI%DOAd0V9Qc1J*IuFWGtrIR4[OH'''jpEjtsQ?m@EGESBm47A:L5or,mlI/Vtf"]l!V'6;3%^js_;79`!VEe!7ju/)a/6
%XilXe4rfu)RWF315Q$%A`A$jJ9taR.7gS(D9+AsCXj5E1YW8<L?^X*20K78iMe+ZRo%$-!P!W=.7)=h8H\NquWFK]^YPD1DPV$3P
%,JQP@(b0E!ME;0CiHPdMV25.,`PZJkO,gXU"/uce<c]T-Y;47hJ*RbTLF+^="*?UW0:ncJ3Z%g"6_e>^6LuF"]+93fI0eXY3=qae
%ET8.hQ4T)&iab*.>=bAJ4f!joCOt9kH`(!%oQ?=B#j1[jCh8j0)N%RA-C\q^b$%=XqDpOY@GYKrWC!!speXD9E5B=he<Aa829qq1
%?GBA4pk98t+%q:TO1W<DBOYL%Gi`Q1b/M7</N:/G\9XmOksfY>T<9XiZl!E%Vi-jB>M@N'P'co:9D7cP?3qFN1#;(abP](\`tFZ<
%$uE[O(9LDHr*XDmM1ph(0*lE"%\"%^=HCC2V"b9%Edbh%n5LF`K:4Z<gXXnJ*8DoPKN)Q-BXf9));h@?IVfCP9,1d!#$Ct`q[;J#
%)K0Tsido:0/&L%PLXjmL0:qGd*"O;JW6\cd0;(8X?r;YK_1>QBYi'e/\HB8h"80:p1fCNG!asY]8s&A;RXMZ@[J+?<e8-tA(%>7R
%3(,f2Z#0-.?1or"pFb&&(h^/%EO9p,lIKm-9tF>;Q>i]%CFHS^^n#A<ccDMl-,>h+@8kHnX4\us9JPe=S8L2G;cCOKPm7Pjr7S>5
%L:8lU$DA!'e@=^hVi:+5BF6^bqSS3$P-5::*hK?Va[5*r8%LS7/E'8)>[5bkcd_;Tc26430m7;PMer5'B]+jfm]YS+!2A?n6s+bN
%(t(oB8/T)eUHknGPLk`,$%;hgqN)f%&Ln=+.9$fQJiVCNi!fk][u8j.$Juf0%G245g#&9A;VQ^&:+LAU^!R6M:tpJnZ<S6s"r6j9
%V73CZ9\N/#R$I@[@"oWWH`+,mY_j7cQ#AKtF`=sp-kT;ai1U1Nk8#<G=:g7=+MH+3deIKJ;[7+?@NWZ#kmIT0341@?"(RO];&+f`
%)tTE/a;?ZdB35#N(u_6(_Ul&FR&-)D0h/ADfr0NoZ^=si=c;IbL7nW;LOk4@K<i72=b:fIn9MAHkLlnR8tgU"6CHY(.84%[5RK^t
%'rGV$d0Vp&MG3Y'^<^4V">O`]BOku"(AnH?q:iAjko<0/!@MPM&Y1mF_"oVaC`=efF+RU4p[nOQS!lC.l/sI8SDCF^P;&7Uh!j;M
%fOqit1:Nk-?,\N1(FNgW$hBG`;X@80;Ci66:EMF1R[s[hn4*dp@a.*'>M9?[I'IOr[.aq4am92l94n@\;n.0H7$lnebXNIb+P^90
%lS6,*Kca$0T@j%&$Q5J&MeX"*\"Z-p/S[RUQ'MAC'2>XZk7X6Sr$BY<QI+6q.@9Zt9uU-67gRTC,+_B7?:VR6f]I9Fg2VHY@HnQM
%BCjW)nX=ZJ=T\`1ecdF2q+bpI)/ie7;]a?D+?[("4U]T6MX+%+<OJT6Y%k(6Hci5:3&F,uc;6\<2iV1'8=?cd?9e$'7O_<qU64'/
%(frtiAEs+p2O&c(F^9YCZm,Y9JXWHeh;*5BoF'CNVI!oHl=GJCL<Y;IUj_J#A#ecXFAh^Mg6mOPRGB#h"B/3V?s+g2ZReQC:Fngf
%+rBK6g>K_a&4L6%##AJ\ae$C/W47++D\`(IXQAP?=U9*>n8_0V4e(0rNj9GKLVBRuK45+iF#DV.>jt;CTonas5dnf--UIDrL;cg@
%G>[al,YY6_f"9ph_C"=PC<Dupb6,LjU#i+r,IXVLN=sRj2ZcdQU(:J8M5gSQ\[%[Z('Hr,Wbr7FhN&QPUROe=6LqjTB_([lOn!(^
%X5BXMH((.mU#phH9Ds!J9YB(EVgpi>!jBGZ"BRD>n$i9*qs2u.muci?kuonF7Q@b[H%7e7Y"bn:HA&^b1]%bN5W)0;1K?J%PC8@E
%dCXW@'%L-:@8$f("j$>rMOlm(kVsH"F1`n1:[ef$2^ls\FhL\hff>OR-K)cY#=f)\;49NU%G&Sn-6\jJaTX3CR+Cj6_"21jB<(bS
%Z_U14o3S&+@-.e!ltY$Ub5=aLTtLTG^s4*6P39QSOu*SnX+C]25gV+'&@,2B4S$=S1rsna)em(jD`KO11D&PH^&"f-"LTOgC,#^(
%1$Ueuc1dVP/YWc'S_E'WmG[88'Tq=(N+6pdgZ+I&gcDmAphmf3XB/lc^P`(*4"Q[VLuVMo-3E%`&?5bd[c*MbnuLaCr<@Sq2.hn<
%UI%A=[YNVdq^V:4BLH^=[m?cRKL)+eG&N:G#:DuIi\"*;#k1*;ld*'<M(g$<\r_mk-g#EJHDtJ9=B6N3aU8KJ`d!;0BIYcYT,<N6
%qlXD3c%2:qS!dCUPNDd-l.TsJ"L0U^]3l#lgK7'r_UN0cN`;Z@3as!i;rIk4+YRJ"Ms02-@O!*O5fnTG[LhlO/f5kABoO[=c)ee_
%XM_"$9Vq25b8Gg$;6S=?2kpsIlq3EsK&14LE>F47Pt+:>cWhsE=E.LY9[si]C(QHe_9bjZbGo>.BbGie)Wh=D7D#"Q9a!O'3+:%Z
%jeO2lT1B"K0P\0sNON%:9u=ra:@3!;M'*\eW$[+sDFgl-Lau`kp=+7j?HV>VK2C48DVkLJKsKUN63k&-/k6$(@ArVu,R8_2V1a7O
%`G@*,d$LWuFC0QuhGV!s!O8JSNms'HN1'YkVWKSbVl.H;n#c-G=G2L8FOC(\WdU9.@W#%_h.G#\+kZG<)/N?[*atm2ZekE6-rAo]
%*2t@e*[*Xc5!rO#;sKbTnR0,^lV(@dp<"2FcsbPQCP/;@V2:c3U.Ht3C5/2qV_1BN6/WehEB,(\9n[j]9LI;a?4!k]AK[1:S3d!V
%>U1p/A+CM1G>Y=!od2I*BpYqmUDU,4/H><hS!i.VIF.<4(hV!lf\b.5%!d4tMs(<VD7WO<\0;?4C9#Y6`0SDBE1h-[,4+bp[tLtk
%$Z7J4+aGVS3apuUYP*oDiEHakl1Ku:5FT;3Z9OhQDn4NM>-EVNh,\M'l#U40Q8sn5(%FNk(Y,`@e.jB`03A!JDI"5t&%ND2-sT%/
%m<^CGqTe%(TdtaM)\kt:2:l9L(s4FAP6K28.h#LKjOS";^":&&\D7ce&^f5SUqO[ZmZ?H#+7u=&IN?XOIYuqd$OKC(&"F_/=\tMA
%-&Jq,iqbMg*[-dqL@T,Pm9%[Z1t`K#[&+(?C9oZ;+k/Yqb^5&(ct'UE:XCVf7PM"8K1%.EO:&#e.mPS)fMHNdMU7#,cB)rOGP0cn
%2@p$kWa:a\%+-H:7%m7]`?Z?YWp57?ls*Wf<L6R`)Ki0j<c&(HD`!>,7%a68[>#R8+sY;GaUs_m?Q+`S>D*k3[T]aE6Be<Tl_rm6
%hHc7f5q?([`G@R2V`kIm@R@$?+B.>Dn0.%'i@:%_dJ_NM^QK3JW/V_@AFhBb;2aYu?DePuN)Tsn\t2B"oH+fj)u-nR>;+!1J#'rh
%JM?3l[,!JZ7`NDEau@rh0GfGE/$IUH.MR)FT,K')f']c@//`J`G%h3k"<cD3+r:-:36[u';547r600'`BT(c/V(./33-n!V=A%4#
%4RS(f[9QHXQ1474_?Z&UFp0:'W;6k(9I.9=V/VJ.20t&<=eX2\WAWS]<m9kB1X/fWmRAcO<il?sY[b?mD)eT/6S'RSYI>=`WOA.W
%$;9jTE]^pc:3+'b=_Keid8<,@.r3P7MR.slKfP?`@*]^a.<LY9;H#p%]e/VE*iQ'+.H*tt3aq7Fg6s%].D`TS?4<H/V!:.%eT&UB
%GiY2Jk^040dNksk.cEq'b0[\s^ET]O$am1+77-g,g?)Tc4A\T6W+OndfpS9f[LEE5rE*u$$FF?#df=%EhYVkE8@gdq.-G4S[V2CR
%[32W8U:,cL=MmJmXRA)PjHg0_3S[>>=qk;^+I;5!cVY."Dq)4*haGr^oSM:FKP(iB[W`(VY2B`5^1-)<165ta26[?`fV/LR=;9^#
%l?N%l!s1W\7%/R9q9Y=<A+h@OEAa.mj!b#gOYD'P?$=@*.#Vj\J>lWS_+oV:S_#c8,8<@<&@!cZE@E*8kBtidS82;9e/07\N3?_u
%0rkNMK8^<8Zi>7N13]MTP:un>+X*#dK'Y<1/Q-RO$4SDAqF\9-g#W@r4T!PKh,)1[6?j3=87JheWedZS$<Bjm3kidG!K_<rl@$8R
%10g%I9A_fg_hfi$8F:@/)X$8s10kot)n<A*U:.+<p(K2KaK!LQIL[p,o+bqK\E_!`11,'dLQ,#oph^9=T>tP6Qpun8e/G(ckT-$q
%<HV/?q=!?BV3WOH7j^`J-eY7J(9b:99$I57,hMoid]^oGb@XhpOUZbL<?km.KL=^4/e?19ot^YXA"@H*&e3LUL7sB-leZ#=C^,cV
%j#TE)V$\N_gFXuk*1^c1=pk9=3=M]KLRP5BfV\LL=qPkff)_=;Y2%k_C,i8RI5K(CAu^H-BQOp;>Vnb.D0Oip>&^P"b^ZKLB!&u%
%'ZN+[QSZ#qnB;$u9b5`QC_^oBYa^^$hs,?]WrUmD'b9$Umql$D2dL;s7EAH.&E/s-60"f+,gj[tW5$3OOWj6C+[@UF'B?d^nT\6;
%m.=U_1P`aqUQ8XO-,]_`Lrg+O9'_995l)7#do%GZ3ZQJq'&g0M_oN8p>jk*D>c[RnL76f-]u#LbH5+NBe?B2t!SS(6ZqWo?h7nUH
%D>mP=1H"jZXD/?j2s^4pV]#"_7I3DKd/_;dK$t/5C6@*3o+B:</:rSTCt^IpNd'po0K"jD1#Xe4=,-u?MPP7DD(.rm;J>?`RKTQt
%pF8!*FW(r^dC35s6F()ofS:YS\XVRodc\??c@[=&6_4LSM5FEO'T7rkVsn&SZs1ML,jLKCIp4X=mGG'&kZ]S\q\mp]R[L=A>V])b
%NhjphC&C&^#e/M!o!J`8f>VgR;J65Ya+Tkm#QE.R-ik%h!j=cHFmLL(Oc[0#T^8D_5ekfMAC9(MfeZ5,O&5G_O/;h:3>PCf1:kHB
%1eCAQ&7DRXoUa,YT!)h'bcGHu;*jW_&OS+(l^=1C(b:\_p*[@MC$%WYLMus&mT-M9[3aJ@\56.fJHuWofL5[S['/Mm^?PDBOG/W+
%9EaBE9O@sYq2k\5#5XWn^569Y=$dnTGtq_Q\:qqD?P8r2.:QKG1!kRb;^b`)/$*CA[;&"K_-*1_^)??@CV:A+G?`%gf@@pUN\+`f
%Q,6':m.CYHgp6-69aY0^LmXq`;mo_4NB@]q9N;=,]0Z%=`e-&jUk!-rZ\k5c4r8?I'N$IT[pK[JH3b=qScQgLKL8&s,7]CLbZ^Kh
%o8RC&$gD/.a-J_ZQBc[F*8.",N%XWF^8Jr^EpN3SQk?*/9.Q5Q`V4\,8,3%?gL4Y-'p5E1,bnEeq"7SA5>HmeD6sVXd*p10^C5^*
%&%Nq'G2OK\P/_;;)`Qm<Uh-P9s3TtN]$l]eq/p5cZ9Z&''7u360$iHf/%/jmZ@[K.N9Co>N#4r^_[lrL'*mt0&LS,2c`ff/<9F@(
%OQSEUTbPImdnl)r1=.768@MjRd?YE!]e_?1l6>,[0pHnf23Yk!T@!j5=c85O^0'1lU!"f)JX*68jUo@&6[*kjo(\pI5+p8EnX-rg
%)A%".4ST_f49Sr'<F/1S9g[g4_T6T@GfmK4TdYm[V!7n7%0OLV8n0JAiRFN]>SPJVTeKm`Em,FJ@L>ro!b$8(f;WEHa9=en971;Z
%0&]fOC"!"2MfB?(Xl^iG3T%mJ[N>>GX2#W)o&Qnt/3!6K!0n'=,/+:G#U&Bs0rl;-7:CWXL@R0rIhV%C8VJdLHkQ]Q5JILl6^)sm
%K1u9=0i[E(M,F_t,.2BSYJMQt[(i*i-5t3Y8Y$)<o,E3SXRu67lK>'RBLpR`P:QKLi910+QELC?I>_[1Hl`.2+_mo^q%jq[qA+EI
%V;c>5C_PcJ%:=lV<(IL6-+diTY6.>0Nl\QP-nR&Ya6XGB@n2YfMr`<W@rCo00U,a.Ds\D>)GXu,I32,[rBLa3V\_e'h?Tdb=4c6B
%qna3cP!r]cT8"OVRiE_?222%Z#INU3^a'9qIEq`bF?S9NEG3]Vb_<8259#<uor(e!Zm7l/OnX8Tn^iN3/QnhKI#PQX9_*19\4+I.
%4%)+#`E3fl@s=jG(!peM[;n^G@.__`N=_h#g5B3:JPt9^_Ob^>Mt;ph!iX_o\EOP`DW:STS%3j1HeJ[:G1PR!$>2sNiGA1B3Arh$
%48iiZp[-8KpU@pqn]]"r4a]*=6u@W0C8tc937A-H6ZMD53+0Obq$_+hLQfC;+/u6k.c:U0i0!XCf$rtY9`_\b?j5pGJ_]SY,bPR_
%q"QVkHUA*SMbVO!BAPF5E3SY+h,S]Tb&D<qpAJB1SGb7Oc*g5(df=)W%8X`RG,F;BD>WsFZ9U9alU7E)P%KCK&jgSXo1jl^PWll"
%KW#nN3dXHL6*X[X1BU!!HpL"K@s"VA2("!j:^E"de7+4<TgX^c6U5,.pI9!EdLbPeVR@(F4Rphpqrm,d8!lRu@g>"hMH:l]E<Tqc
%'ZYf1TIl&B]tm:t1,S%\$/%JMb"b.fjqu:@W^UJm%YL,'<:tq/MF#i>\<13>R4APV/%:s!ar&pQEQ$:["^.>&&W02V=I>WkFRdOT
%#672NA4NWNZ)<s`ZhZUNhtu(T698HLF25DmnVJ4PhcT!m3,$;PAu*RpjK6Nn&FD)`T:6O$$XQ%s6i1%.Q6LQC;5CTfAQim+T\&^V
%%Qdr!,0H6'I`C;tk^N0(>D(*cFr4A-cdW@Jjgn4&p2C/o9)$/E6IWaslNaWr`i?qEhM./VOpmA+&gbL>Qo!e3A(6;u3(Y'$\,drA
%)LpL<\`^aH97hQ<HT\*GVnHk)dAKRb<B*C6T>Z'_cl6\k'W)7#Zf@$jF@*$'a]hqN<^lj+C_WXr7(,!,&94Ac"8e(,1sFg[TS+aA
%La*]S/n7\Hnu\u^D/Ekc7i7.tFh^BAZB\dq/YM'm/Do3";-U5(_O30TG)CXcNmQkE'ETN7Mf+LgH!F_4Sh7gA`KOnu.NUKI=VUfs
%$W/H%eZI[6K.*Yl[TGpJ:>sbC;$BQdDXb!@B&&?TTt)G#3rH'YmLU^7*2P$2MfN9]2=OrmV%i".4Hse%Wi/OW7'feWL?DrH]j/+u
%GZ!8M-ZNS2mdt8R@!/9RGlhjGr$/TqXI>]ZWL<,VM9:Z@^0B2g;\L=pBdeT>40Um+DR3>+NM[/\7DAg"Qe7i]RUGpSgD;c@]b:+*
%U#h$8","+7QUi0`6BS/>2b_2=<n0\3n2#miY[Ej)M>5j<1M8#P_<a#^[\Pm8oXQVh"JrVo^GOq;`#5?6HQHlS+V,/Q6SF9_NMXW0
%Rl3DshP94ip5]mWXVmZng4[H"P2n9E)KHB7#&oF-M<KQ9#>LF+h!)4l(CbCE!7Y4)aUdd46\e#37hN,],@8E>+rr,\7Yp6DQs#VD
%2]?FXDUQV-:NVij5*l*3>abJn;d?"gVo*I'G#1/CV,S[K5IaV2DFYiB2n;q'E+KA(@PbTIi31Njj*c<\e.cIR08cEAr=J"56\?G>
%TL+oma!W_7^5jT>g*d+g'eOHo$?<eS0bs0r>W9Q_#,]X14;`\'0/>'i@EB/Dr^@^[oc[a@&/Vgu7KY,p/m8BH[@WXD(C`@La#-TA
%ps!%b1!WOn!Gda4&G&4+4^!Zc/J_fQ>A-.n,r][n@X&FbOs0rNnX3j?;t&3lLihV[PG?):1oC]BY`o'?qR22e:B%EJV89BKG([eU
%i8CpiNTp9VBj(dH/<'?._+$iQ93KsRZ5+]oT3/YIcrU@mM:EYqiH=K1d\@/%61L&#[u2H.BrIt)+MX+-QObe@]oT#gg2UDNk;r?W
%X`&LDG)^S<hMj/-pjlATdlV)n/A#s"T`.`Om?qn1<s9LlEctn@2UJfuFroPR3(?5`N?@hZ(7"Fa&o_K,H(+QV)F:L6W0kh>/t:Eh
%K>-28^dUF?&*tg>-],an7R*>RT@-/ZSn>GV)m"=(Nu%&`Pnr2U1J;tc%3D=_1_,*Tm!NG\97T-'\aJQS]%(V_n3D!jUToEp)kX)Y
%@1sQrq#TlSD*qlfn-o'VnDoq],Rt%.H.q3,/)MLDGOk.AUcr>&s-P4MF0aV*KL+/CXns0>CKA6B9!,ag6W=YWL.MOrcX2+I\#M=U
%C&kss=.QWj[fR$I?sbOF(WB?Joi:#EnT,Yl0O@\2kb:/uR;U8J@-*sI^W!!Q$)V<I\n\YkEH1]L,-o*i85*us?9\Pcc2c$/XH+?4
%B]1ZXW^WW_W&@n5`WhP3(jf*s+NbK.,N8kdHPA>KRZL&>i<q,[M4o5M;:?9k`]_qmj6V?HIOf$%afgAs-fcO;M_dmGX4BjpdN2F`
%l4AB/[q$!`VoQ@'BYgND_P8+K(\lHHqCRN2PkT2\YD=ikTNdp'AjSN!*[Q)ESq\4kS$q7d_))aW#Q$/g:dS[.*/b>r'Yb_($A#L,
%MAi2l"R7DFeJV\k*[3`qd/Hn\_)Zn$Dr[RhbG'rW]R-HLK_Mb,?ft$t\E,s[)s<Grmi-Kh3P\ib^lfpu'&h"-5TuVu?If_^(p6##
%>=-+gF_X_%<bdn=VP.Ho8bH,j,IJiM*H$DW1UbI4?I#/AZVcNsomJOr/ETSN>@HMh,Bo';Id@_f)c^93j)%+&mrN>'93YphPoc6T
%[L-AHfhtSfTFP)-Y%L/d;g<O\cH8h6b04%mK_*_pEU.J^F'ltRYt$:"GfjEU%<mW&mPl@cGuC:$qrSN(lQB?[8PMVY@]Mfd#.*;]
%aLs%+<+]hXc)89dj/Ndub3@>6Mi6#QUj]A#i0:NT(LV^0JTt@k[5R9hld!?_d>,G2X`BdS0ce3R81Xq1L(\#V@6o]?p3U/%\3Q0I
%Y_F@!IAEI5rJ'7o885Q((<H!O)0'*><0/UQN^_[NdWD25>Ih84O"b-4!NeD:1^tkBUu;ekdEE?1WBSqM=o,.lT?Zs(-3-rKS.Tc4
%i^[6/b*)B`YRZ\fjM_](4L?pV+kn[U5]fHs0B",RU8t&C%:\V9WdRXTWeSA[rC)CUUi]^^ctCHcR#g5?6>Sk>d\748AVgo!-6_/D
%/d<u5\ImF,[jLf[**pPOnD4q-^N8n8VCL$86kpUGP[VeD,u&&'1:&&GPUN`0J`^qkJf]#e2ES&Z`LHB#D3\`,,:lrupfj#Dct'V&
%P;BlCn/_bqX:iP]V?q57Sa^J>DJ,H["K^r[L]dH(T+#n;!HuFpBO?cse73iU[_ZSL1IR&-HE5I+Rb+o`"3XQu`RoVA)+M-;s.rSS
%4+)T)L0J>Ip>uck0[_<,a;;L$I#\B8V"4lPg^qt#<V7i5K0='Y)O<fuZ3>/GC`W"^Tkud!]MR,<#]7I:hW!EVC_#RPoNk_qLp(`I
%%nNq#8\b\3:emAqm7t*>$f[PUDgu^iOL[b.<(]T#(5-'IU;p>)Bmm$Jj-$)nMk^'XiRr;h4?"(mU;#_d$Y>D3D0aVt@E&(6hT7JZ
%Gsg/sCB^]I0qHS_3ct_7-<RB7]%E't:gplp1_%35iXNa/n^1g81*AVJ6lVi).Sf1:M6PjZULPb>FcR_TZQKAT@AJX<("JFLWe]Kd
%D;W:toG4?a/p:`DZnu9ILY3i)CWsi+TG\e_mLqC/K9q+DT>WQMm(Xa*N/l8,ABfHDlTJl4:@*%\Yg]o1X7l+e0+Y\Fs#Ac:mO#$7
%37o?=\\$oPs0uft<GPt5ie.be=]agNi9*>CLp^>0<rDuUs+fdT,t1MW"+m7T0rr#=Yqi7`e4h5ci,+E(?Jon0&?`c:[F.=YlG8`\
%_,Z!gR"iF7lqn2.qPIng]Sk4j^\3=?J>P`+.,(#J&qk#*6-L;;dUc(-\376:`@[n3`>S*<*obUg=])]Uq>cPir-e[""2M`o_&7u\
%._0LHfGpsGfZ>I,<OmaY.-"!WF\H9nM-8V#j,qPIWQ,>^2[ugEJs-j]Mr;c(8*#EuT<R8EK;`a/hg];Hf`QrF`Y^kuFmLL(a,rJa
%`fc,G/N0Ol)qE+4oI.b(rW"2#qcMS@>Bbg4UJ3l]lDiLc7KtZ^<3)`PZ>R*ZoZ3f?NDeN?rlHJO9g(,o6jD;lMP+.;+2A\kGM\Ep
%NBHL5Bg"eb[L\g8i7"KT$l9W+-<m6.D$]/*[M&FS3ONsU!<iF<e_fU]_q]J/IG%BWopLfOH<?t4G:RLWXcg#D1W<q-Y$nQXNYE(T
%TXFuL?sh70engUjVDR_i+3W1#850E"$i]@sjoIX=8%-_8:KmD(;s^FS/QVs#=Q"$IXus5"D8/@-L5B]A-YV7OAj8VlK6XqI=B.CK
%o:EC5@-=qI<'N\o<H_fdS/TAQH6;,NLPg8'i&-13k^($#@)fWWgN>eu5S<5m)B^jGKYGM2I:+$jlSAcTH.Q#2;>T.JD82T@_;Tt!
%(;q5jN!C<@'k+JOc*MMSE_IHpGJjc\7;BDIR8Fb/V0SD_mT:K(%a.lY9&Qq_M#J/`'X$uoPVQ(gTE6L&8=_pV.nPoNU0_dRX[khL
%l_H%lg'e>5/mfm9h#?h5'lc\dfVTma[c?]+;p<,2r$%p1rTq9?@XM4YKnh9`]MmIsb[?d1lo3WLQUl$3PRtpCjOrj`+sa+Y$Q0<+
%^e7EK;k[:EW$Zi-'p>]plhEZ!20-Wi6O$RQ\3L'fjRMTp@]1/79F44(8!4(+^&.<)T]u&EKDZQm-F>pbAj8UDP,p^8l$7eNIIAO*
%3qe#&D!V-T3=CF$4F;7(bd16t5G,S3phQgfPbC):m,(s?pL^[;PX4=KrK\,<5m-hL?T9@5=`biNcIFrnrg8<l,J']7A;t,dpkkK6
%(0SP,V,\pJ35aVr5L]6p`D8%<#]Ur9G_A6"XoS8o<'!\N#%F]S\lQ:^D3^lGV"KmF)\o!&Bph0];#Jcd(h8C1S:M,*K4Jg8"e0I5
%=(:+VETtQ>rSVh`*7B+W;Cq.>!l%XBcB%"IhO<7=rBW<Yc;[G]+3XV*GtPD'#Zune<Yf6H85AoBW)![VAMG'Bn9K(!_.Y8-jCKn\
%`(8l>#Geb"<!l:QT<!k%/,Vs!=rQS$NM-NbZiSTar_DL`m"P(tX*X%BU%;DOdR#]EIo)LeqtmukffsqunRq1CcINWi,A]7p+6&R:
%:i:t=C9+[53)bK)B]?9$"25C-0V#*oU%c%1fmK[*AugS@`P9'W`3,Q"W@>YA'Eg=";dE?@fVl2RE8K%;7d8OgoN6'uE2J?KIIh,%
%qXOdV94G#ir;G.^[>d*Q3($r!a9QTtFf+;<XgJKe`'PBK\X,9O'A<dOKEG$GOd[3J$nruWLKI.4U9c+.^7*EGPe$Aqb[^TO`q['k
%qoemu&629D1.DH,p,7cG=)mR[S*^P!:,df'8&gPGBg<4@?KN!UU6?@Wd-_T2N*"h;ni;se^u=WC5NHb]4aX!ACm+]r_oc%oGVqKH
%0POr>*TKWr<@!h&=+C;`F]s!8Dje;j+F#WMF>K+MFf)4`?IY]R'h89pQqQ>XN8Vm@NhDZRRG%`+=8q`k7;]_=$"ljDT<%;n4$o.g
%[S`ab1Q0+NY,]W.%V=aFgfC[ggq3SqfY#b55Js=dNt=ORS+rS>gRnA4pP$/QA+?Y;:@4OSlCOt(i>5(uL>]/"Y4K;AC<2*I<!5Q#
%4*cXKd3\dE@R+Y-h,%";Be/SZG7&D&?>X,eVs8"+>#VEWOuC84ORQ#2_Y7lf/%?2d((o9CR+bWqWmNVGMFj>]62M;nBmirsGP]]H
%n!hj0s&MIjfi6);o>@ti)/?0]8iTcE07#Jh@N;ra[cKsmV<f;g<i]*5&]0t()R3LJSW;26@%55+=b<p4!V'HF,fo3"Ju.q,,(u)'
%(YBAG'NX>\Ba2cUb<J;iN]>u.p&=*3g8:>CS7-?<)*E&ml:fIWg.(Xh8Q^+r;Ne,c%CK2hE.r[BB56agH_7A$4,*[9m-8";,Z`QP
%DJ>SFrBAW2%f&nq[GO_DhX/o,#qgm4@DF47[UqD9KI0LT`<]p;]"VDO$BYX'R=b[/750U:[.5q.5]!7jCeRQ'`c#O/^lZJW82<FH
%!I5JM%-7o86HBm$*$O6%8[*,!9c\(.-K9(Y".*GeB0pjtMm:\]DP?UUQaD?BaQAeeY*f1kGa0P'8HKaE\k`S4`u0He*H<IL^l:<E
%Vb=fnW%(Od).@#$j@Y[2/@2j?`Zl?*@8_!`&?C+7&Je&"f/JN5gqEVBL,*f-Q["4E+$)=d*F]B<3Q^V"Y@BeZIMFVIHRC0K&6C+]
%N1hJbaBQ5F6m0W"3_FW=bPf+!#@(SG\aR;GWqlmh3ad@H@=)@upe1c81j@"O'Q:/5Rh:p@f)ZZ\<o\3?C)X\A^b_^P9:M0ZT;s$>
%@>07mOgu>Oi6"f1'4TARnuY;rZ`2_tCCRBa.$j>kh@d<V0>STZ``JVn8"=o.bp@0t'AA>flph=QfHfuqf_'J$E.g,rL+uQ)&("?k
%Aj8VP5SUI6>ZEgOPMNYVeKAgAKYo-19kYL@bu)5t^pf"[lP?D&Q2LuhgUrtJUXdX%R[<@+o=hsH&(!5eb^P5$g$6N$^qAeAY1L$t
%doVPiUBB8"e)4Jge#`t\i\15sGskNgOgP3Lq?2p6SZo'#rd08'Q.d01^k6J@SlPFDckj8UJK!GmhUumAosW5U>.sS+j9TV'@6r-D
%G8<N(NQ5#@!nPC+&`UJhDm;_J^!&ulgBl?Y3\h9?%@@bIK*2ktHJ)Z63B2dn)Cu%3a(\tR%F,(OrWJO?o4:I"?n.Roj-Q+*HBV?t
%n$Z@$1-!#+q)C[[efK0s$Q]s8p1_L)Pcn"EGcrWcea0&@rG3&5GcGfbB/t6e$aIjtEBu_3<GeT7@:2HAoK)l510B3i(7l)2A9qNX
%I&&L]W#]VM1*!1sH(A:$ICP$**LD!)8.dLE)b\p5[%J9N<q[apK0k5IN"#VSBR4^:K&4*EBR96lIY?jkc"eBZEMT7-I"9TF,1;.C
%6'[>M<Uu#%IfVO]mf>+GN?N`3=<u=mJUO!rm5<NF"J-FqLU+_jlFt6+5p8uLi3Nmk@G5.";%"2$#[L.bV,m/hNY$mXqFoI1.CU&"
%aSO0k7"gc&XU<Blbj]8$.q+h`(PIl!R[O9h@h_OlEMtM"_3RO(`L<R*7_DIHgItB-7o>J/-Sj_4coL9KfPD`kDF(M_OT)3fc%#sp
%^6?!"13c(u?8H1GD+5mtSU-%_*$f-l'Qio!Vu1@Mok/Fm+7g/qm-dl@^FgY&39(n$%LU\d0$eJV03%),E\!Fc??MC7"/5M(V&7=F
%LiOkf#Df9==u(S*`%l;Lqn1!si+\n8>>eRo8gN>SHJN2,J?#&ME3"s,r4=7,Ip*4%`?tNXpD7T`-$#n*9s]?=IHuY*;`5TfKJ#!P
%h$[H:en11dVGR4?qNcP#.p%Ofe<Ec^.Qb(/]%(V_E2JQt)r%K,B51&C]%2rL:ISX3Bl$Y6r:+9!oY"0?jJc(e.H*h&bD:2J>8[6B
%Wd^b@P3%;kH1m<K2W$"CJQ>Y)ghV)1k)F4F+W)k.Ci,47bpn_^fDRm#!%"Z/3<o9H"-,YJ*q3XaCalNE<Ao7k\;DQ#:hBni_[i4W
%FLYbKQ[CXR,o2o]7p>Pu;;7$<YYjs9[EXLE^5`9h)o[T#/M3o@O?`oJdUeMqEPL/u>8m?i>!02E:%3PumuA2M,U\'(%+X3)o):_,
%N':^_74n%]\ZCNi#S9C4EHEU!9*U1]=G.]3Wj=TUiQNKP23u+jYq^I:`c(5U1U8.kZ4$B4I3#qW=co-pAG!X/NT(f"kLoK/aR2g.
%]53emOg,$X*bNV3_727\WXT54fc3JZ;qcR``E<RCFEs64CPg2%hL82k3kimJEE_:2fGNhl%PnAF9hYG%Qnd)!.&MYB[0'$S3CdkG
%eFr\<2\aEnS>koIX+U^m#*`,o1OU*P?sct\edTjDj;&(Zds)EE[p^io`2+2GCc<&ICamBTMrM)Ln[j_CK5I6G62I91n"^d=>*+DD
%Ukeen;'ZV`!*Z*2dm2.34.%WVB#=P4MK$ilD%Jck/?!m8Ch;BcnPae-\cUZd/#&Y?+O0!.:&;A_K&2+>YA]8IE1-`"Kood70/O`g
%Cl;?\7Z)%)>"(61_F,7)iTR%R4"-%&Wj]$aBSmEp%Oe^:9Rh:-H\lj>693Yre#rFF_c0<Eq`$XVa-tE&;8W34mdFrC^;DOYkDF\/
%btGg7#K77k0Ci!&)#oC-Q=1L(<\;uK&J3"?<.="M)/ino;$P@=i:9PEA(QJ6D4HMok.sBf%Va?"EU-UYNYlFq*TmdYj]fE;>!hmD
%bAJtZ?\cMLPWEKHLLFrPLsBQ=RSYLgF5Hr:[<dhD_SOV)cOWc)C2=R[",G4;c/Vm&,K)LUM%.A&a:Xm-G$#.MM-*RKWK/cnEOh@J
%/VDG=E>nFLo:?eZW3UOF_L"jJ=\!/_$_s:!BUrOQHd7\eRlID#HCWW60A@+!2Te<DeQ7jJ`=(B,_,d!S[R[:(_Ii51Nf$='n?Ome
%m^QtQ`s"=tj)&6'r7aE7n+%sYos`!!C]E]S:q4.GWd\5pF(;=nq+HudqdL@WMn]4"k[s&THGhtTM"3t!3]&9T4riHfm2%:&QiM8"
%B*lGb@28MgCW&MY7bl%!N6p'IENlm2Ko;hoU8Z:$HmkM].7pr\#)'n"APJhYeA[P:p`kUt4LQOfMPU!7@Vm%+NB/]bn/t-o@L%EC
%SCH4L)'ak)Aap4#7SUn!:hdA:KuPp`V>i$A9Is7tUS6&DiCC+C`2_1@Dq9MZ573j\c@?6V-R&k83r?k]fMcl]o.\E*FZIOLa:N)8
%</gGWk/jHHKUVph/G7VTN.\+FR2NkX49Obl&;%_d<S)4N9])mOL4mmI&-ZREN[)"o1i!f`GUSImT9h7:D`LJV/![W-Tc8'-*.LoT
%0hA`:+NrGD^`J&,dq%s!/2eFmm9mB2eIq_#3L)])Gl)ncMd2<>j_SK)&J(a*%G7ee7C=Hmo*<'FTo/O'2bf8fp6fZ-7).XljX7:?
%=S^6!1Cuj_e`TV#$(G!nJ;k?Q_kpbo"Ga.H1VYu"2!WjkJ5;aTg/(mNCCt6%M1jJO#._J_D*D'iErhtqgS'&?<O4Je"oP[EK)n,R
%l5bH^a[QH\;+VJ^FDZ(2(D*-KLCfg655l2R;bbqHKBWU!W/VB"B?a-\$So*G2-Sp1R@G*om#WrKRG4dW>_XPe`7D:%P6SYV+?"g2
%O0Nh_"]i1-HY_CPJdG;a(s#'#Z*c>L1%$=s\5d$L5=>4DAR1D7B?0*]BX1R>+J]6UX#..)+cap?7Ts+u3^Ju.(,ga+YGguVjHuG9
%0AH[[HuH5SB;LR;^>qI3ps=o!4RtDnT9t$[**J'ob7;%ie]<2oE*:Q7'sioJ[U.<=8mgri?@LQ;6X.tg/W!%Ndgn1TV\O6EF:?!b
%Qh(j(?pJP@SID%n+rY-%Z/?+bYO8>GN?(u[E!?s+;i(]GE2g8Lh\OpX_mMnLEQ8[FAqQ3r>spT<H1EjrL9.<Z=i7BjA4s/'pDU/B
%6Gsj>>/:LYbW+;mY>PEh2>63d=P7qa&nqn!:Jp.Act$+%h1bH2(6obd&Zahj/4%4I/'Vf?ihm&6c"[[>(oW'jWE@#a(aL@s'&]9:
%S*b@`&8r4:@f7S+_gXM"SWd<Y!k-1PL4p4_dK[!u7#o2>aP$X<h;,/r6Gt#XDY>T30F2WcrMn"BYI3E:/TU_\?Dj-7J"@qFnk&I;
%ltB6.Y+)mgB!b[eN!q66$(A+"7L7Ae3&B<[/%-2\!SZs(Z_*p/)cePOn2t/&W!%#Bi,46Cg5eK.MVR8XQ\8^QK)jX9HkDji`VL_-
%^QdH]IC+[!?cjShh(dN7rXV(GoQ)h7Y@/p-="CfW/&%lL^?%QJC,QZuUI[p]/S>.VPqU34m!=[Zfn)^"#n?:n$f^fZ0-tQA<!0OJ
%TRW8je@&fg2orIue.d9q1DMLo[<kP<Ms(8Xjdo<mK]`*GffV6Cm%)N8KW,S9kmd@T6Shaaa'h-&KuAL'Jaqd8:-Cpi$kq+:](<Wr
%b0j382#S9iJ1IWUeElX&RD5mG"'3iT0>RsA/0@/hq$8pQn[q+UXQj`2Y:=&`R>,gtVNhnW:7X!\'@-8m%2lD$i>Q`4)g)b'dj1tb
%'JPi80F="UjIWaD3c_,e(R"Zr7BRn[p<b_oLE;?%p!h3_ED:!"\/.'&Xir9R9M:aga1r"6\l`UVQ&p+\pcr]@<XECGq#t%ig6s%]
%.:I"j-;,o@>j$u@]e1KVIIB#;M89mFKPepAa=aO-1YgikkYgu&g6Pqh4O?!aLK1H$2",0`#Qoq9?.lC1W@ThkZ-EK7[:5kjn.dO,
%9VnmK/M2%CBk`m@VAQnlq\K`c(c_Y_bN(0JF0u<(X+Eq#)mudR8Qa8B%s2U+U+=N[b%:$n[+aQO&IloPVa7OcdeUs^5F7q,#$H-S
%:*;BJK%pI*;`'Re4FtMp'+&73M-&lgPJqP;LmI,Ue"ST6T9cprqV3NdT44'feR=[-:EWeic=VGEqheO-RNH)4^RtJF$Ziib.VmD%
%(0uSgb'q7),l;N8M4a*19ANj/>'e:_P\.9`BkT*;JlhS%g0BOW?K\O0Kn\k)T/.]#`!XH'b`4B3R_cq,E2ID1Bj"MpB4uWS4H;kH
%qFkae?R7g21RtOmSa"$?KA3*\FnQeJ;c$VcU>L!.9#M5TB%U1qOg-r)&6IarnT)5/S0*taDD"a;j_)\WZF7UhEV0Y6>?R[q`2qR_
%Wu6XaaRXD:AVhEC(A2`?MF^jTqL##TY#GjA+P2L3[d$aJ5pNro6`&LAX%r:=QEa\rRWMsTB9(CK)NSI\7ADD99l"0&_MZm<17,((
%jdMHjCKCGi=L:O%lDB*rkSLF4DisJ+jPh6eMd9Vt)S5V7VJFZd3_FW=bPcSN$@TB-8$<BnRWR`Pi;Foe.JiqP@=s:gORt0Y-nIZ:
%aQf,8.7DBXpHa(r86O@``Y`W>=JUi.QBm*3-,,85DWi*,ImfcXqL'!lG>!jUkh4j-s/^;@GVqnYj]o+=O2cJ&%-_G>B="Q\h*pYU
%XftCklAQ>sW'm&;L4T[OUXMA&>690QmgZ"-X4>Gm6m98._d9Ak\k92d'Of>=Ut25h<FRQq&Q7*rqVE[H`4['dblSBZO4!IoQtB4G
%Ete+0m5n>df,j/,EjLE(g,t%.h6"+U\DHpk.chLd#?"86rou_6DH2Wa^TB<JWX+rmi'1lhjYd%!.Gj!SPjt(]i)YCCq@9BOd#T"?
%FZb8^F,8HR@FaA4fN1=g/]lPJfZK%m)_YM4+>b89e_!Hi'K#kM(9\E'fI4UDd/+F3p.9.un;N:V8R#B.s$CD`7O-JC;+aAUIO<;V
%SaRk4(!#._?31mu]F*1*J00dHo<TJ2*eWE79/n:*A<hE$A_UmM]fICq",69,)C)(N=mPWLD$ej2A:K+)8OoUhjpr"?Q6i>RI82V*
%+74V&Z,1bgSn&-?$4M4j;nS/$d!mnB-+>^<["O^2X`ZlKBr6,N$H\4an$K9I_W=K,2EK]>f(9'sI)"H;1:et(nRsYPkJj&j<jYdV
%=:dP4McmVRG\X&6`,m/-5`*^gJI*.gYeS-AP*XgnU)qp@+uT27LrE0r5!_gY;E1lu5TD>TZQ[b:UH-+XHn7rH=Q>YXOapXmV-0UT
%I>Kb1;@E^Y,Djm^MGp&nMMkZ':,GoOB3%%XA8"(IW,c1Xi1T#NLA91g9uJB4d='58Fdp>f1nMn'P9u%XNi'Xc`EIH5A3[r$"(DYZ
%R"gR)`sX[#k3t51b*=p0UN=).>t2CBP#oXpp,J0GeIMc$.Z/W^JtN@Ag"rX4IdP,\T-J)-#XmR*?4e/C3(QRT_$[pN#coWs"cZp8
%!<E0f0Io[>cik")#!9)Ge*8+7I)2.`'$iq'/=VM#@9MH6(T(r%5kDD0*r%>i/A&.@SHKljlKHu%%acMY.EN-L+LVCdE_WNb@^%(,
%q%5q"a6+IP6\-@/Ssj#?I/m9,%$?N6.'<gb-0ZOZ:^1aKS/Z_i)39:Ji.,K6SmonjJSo[GgfP'GMlc!M;jn70W"Ba\=.<'9c&)NE
%69Zrhhu%W^#eENX_KGH"`Xl.$FMe#lZ)Mq'e0dn6Jg:0i<9EX:XbZg"_Zo_N8>8"SqNbNOLu='$2rR"4O%-[*ZP5msR+W'L\qj@'
%`h&%`oGb_g0O/?A@AYeaR<oL$DqUq*?h!#T.(i-M%Z1*0ac`?YQbC;H4_9/Q#n:Ds$kQ5a\*?>(KuV"lrFhLF2MRbqV,GI[L3CJ%
%?;R&lYXr\KAcZP#gE;cWJWYfANut(;Nlq\8D][k<Vigo`&VHd2H^.@QB"o9QE(tkm);]'Ih$cC5FDD0Yh;8b`\`ol>,J`O*`F*BR
%Nn/*E<Q8<]k.r"m??]H@9Pk*N/a-UYRak<BnO4+o1MIj:knUJRL[!f@@hHQFGQ\""Dfo`I]i*rUa$Rj_11ZjJJ(/BOekVRMi\CgK
%:@J,j@L2#^N0Yj><*4[_Em"s3)2SE+ZX[sp`b0W?(mLBa9AUWJeh,gD=A0KP$El1:CcMmW\rGJmk-CLcn^kcFitF8[i=dgk$V+k\
%1p\8I`\;VI]g`6=12iXlf^NX0I8i-L3[.`%hI)'#LRQK6lmF3M:22liLG=D+Ct0!BCiXl1[])aQ'18]f?0[mt*oVE2X7:tik17?s
%n^meD['t]P%t*p$4D8<0N!R^e"EAd91#mf:LPdb:K!;HBq^CNJJ`efp*JW%`53`R2CaCK(AXsTa>A0J-ijc;(-YOD.&h*G((Fou2
%/ishV^No?Rj>sMpreB?qOLFM1@F,_a,6MpZfn[HP><dRKPY",K0JpM.'V,-7=Gt<e#j>Y;_[q\4:)bKFJ9DMaLLH[OePI+@GuI0i
%'Lj'g']u6d.GDkZP7N"LqSLQZH_!49HX1?R?UVNYcNZ06\lDt?^V"JDR,S$Q;ke4*VTCr*p'cMMSa=f6$j_>d8&%rX#Yoqr`LpU>
%%mN!?PYUd1]uBm?+q'mneo&AoT<#-ADI8TYCLf-P:XBLZf[OZ'oE/=4!>HrqHXN^0cb(W;?J*cs#`llW_o2TZBJ@R$msrXa)C-rA
%V]JV4!qKUO;K`,^XZLR_:MHJSM01@V#[2IeFnLBl83Xe,$#Y"4f>9,H])p:NPE:T&?LZID(QV,ld\lg+7bn^NC:[j^Rp^^8L;?GW
%p)"8)$X0I#+l#'Lk?<s>@C8<&[KBN"I#%0T2(iCX6,X[Oi/1aMN74Q-Q*uc<oio9p%bdD>iP/&R_>5N+M`eEE[#H[)>sf9G/&<;H
%R\`9gEs*MsicXT<3g:c_S0Ik"-NPb->s4]`9@dG\<(hHXbPcQ\8O!J%s&&sl&f9n*M^rm"`9H]j?I.i92=UC<+WOL_)o>)n*it)_
%fZc.X7)L<0f"[<^73%:U@`3''h;Y0]I@!UDJ+R.k)h7pb/rou]%MM;ikZ_:?)J,[F6A1?V8^/f'P4;M-]hA^j9:`pD4:/#-j;hr.
%YUBc9atQ<;k2WD$$;hkN'I1-[q'M0;^El!1;'Tp)JRVXp/+-9W6K<(C&qWG!Y*`^:[Zt5L<RTH;\DT#3Ui[#6pBZp97la&TdI`,@
%/d6jX`H7!hZ)d*Q!j%VA,D"gJ?PM*-F>G+Z';ae$0XAAfAc9=jnhXCn7JT&`MEIE/BY1"tC9]n!0E)*#&(BE([M'Vq`m*bD0T_5+
%nf($?Z3&!lR<#aCLirMbgE/%$:dD-lDNc1e6$9poC#DQi]Mli"aK+T&#]R/4)W9HTqfJ*r!m\Ti::?)m)bDK[![cP@4L,tNJncuO
%`EOsRRbf<^kZ.[G[2CFV9Lk@KOWWM5P(ilJX#_WlmP?e30gl5N\t$]Nq2l%1a2RkMn"'.u>EWC&[Y,mmdpGsN!>s,O.s[q:LXljm
%3TLFtg1]VqTK#GBH`gA@1UZ\^?%f&g)%Lu%)QO"R>'/7)#*ro+<=L8r(W3^d$9b=<khWe(#[VIGRcUF.JW?X0fR)>UrUVmq*CJc)
%kiBY#l%NfA;h"fAgfRYA!@$TA4\[pfUh:\8.B3Tp^^X8s+e8f3a^%ZE45P@>=9$+%10fXWQu<Pa(6j9\SER0Y('m["4_5$-1j%'(
%^k7ka1\HK!O%;WBG]/ID#@STfRtkb_BH>otC-l-cRJdOE['?[gs$;)o5!bC'QbVVgg+(A67gKc\kems@<TsX'G'gUEi7jcub#]:`
%!ug7LV1$.gKa9qj[;e1#fhW/+3[ol^,&YsWhTQS#g;+IY0quu#g'4&"cOf5[hXAuW1%UR_IL3W4>()fV!u_h_M]p5(b^"`Oba-<_
%j,UA=f-%bj_O@D_N<Wp,KG1NKAtW$H&HcH,?nO!lCWt%rZ)J&Sd^Q']"WNboiQS`m!;@3Oh>4b$$#mKB-gIpKP-"iS*_UEPM_OaZ
%I]/rgd.8^N#dc!4;u?(2(C7Mj,(`E4JoWs:5=_8EC/.qV[gRS%R)iT"*mMlpaH4Ml+LS/*&Eg!O=DD/%@?XR5;Mpc3M/'_RC%rSp
%-"RB11g9Ellm_)T`V`3Zq0k4mf4U)nc<s[8Dq\kHPl`mSKAq__2KCd=j-F]t7&=sEe4aSU'".5B;b1(=D"+,uag3Y&,jN8!Fp#BP
%YAuUN&\YO:2P`Ulk7X,0o=5`R`Xc"bOkLC81pNR#Ut_Cu,J,#]f&(*H%s0[ZWU:?^$ni3$4GtiL]^!Rg\ft'*DYEVD7]b7:R`&bS
%[p+M1.QM*C&<TQ\08Ql?lqZ]p[*\S3Ojd,JKCj9!h<"("cu-9:lkX:e0bGK7FZ=-UXFqGu`mL#_L`$pCX^:&gh@f9.0OEoEKd:D,
%mS7JLdpFd5M3107s'5E?g;*ckn5scT^2k'(Cm-P[[NtZAT8"<gBNj21Rhk96cint_Ms(-ak>d8r%)$k.,2NCk8&iUN'_:?ZDg3<"
%L^kt!H&CWdTR"]+7W&/pQhhPi$lpY,O6-AP#'G#5j-B-<]*$GpFuY55EmfMcBT6j>klMi+mBh'[hBF?;-X]:;XG&`)N!YU_^o#[s
%bVfuiTQ3[55I!oNBM7<id_lqC\c@@L312h#2Jkm54`nu_"?=9hK&+-Bio5!ehW[PZg]i9u3BE@^!TGg/e9`E7]%(C,E.f8J8sa?X
%qCIQR$3*D1!P%F.(e4HtD7rWRB*t9q-D=XF`K&=+[fPK]a!eB-E%8OXU(\R+_sPL\EE)BLohJp19:H>@Wg_^-^hCoXHP_;Hg:^<"
%+_@p-cjK-h^A"YoR@4b;g"'SP<c^eO=A"Mq<;t$L6\sr>7=T-`[a@'YUO<nE?k5d`'X\gq[Y]a<L=/\i0eNipd"4a090115C!csW
%=rV#]\frHqGU^lKCqQ\-O`U$d&n%0ddf'U1dIuJRk\&B"\kA]/PV!;\8("%-'*d5A1\3iXb(u?\-mGoOABUCp''*llO_to'-(HDI
%]HiZ7Xk3[.r3h_AqbZI4Ym.5L)rY=165%ri63d_R?Z-X`k=OXER5OnNC2/43V9SbS9EbG"RsFj"\!N[D4]>S%0+KT@0l1Q$Lf4_[
%,'=<e8*`F=L&'\Vct=RqK^KO5$M]lZ'Ka?+laAm/%1:#Q38Dr>8JIcV\45/7AuoiY]i2ES0M!Bf4U.bRB"On9b>Ps=!4u(IH/@g^
%UQoeJX3Yt"*=Ytc"KTY!L;T1qIl,rV>BONa&%$=N.=M>X_;aK"[3bGZY#(MM8@P&4&g$8U!;:]Af`O)X=@3L!)DDF*Wh*dbWfEfi
%MnKQ-&H9C#:?'Lr5U";p)uJ@@/JhD+cd5Xpd_Er6-YaT<Q1.1]WckGo)6S1km=TZ(]KF1#9gV+,+%s']qCFGM"5R^Jpe:\D3=sck
%3C_Z<VDb:lmRbS&C_)P^bAl@=oD(_fcfp8>_!'IVkB%V+b<m69ib8YA"_DWl_:(?_.sC:/`W$":hH(A#$ql?a(tA(jO@qc",l2ig
%Puhbh:2q^YJ]EQSOe?,8Z`(h0BcBfpGhBNk:fJaoe/eX@>hIs)ZTW2I<.bWR=j?F\iA.V&g'_8(X5(pIVQ^dGH>];30CGI*a\TNh
%&c+W==Y#^9`1ZGLjL31[ktGah/IEe/NN!HtMg3X27(bkZLJmp(+?l&9T<$(`VL9oOSGI,M3o%)T3aWGQ</d_oA@BT\mPFOfPiB+>
%HD^:FD$rd7Npn$*Fs!sLg#kH/@+>;mW6l-DcFuI9)hPA*&guO)".Zd\jUCM5=G")5KLH;q@t=(^r:'k!*r,gIK^o1,bug;uh]#iQ
%(pKu"'&.TC<dg.G%0uu,ZYcH<5(]@J,:3t\H3V4V!p7.Cj$fXdPVaNCU2]G`qecPAMk6el%.SiZLQTS>m-5X_>!0hMm)I[9321tO
%!?Dr$e(,Jbe*5X1bTpZ/@jp,"K32YeMY9R88M&c/:W<p&9g+(t3]XF.(47-Ka4gkaXP[FX\"EWnU>5C"0'Hu[Yu1%9YS7W?<I66U
%Nt!P*<SFC<65TesTP"@tS.OW[OTl)tMPs+d2?-"Hj1DrgO)#?`cNhS(7["gHbF0;C(:<,Ab($:3gn<g)I>D$Fp@/8%)'9oemGg"o
%&_\tW]]Y\(8!:`M]ZR%=/d\'Ol66`[,;"`0+k3D`&N[n1jOH.&&/i`Nf8u[IJ^_=M6Von*k9mX`paEmG<bKcP!YchRi\3O_X(H1.
%!u:-b1Pg;gJss`A.j7F$YSFX/)%6qmc<_e^TW?5&V,&q(,k+Q;+j7*i0ER]$(l,FDeD*E7INd2\)Emca2IR''U`.J+Qm5/fp+`Dr
%-45i?5o`1CqNhl7OjR",qClh#V<.n\GU)3<kY$qJHGo.%:S]3Y\W[16,(W!OrF`%7K2X/n2Q7Ul\_kF_IpIN?`f,WUE#,E*b4TsF
%35im'?Pap8Jn1<n;dmac`$'l:g;sd0k=*<]M&"#K1seKA>c;.+JrhomQAcJDX8uZ.oQnt_F:5>-MtASmBb;856&$35o1T?5QQQOW
%>1=hXM7!1!&.V0,I-Mn"H$D'C4@"S=_.CstGnJ[fJ0GiTS*`G&Pq@#fpd\fQ22"bu%1iFo[^#bWBD+p:;j_:7hOXn7j_>R"RNY#S
%,]GWb;4b3=(;U9GLSZmE_c;1j>dq:XIe_Ng1J$,k,VpE<rW:87=9\\+ketFG5CTRE6L=tH[eHc&?b<40EP,2)_)8s$+.6Cb:\GIr
%DDN2Mna6Upl>uSX;^Z01Q@h,RHT52V@,TSoMW'ZF]mtp3ETmrPRTZp$GUIJ05f?HIpGOIPK2=76V\jl-T56!<AZ"+(=SU8f[qR9m
%\Hne;3,,_PDiHR3<gB*Q9OW5!qW;-S)k9NW4iW=r-1q2)AIj*_[UQ;i,G`cd:aV_*3n%*EVUL2U#*fE:;;"PRJK<C(qJ,5@UE2-m
%S-nW,'$_3#fD/=tSYXX^+/jJ,$FuW2B%q1a5#^7aQ):h7=09ct]^6J-2!HkG/dH+]rNjmO79HbVEdO,V[jkj.6/fA6_E*Z?HEd?i
%QWsPC\tt+mn.F?/HUosB>E(i(kh"2e,%"=QnSin/mdIXrVheLhe\;Ul`=(EKdGl#+b:9(@-AsiolPi2"d,L1=d%c#RRK*F(N.erc
%,c;'EhL'ej#i+qgbL>mP"*drQ!uPsU=10uM#Yq,,EuW(,0V7rH%@&*4PT7aherIt%-cSE3EFU\=^lGG@b4TLK=@Erb,3%L)V][_2
%n0\8LM^,@dRpZqj%"h!.L,Bnn@ZKgtdf^5MJc5=%/\%#gj:ijV&G9!IFF+;[+^fg6NB$`R?\]_.\jp213"59Fo^Hlm0GrA'86>#D
%OUkj\H65cU[K$%2Ac&,q[_7CjA5FX?rsmlkI3J#7r5^BGBb>qJmO7*G@Uh%UE(Y?IH,NXHS$<*(7>5I5+RE_0/EC(NMl3WUbB#na
%HW=#PGH!QP9JjMQLsLd(Gd*E&Q`DD224jNiP>):;8=/r].;:G^U9Gf>GD\EKWd#Kbm4uOfP$1oCpT)lMVe$PESDc]MTWs:\rlDk$
%GS%2U$C:mCmA<Tsfnur@&FTFDOa)#7<r&;;4>etmBHcj.BndA/kl\,!c]F`OjHMO>7B?0Wrj/999L8*IEcM$Y7^i&jXC$<i%aZ2k
%)06m5(k:mBBFH^M`-;EO3M=*>_:\)dA$$7O(-u<*ERZh0>3s=gm2&Q@'+=qNE+':\X-1Ou//mL$&b-8H<f19(\jmiEEu:2q'7Gek
%5uP%ZRF'uO4580fR886fTYd?>b"`otI?[Op$,V-XN5-3_H!A)r"QbA7`K-e"`ZZ$NglhE-lV,h.*:"FnBE!bMK>'d.5Ui-;GE](U
%YTV!mnS4.REKoTg&.Sm=$%Nq2KCC*q6^IW7q4`hdlj^..+-Aa@jF-b:AI2Xi'[_P%+TfRt6B"hT3'3dqpO+U_fBujOh^!ihS$P8N
%:A:)KpE2M^2js+DWH5p`&?!12nSnjf1OR_%IhID\*HV43;.f-O-pTQR#FWph:8VRU%s-I.P\B*i5Ekmtn^!pV.<FWY&=ln#q9$$J
%S``3\!l+$]Dr@Iu3+BgGqM,G<Zjo(qb@+=\g_C<[n.X)W"YfL";UuIg6?F]Y!EP].9,7P_e@>o?YfSX#7+VI+%*g!,&9)\6nC\\T
%mi\l1i,L@Q(<kJWq<Q45i.HuImo*r80*e/b`C`Fi7scYWo["aK%3f'gSoL8f(.kif/r8O/oMCrTd.K(_UPCIRAX)mb".aNaX=A>"
%F\13VfkV*=KGcH1TedQ)J6d(/[7HfNeA*t(,A]N=hjn2G4`j!">bRKmI3:\[08iY.l(MUHUg\*8+)uNQ"7!rha`msOnc<ft*kL&.
%!\<K.Mj-&FW.A)t.#@NB;KV`]M=f0b]>%+35o0Mtok0nsDY?m/b9(T"Wr;HQh!BulV>WT4k,;%`rDi\N?<)1Nk.a#Ll+]X&JJM)>
%Qnb;`@<<ZQ+$,E7)K5b:J[E5TK(h0SqKpI23%IG&?+/8+Wjqakq%Z<5!.&0.p#kmLh2jANE.)<G6%V*T>FIkSfU"FH;At]-Ko.k8
%(=*[9gQra1)[cJh&nS60b77]Ao`Z(Gh&>%4J"t9pEL%jdP<^E[]'_+\U%(*SS2=&pVV$'Djsel"#3#1(9nB/1$bms\r3BYc'-N/K
%bNK\E@pdV<(=JG,$Qes1^m0G$LcW@QK(ElY%nO%@:Z_O=b#YN_:^%9q4?OPA3^:en+YF48eVqDr+HbmsFFWLJNA2lAA9*R46(E]X
%>":pN76X".QBVsTPg,1YEu+JX'q[U+!QD^T7?M`G;jLj_CE\Eb?::6N_dkCIYgU82]es[TBiK=nVBhU?i:t(D8t+++A7\!BJ@?5j
%#oH8+Y1XlSQ5q1pmfZD4<,#o.63IIOj]8,Y1RU1#%/(0VM\J#9Mdntl$beQUkrDH7#gIgMYU33"Xrs`ooa.'g_cTrlIt4u<B(e$6
%B"j=QQ&a5(VJR7_'/bX>3I;4R!rI_&@h.!;^&UceYof8CeIm\-L_Kf?n-XkLl$J&%k(nS60:m>Sko.e\Hr:9C6!,$,eQDUTco)l>
%1]/K)%EH_W^NEJr+=?un;?no[3=j;]V.<0T@*-Cd+T3BgGDuf9]@*#k+On]QB:C&GKI3$;)Qr'3=&hm$=dnE_I$"Y7D)MTh0Eg]P
%T4T[TrXS&<-=7<kk`qRF;*GLT+:R(7U#OVN7b[3Ol4%ZAFYTA7oWOnS7q*Gaq2B95+L]<+Ap=ot"kb[ag$PTd8'V8d?FK^[,tFi!
%P?E/cB\oJgE-gJV!3B2<e#l_FARD>oGTTU2E!$93TP_&ddt&=I__kUKBEj3Vr<2N'J32tn5MZ@/Y1t,Q,/(Q_d!"N=r=$rd0WT;K
%&#0:<H5Z2q:hEt8aWj#VRX4u?W@q(=*6hs'j_d/:\]IkNJuC671>L_Tm7m/V9Z$8d>As:i^aBCp.sCg&8VAC\Vhl4U=WoH8N#=r6
%hBqReP];"N;3QsbHkLg+7?7+]p"*HJ&(&dd2;KB!$),s@/kR-[#Pu.jLcq$AYuH>/+tgQFk!q1C>YR6TV`sENXuWJkMHcB_R\c3;
%)jWoH#DXeR@UNQ`ME)Fm:IC?80E_fJ1Of&LW@peL6/jFZW=Yb\qYa*$H8'gJGe#3#g#&\_IpG%.m:mJ!f#c%1,+?&>3S\*h(e)":
%?+t?,hPpCIa/qAec\iHtMrF(Tjb1]p-:&kI=$m6KcbLc0g:itg,"HDl@`m(j3?_X3e4X,&b.&5f)[d]$C_XK$7t#:P#(7pRmVX!A
%BUINZ??,5dCfrTJ60M!+f+tfnXj&?S9[WO-7W`Fq-B!r7QI%<Wf6d*BC2:7M3)b4R0rJ7#cIA)_?-2*)N^"*/'F%,n')ErAI/DS>
%G]mZ$NAoR@mY`4tZ1/*oL.m^jZ(\X@_sP-O$UtMonam9Z3h)"uW@?aapDg]EnBM68==m*`&1h@&A^a9%p_I2k6?[U%rC&=kjmET8
%]:=IULndD-qEk9TUPDfjD7:n2+VJCF*V/Q%#2^7d%YsI>4H[*%1L7H,/NY;<lLns?$DR;7]XPi90aaXJnB,3NqGC%_k&*mNiE!RQ
%r<Q[DWrg)re;X),D0?%L`!Z&DD3\`,,=JbD[Hgpp3^T$Yo2Q-tk0^4LYs5*PC_N.p$/ZLb%ni0Z=8!lW69C"KEIgeEA`(h\^0Db/
%7=Y:>D1g+"8*F>igAG9R1L.+th/AsR#XLc2DZC0?f"i(:_R1MC&WhU2]4=;*MP3Euq3oZ'aRAlCE*2:M:5H-1UNGB=IMFi\q_8&i
%2*BmVA.d)`F6P1cA6Z.oUoB(R\@!/+CVnqen9Ct[X.QW5bGsJa&/o3.jBk<N(R)MpKMZV":NutMGMuA%`6k9+[!dp4^[OY6#NEIm
%7X83Kljr,AN>5p_6i0>FC`!OTbRM[gLT_R!#5Z`W;%84#?@ZAQ-?8d3CD(GXEdsFC=1c.@?,>mE<qDBtos;I=#F72M)J7-Xi?qEd
%C?#ZS/!B\S6dF9ba<RP3T*4-Z:Cfr3m*,_6bKA0E)#Ztd:l.A-]1$&(G<"s,Wq5M)A-Rt7Z#8&l^S1nV\?N7\Tc"ZHa/Z/(-b+VX
%b+l#q*h_oI1]%cQf/BgXK]g/Q;OoqNK*dkQ("a>D-4_.6rO5&-$#5me\-7nhL1F-_qNcL90C2>X1,MAGkhPa6/>AaXc%dWfn7D#N
%#NmM%%!rkMMs;1V.k^BE?@mn$'36k**FVII8t*\GlO.<l01[0q8:(ZJE.Ya/Lc`Ol1_`_8p;i=;r<nntE+DIm*TUHPiJZ-p,FE"i
%6Y4H'5KC+E`TL),VK!A.gBCIEi6nn2NcpRDb@!bN5(]0o#PCs"V:<ZcfjC@762Cmcjs&r&PT]iXbk><`Dh\#f8+-,F`;bn[,(3s/
%>QFN?,4Pf?E7<0DLrMIlLBt))B4r-N>Jkp>C$;mZZ%Tu>Q6IT*kW@?<U&/qo.,nE7;TKr=#h"XZk:&q&cAcsQ77aG*$&J9!GQE-t
%'r%u$p(Fm#FGu6jd>t080-D][@<1T6dPm#nR^X$-d]JP)J0XDVoguMZ8u?^=H_e(M>*Fr%`Ws**CR/q:KlPVcX^WYko%Q'SX=Q`K
%0t=P+<W*!BqG=l!n"&I$?gOk1#tKktB<#OipB?&(FPA#sY6]D"%`/b+2VfqB#[t4lRgWHN,@']KXgMB*PC9t6UC(5Kd3nhZV0s*8
%.q.0<e9@]-M,7L;H&ne(*N=(rU9FgfK5AljIn1@j"_d088E5qF&PL>WY-mJ?UUCU^_VWf>33h\uLq&6?(ajQT7mi(uWA!0U@;hJr
%oiM?HWc73SA^Mq*p@"RGW<p$bGY#M;J743d"'^F,UDAI.p3j-/Lc(b,S];FOZo2V$FK`3I1T41Y]Zo.YKm[uXZSkEqY3LULYF"q`
%O&3JSIArN+42-`G`@a0qmj&qCB8>!se6NPZk%hS-$HWK>nO2&LZiB%_d3<\EQq,[2`L4^3FTXD7[,es>ksR%Y]!RXFGOml/b@0YW
%or1?m?DC/)0OZ's0@!HONiW:WcjV-6@0aJ*C7V?gmC60!kroD)C3mK@iCqKmZ7:31a3b(fQI'.r^onsQ1u->T)&*Z$b;Iu2d/Q/s
%81hahiU62M@UVK8U!#,J7l]:6+QMuH=eqZ;o.K=dbCo%ZZ.e;DnIDYp5Qn;@"u.d*9@UBrKT<Tr9qTBV["\`W&P0INZ'hF!o`Kk"
%gA%'@Uub7lg`a8/lP@4QQ)LIY2E9J:,cC[Qmh2A>XFH9YI*4uGgFluBAt&suH,UC)lhIEmAQ(Bus4Lc]:)(D@Oqadl<8@,S(VGcV
%6W^+?XDiHU86ldX&HfAm<+YUeI&'ZUqc)ja92gXp?SqM-iC=I<Xq\-]<-8u;LHTM5'Jb2+e2WonV]\jq6#ks`UVB_jW0Na)Z)DcS
%6S,3Y9+*g4-TB;9_DR<m<MaJ(W2g>H'Ae,iZrgU1O(b:b.?Y6kq>r@CUr(db*t>K)ii+YkAWR>Ml@r-D=A7qB#M>V1o0#opQr]2B
%M,Tca5obs8P`R%e6)0)heOlsf*rn&M\N,/?c]NsCb@)6P=0CNa%T-VcoHSAUlLe$+E/ega)oZ*R`9U)0.06gU%Xn8cVrcHg"n5UQ
%NPp5B:A&I*/O+d-pP\!<eIX22f*t#6E*tWdEM/%Je<[#`F6)T:@QF&2XLI1(ZDqr%V!ee5@E8gGge@RAf#rR,Y\b&j[OUdJbsFCi
%nCBbLJOn=3LKCZRlCe+rWP>i<pjhlWGZ>bZ3"0hCfOnFT?,FG*Z*5^HksmRfjXW27/\"ekk!)c]n&1kP(jMEOTBK;W4B#b#5Aa;&
%YuU-&p:@'$d9fqfc?'e/gF-K!a?'E:"480,$unMYgE;0T5mZ9?QM4&T'O8V$&A"Qq-I!(N]H6LC.)^.Z>FWn8:D@eVDq-m8o;]6A
%.W(nnnrii-<TVC?2&0Y$m?f!R<^4*TKlZVsNV_9I)>[*A.$6!d.K*6V^co1m$1QM[5%!D6d/<?7ARBrBfCe8&s8M>6nF*R\qVV/E
%1"*`7kC<DbJ,5f:F8A-#e%bgipL!s\Dh%f1?TRt[s7NSqr3u^nmsk;NrpRW#r?)'uTE";^s6njZrq\;Jnur)mf73hTs3q"sf0B<6
%Du]P"s8)K)IJqq#q60f="IWkVJ,6)CoO%TaJ,G*%!RaVEg]~>
%AI9_PrivateDataEnd
